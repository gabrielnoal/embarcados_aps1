
spi_teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000887c  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0040887c  0040887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000013a8  20400000  00408884  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000300  204013a8  00409c2c  000213a8  2**2
                  ALLOC
  4 .stack        00002000  204016a8  00409f2c  000213a8  2**0
                  ALLOC
  5 .heap         00000200  204036a8  0040bf2c  000213a8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000213a8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000213d6  2**0
                  CONTENTS, READONLY
  8 .debug_info   000157c3  00000000  00000000  0002142f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002e2a  00000000  00000000  00036bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000571f  00000000  00000000  00039a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a40  00000000  00000000  0003f13b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d8  00000000  00000000  0003fb7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000992b  00000000  00000000  00040553  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000e48d  00000000  00000000  00049e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00090758  00000000  00000000  0005830b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00003520  00000000  00000000  000e8a64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	a8 36 40 20 e1 24 40 00 91 25 40 00 91 25 40 00     .6@ .$@..%@..%@.
  400010:	91 25 40 00 91 25 40 00 91 25 40 00 00 00 00 00     .%@..%@..%@.....
	...
  40002c:	91 25 40 00 91 25 40 00 00 00 00 00 91 25 40 00     .%@..%@......%@.
  40003c:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  40004c:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  40005c:	91 25 40 00 91 25 40 00 00 00 00 00 99 20 40 00     .%@..%@...... @.
  40006c:	b1 20 40 00 c9 20 40 00 91 25 40 00 91 25 40 00     . @.. @..%@..%@.
  40007c:	91 25 40 00 e1 20 40 00 f9 20 40 00 91 25 40 00     .%@.. @.. @..%@.
  40008c:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  40009c:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000ac:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000bc:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000cc:	91 25 40 00 00 00 00 00 91 25 40 00 00 00 00 00     .%@......%@.....
  4000dc:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000ec:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  4000fc:	91 25 40 00 91 25 40 00 91 25 40 00 91 25 40 00     .%@..%@..%@..%@.
  40010c:	91 25 40 00 91 25 40 00 00 00 00 00 00 00 00 00     .%@..%@.........
  40011c:	00 00 00 00 91 25 40 00 91 25 40 00 91 25 40 00     .....%@..%@..%@.
  40012c:	91 25 40 00 91 25 40 00 00 00 00 00 91 25 40 00     .%@..%@......%@.
  40013c:	91 25 40 00                                         .%@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	204013a8 	.word	0x204013a8
  40015c:	00000000 	.word	0x00000000
  400160:	00408884 	.word	0x00408884

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00408884 	.word	0x00408884
  4001a0:	204013ac 	.word	0x204013ac
  4001a4:	00408884 	.word	0x00408884
  4001a8:	00000000 	.word	0x00000000

004001ac <spi_get_peripheral_select_mode>:
 * \param p_spi Pointer to an SPI instance.
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
  4001ac:	b480      	push	{r7}
  4001ae:	b083      	sub	sp, #12
  4001b0:	af00      	add	r7, sp, #0
  4001b2:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4001b4:	687b      	ldr	r3, [r7, #4]
  4001b6:	685b      	ldr	r3, [r3, #4]
  4001b8:	f003 0302 	and.w	r3, r3, #2
  4001bc:	2b00      	cmp	r3, #0
  4001be:	d001      	beq.n	4001c4 <spi_get_peripheral_select_mode+0x18>
		return 1;
  4001c0:	2301      	movs	r3, #1
  4001c2:	e000      	b.n	4001c6 <spi_get_peripheral_select_mode+0x1a>
	} else {
		return 0;
  4001c4:	2300      	movs	r3, #0
	}
}
  4001c6:	4618      	mov	r0, r3
  4001c8:	370c      	adds	r7, #12
  4001ca:	46bd      	mov	sp, r7
  4001cc:	f85d 7b04 	ldr.w	r7, [sp], #4
  4001d0:	4770      	bx	lr
	...

004001d4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
  4001d4:	b580      	push	{r7, lr}
  4001d6:	b082      	sub	sp, #8
  4001d8:	af00      	add	r7, sp, #0
  4001da:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  4001dc:	6878      	ldr	r0, [r7, #4]
  4001de:	4b03      	ldr	r3, [pc, #12]	; (4001ec <sysclk_enable_peripheral_clock+0x18>)
  4001e0:	4798      	blx	r3
}
  4001e2:	bf00      	nop
  4001e4:	3708      	adds	r7, #8
  4001e6:	46bd      	mov	sp, r7
  4001e8:	bd80      	pop	{r7, pc}
  4001ea:	bf00      	nop
  4001ec:	004023d5 	.word	0x004023d5

004001f0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  4001f0:	b580      	push	{r7, lr}
  4001f2:	b082      	sub	sp, #8
  4001f4:	af00      	add	r7, sp, #0
  4001f6:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  4001f8:	687b      	ldr	r3, [r7, #4]
  4001fa:	4a09      	ldr	r2, [pc, #36]	; (400220 <spi_enable_clock+0x30>)
  4001fc:	4293      	cmp	r3, r2
  4001fe:	d103      	bne.n	400208 <spi_enable_clock+0x18>
		sysclk_enable_peripheral_clock(ID_SPI0);
  400200:	2015      	movs	r0, #21
  400202:	4b08      	ldr	r3, [pc, #32]	; (400224 <spi_enable_clock+0x34>)
  400204:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  400206:	e006      	b.n	400216 <spi_enable_clock+0x26>
	else if (p_spi == SPI1) {
  400208:	687b      	ldr	r3, [r7, #4]
  40020a:	4a07      	ldr	r2, [pc, #28]	; (400228 <spi_enable_clock+0x38>)
  40020c:	4293      	cmp	r3, r2
  40020e:	d102      	bne.n	400216 <spi_enable_clock+0x26>
		sysclk_enable_peripheral_clock(ID_SPI1);
  400210:	202a      	movs	r0, #42	; 0x2a
  400212:	4b04      	ldr	r3, [pc, #16]	; (400224 <spi_enable_clock+0x34>)
  400214:	4798      	blx	r3
}
  400216:	bf00      	nop
  400218:	3708      	adds	r7, #8
  40021a:	46bd      	mov	sp, r7
  40021c:	bd80      	pop	{r7, pc}
  40021e:	bf00      	nop
  400220:	40008000 	.word	0x40008000
  400224:	004001d5 	.word	0x004001d5
  400228:	40058000 	.word	0x40058000

0040022c <spi_set_peripheral_chip_select_value>:
 *                 The decode mode can be enabled/disabled by follow functions:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
  40022c:	b480      	push	{r7}
  40022e:	b083      	sub	sp, #12
  400230:	af00      	add	r7, sp, #0
  400232:	6078      	str	r0, [r7, #4]
  400234:	6039      	str	r1, [r7, #0]
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  400236:	687b      	ldr	r3, [r7, #4]
  400238:	685b      	ldr	r3, [r3, #4]
  40023a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
  40023e:	687b      	ldr	r3, [r7, #4]
  400240:	605a      	str	r2, [r3, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  400242:	687b      	ldr	r3, [r7, #4]
  400244:	685a      	ldr	r2, [r3, #4]
  400246:	683b      	ldr	r3, [r7, #0]
  400248:	041b      	lsls	r3, r3, #16
  40024a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  40024e:	431a      	orrs	r2, r3
  400250:	687b      	ldr	r3, [r7, #4]
  400252:	605a      	str	r2, [r3, #4]
}
  400254:	bf00      	nop
  400256:	370c      	adds	r7, #12
  400258:	46bd      	mov	sp, r7
  40025a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40025e:	4770      	bx	lr

00400260 <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  400260:	b580      	push	{r7, lr}
  400262:	b084      	sub	sp, #16
  400264:	af00      	add	r7, sp, #0
  400266:	6078      	str	r0, [r7, #4]
  400268:	4608      	mov	r0, r1
  40026a:	4611      	mov	r1, r2
  40026c:	461a      	mov	r2, r3
  40026e:	4603      	mov	r3, r0
  400270:	807b      	strh	r3, [r7, #2]
  400272:	460b      	mov	r3, r1
  400274:	707b      	strb	r3, [r7, #1]
  400276:	4613      	mov	r3, r2
  400278:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
  40027a:	f643 2398 	movw	r3, #15000	; 0x3a98
  40027e:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400280:	e006      	b.n	400290 <spi_write+0x30>
		if (!timeout--) {
  400282:	68fb      	ldr	r3, [r7, #12]
  400284:	1e5a      	subs	r2, r3, #1
  400286:	60fa      	str	r2, [r7, #12]
  400288:	2b00      	cmp	r3, #0
  40028a:	d101      	bne.n	400290 <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
  40028c:	2301      	movs	r3, #1
  40028e:	e020      	b.n	4002d2 <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  400290:	687b      	ldr	r3, [r7, #4]
  400292:	691b      	ldr	r3, [r3, #16]
  400294:	f003 0302 	and.w	r3, r3, #2
  400298:	2b00      	cmp	r3, #0
  40029a:	d0f2      	beq.n	400282 <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  40029c:	6878      	ldr	r0, [r7, #4]
  40029e:	4b0f      	ldr	r3, [pc, #60]	; (4002dc <spi_write+0x7c>)
  4002a0:	4798      	blx	r3
  4002a2:	4603      	mov	r3, r0
  4002a4:	2b00      	cmp	r3, #0
  4002a6:	d00e      	beq.n	4002c6 <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4002a8:	887a      	ldrh	r2, [r7, #2]
  4002aa:	787b      	ldrb	r3, [r7, #1]
  4002ac:	041b      	lsls	r3, r3, #16
  4002ae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
  4002b2:	4313      	orrs	r3, r2
  4002b4:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
  4002b6:	783b      	ldrb	r3, [r7, #0]
  4002b8:	2b00      	cmp	r3, #0
  4002ba:	d006      	beq.n	4002ca <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
  4002bc:	68bb      	ldr	r3, [r7, #8]
  4002be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  4002c2:	60bb      	str	r3, [r7, #8]
  4002c4:	e001      	b.n	4002ca <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
  4002c6:	887b      	ldrh	r3, [r7, #2]
  4002c8:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
  4002ca:	687b      	ldr	r3, [r7, #4]
  4002cc:	68ba      	ldr	r2, [r7, #8]
  4002ce:	60da      	str	r2, [r3, #12]

	return SPI_OK;
  4002d0:	2300      	movs	r3, #0
}
  4002d2:	4618      	mov	r0, r3
  4002d4:	3710      	adds	r7, #16
  4002d6:	46bd      	mov	sp, r7
  4002d8:	bd80      	pop	{r7, pc}
  4002da:	bf00      	nop
  4002dc:	004001ad 	.word	0x004001ad

004002e0 <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
  4002e0:	b480      	push	{r7}
  4002e2:	b085      	sub	sp, #20
  4002e4:	af00      	add	r7, sp, #0
  4002e6:	60f8      	str	r0, [r7, #12]
  4002e8:	60b9      	str	r1, [r7, #8]
  4002ea:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
  4002ec:	687b      	ldr	r3, [r7, #4]
  4002ee:	2b00      	cmp	r3, #0
  4002f0:	d00c      	beq.n	40030c <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4002f2:	68fb      	ldr	r3, [r7, #12]
  4002f4:	68ba      	ldr	r2, [r7, #8]
  4002f6:	320c      	adds	r2, #12
  4002f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4002fc:	f043 0101 	orr.w	r1, r3, #1
  400300:	68fb      	ldr	r3, [r7, #12]
  400302:	68ba      	ldr	r2, [r7, #8]
  400304:	320c      	adds	r2, #12
  400306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
  40030a:	e00b      	b.n	400324 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  40030c:	68fb      	ldr	r3, [r7, #12]
  40030e:	68ba      	ldr	r2, [r7, #8]
  400310:	320c      	adds	r2, #12
  400312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400316:	f023 0101 	bic.w	r1, r3, #1
  40031a:	68fb      	ldr	r3, [r7, #12]
  40031c:	68ba      	ldr	r2, [r7, #8]
  40031e:	320c      	adds	r2, #12
  400320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400324:	bf00      	nop
  400326:	3714      	adds	r7, #20
  400328:	46bd      	mov	sp, r7
  40032a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40032e:	4770      	bx	lr

00400330 <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
  400330:	b480      	push	{r7}
  400332:	b085      	sub	sp, #20
  400334:	af00      	add	r7, sp, #0
  400336:	60f8      	str	r0, [r7, #12]
  400338:	60b9      	str	r1, [r7, #8]
  40033a:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
  40033c:	687b      	ldr	r3, [r7, #4]
  40033e:	2b00      	cmp	r3, #0
  400340:	d00c      	beq.n	40035c <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400342:	68fb      	ldr	r3, [r7, #12]
  400344:	68ba      	ldr	r2, [r7, #8]
  400346:	320c      	adds	r2, #12
  400348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40034c:	f043 0102 	orr.w	r1, r3, #2
  400350:	68fb      	ldr	r3, [r7, #12]
  400352:	68ba      	ldr	r2, [r7, #8]
  400354:	320c      	adds	r2, #12
  400356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
  40035a:	e00b      	b.n	400374 <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  40035c:	68fb      	ldr	r3, [r7, #12]
  40035e:	68ba      	ldr	r2, [r7, #8]
  400360:	320c      	adds	r2, #12
  400362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  400366:	f023 0102 	bic.w	r1, r3, #2
  40036a:	68fb      	ldr	r3, [r7, #12]
  40036c:	68ba      	ldr	r2, [r7, #8]
  40036e:	320c      	adds	r2, #12
  400370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400374:	bf00      	nop
  400376:	3714      	adds	r7, #20
  400378:	46bd      	mov	sp, r7
  40037a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40037e:	4770      	bx	lr

00400380 <spi_configure_cs_behavior>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
  400380:	b480      	push	{r7}
  400382:	b085      	sub	sp, #20
  400384:	af00      	add	r7, sp, #0
  400386:	60f8      	str	r0, [r7, #12]
  400388:	60b9      	str	r1, [r7, #8]
  40038a:	607a      	str	r2, [r7, #4]
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40038c:	687b      	ldr	r3, [r7, #4]
  40038e:	2b04      	cmp	r3, #4
  400390:	d118      	bne.n	4003c4 <spi_configure_cs_behavior+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400392:	68fb      	ldr	r3, [r7, #12]
  400394:	68ba      	ldr	r2, [r7, #8]
  400396:	320c      	adds	r2, #12
  400398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40039c:	f023 0108 	bic.w	r1, r3, #8
  4003a0:	68fb      	ldr	r3, [r7, #12]
  4003a2:	68ba      	ldr	r2, [r7, #8]
  4003a4:	320c      	adds	r2, #12
  4003a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  4003aa:	68fb      	ldr	r3, [r7, #12]
  4003ac:	68ba      	ldr	r2, [r7, #8]
  4003ae:	320c      	adds	r2, #12
  4003b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4003b4:	f043 0104 	orr.w	r1, r3, #4
  4003b8:	68fb      	ldr	r3, [r7, #12]
  4003ba:	68ba      	ldr	r2, [r7, #8]
  4003bc:	320c      	adds	r2, #12
  4003be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
	}
}
  4003c2:	e02a      	b.n	40041a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4003c4:	687b      	ldr	r3, [r7, #4]
  4003c6:	2b00      	cmp	r3, #0
  4003c8:	d118      	bne.n	4003fc <spi_configure_cs_behavior+0x7c>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4003ca:	68fb      	ldr	r3, [r7, #12]
  4003cc:	68ba      	ldr	r2, [r7, #8]
  4003ce:	320c      	adds	r2, #12
  4003d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4003d4:	f023 0108 	bic.w	r1, r3, #8
  4003d8:	68fb      	ldr	r3, [r7, #12]
  4003da:	68ba      	ldr	r2, [r7, #8]
  4003dc:	320c      	adds	r2, #12
  4003de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  4003e2:	68fb      	ldr	r3, [r7, #12]
  4003e4:	68ba      	ldr	r2, [r7, #8]
  4003e6:	320c      	adds	r2, #12
  4003e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4003ec:	f023 0104 	bic.w	r1, r3, #4
  4003f0:	68fb      	ldr	r3, [r7, #12]
  4003f2:	68ba      	ldr	r2, [r7, #8]
  4003f4:	320c      	adds	r2, #12
  4003f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  4003fa:	e00e      	b.n	40041a <spi_configure_cs_behavior+0x9a>
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4003fc:	687b      	ldr	r3, [r7, #4]
  4003fe:	2b08      	cmp	r3, #8
  400400:	d10b      	bne.n	40041a <spi_configure_cs_behavior+0x9a>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  400402:	68fb      	ldr	r3, [r7, #12]
  400404:	68ba      	ldr	r2, [r7, #8]
  400406:	320c      	adds	r2, #12
  400408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40040c:	f043 0108 	orr.w	r1, r3, #8
  400410:	68fb      	ldr	r3, [r7, #12]
  400412:	68ba      	ldr	r2, [r7, #8]
  400414:	320c      	adds	r2, #12
  400416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  40041a:	bf00      	nop
  40041c:	3714      	adds	r7, #20
  40041e:	46bd      	mov	sp, r7
  400420:	f85d 7b04 	ldr.w	r7, [sp], #4
  400424:	4770      	bx	lr

00400426 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400426:	b480      	push	{r7}
  400428:	b085      	sub	sp, #20
  40042a:	af00      	add	r7, sp, #0
  40042c:	60f8      	str	r0, [r7, #12]
  40042e:	60b9      	str	r1, [r7, #8]
  400430:	607a      	str	r2, [r7, #4]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400432:	68fb      	ldr	r3, [r7, #12]
  400434:	68ba      	ldr	r2, [r7, #8]
  400436:	320c      	adds	r2, #12
  400438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  40043c:	f023 01f0 	bic.w	r1, r3, #240	; 0xf0
  400440:	68fb      	ldr	r3, [r7, #12]
  400442:	68ba      	ldr	r2, [r7, #8]
  400444:	320c      	adds	r2, #12
  400446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40044a:	68fb      	ldr	r3, [r7, #12]
  40044c:	68ba      	ldr	r2, [r7, #8]
  40044e:	320c      	adds	r2, #12
  400450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  400454:	687b      	ldr	r3, [r7, #4]
  400456:	ea42 0103 	orr.w	r1, r2, r3
  40045a:	68fb      	ldr	r3, [r7, #12]
  40045c:	68ba      	ldr	r2, [r7, #8]
  40045e:	320c      	adds	r2, #12
  400460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
  400464:	bf00      	nop
  400466:	3714      	adds	r7, #20
  400468:	46bd      	mov	sp, r7
  40046a:	f85d 7b04 	ldr.w	r7, [sp], #4
  40046e:	4770      	bx	lr

00400470 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
  400470:	b480      	push	{r7}
  400472:	b085      	sub	sp, #20
  400474:	af00      	add	r7, sp, #0
  400476:	6078      	str	r0, [r7, #4]
  400478:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
  40047a:	683a      	ldr	r2, [r7, #0]
  40047c:	687b      	ldr	r3, [r7, #4]
  40047e:	4413      	add	r3, r2
  400480:	1e5a      	subs	r2, r3, #1
  400482:	687b      	ldr	r3, [r7, #4]
  400484:	fbb2 f3f3 	udiv	r3, r2, r3
  400488:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40048a:	68fb      	ldr	r3, [r7, #12]
  40048c:	2b00      	cmp	r3, #0
  40048e:	dd02      	ble.n	400496 <spi_calc_baudrate_div+0x26>
  400490:	68fb      	ldr	r3, [r7, #12]
  400492:	2bff      	cmp	r3, #255	; 0xff
  400494:	dd02      	ble.n	40049c <spi_calc_baudrate_div+0x2c>
		return -1;
  400496:	f04f 33ff 	mov.w	r3, #4294967295
  40049a:	e001      	b.n	4004a0 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
  40049c:	68fb      	ldr	r3, [r7, #12]
  40049e:	b21b      	sxth	r3, r3
}
  4004a0:	4618      	mov	r0, r3
  4004a2:	3714      	adds	r7, #20
  4004a4:	46bd      	mov	sp, r7
  4004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4004aa:	4770      	bx	lr

004004ac <spi_set_baudrate_div>:
 * \retval is 0 Success.
 * \retval is -1 Error.
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
  4004ac:	b480      	push	{r7}
  4004ae:	b085      	sub	sp, #20
  4004b0:	af00      	add	r7, sp, #0
  4004b2:	60f8      	str	r0, [r7, #12]
  4004b4:	60b9      	str	r1, [r7, #8]
  4004b6:	4613      	mov	r3, r2
  4004b8:	71fb      	strb	r3, [r7, #7]
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4004ba:	79fb      	ldrb	r3, [r7, #7]
  4004bc:	2b00      	cmp	r3, #0
  4004be:	d102      	bne.n	4004c6 <spi_set_baudrate_div+0x1a>
        return -1;
  4004c0:	f04f 33ff 	mov.w	r3, #4294967295
  4004c4:	e01b      	b.n	4004fe <spi_set_baudrate_div+0x52>

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4004c6:	68fb      	ldr	r3, [r7, #12]
  4004c8:	68ba      	ldr	r2, [r7, #8]
  4004ca:	320c      	adds	r2, #12
  4004cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  4004d0:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
  4004d4:	68fb      	ldr	r3, [r7, #12]
  4004d6:	68ba      	ldr	r2, [r7, #8]
  4004d8:	320c      	adds	r2, #12
  4004da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4004de:	68fb      	ldr	r3, [r7, #12]
  4004e0:	68ba      	ldr	r2, [r7, #8]
  4004e2:	320c      	adds	r2, #12
  4004e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
  4004e8:	79fb      	ldrb	r3, [r7, #7]
  4004ea:	021b      	lsls	r3, r3, #8
  4004ec:	b29b      	uxth	r3, r3
  4004ee:	ea42 0103 	orr.w	r1, r2, r3
  4004f2:	68fb      	ldr	r3, [r7, #12]
  4004f4:	68ba      	ldr	r2, [r7, #8]
  4004f6:	320c      	adds	r2, #12
  4004f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return 0;
  4004fc:	2300      	movs	r3, #0
}
  4004fe:	4618      	mov	r0, r3
  400500:	3714      	adds	r7, #20
  400502:	46bd      	mov	sp, r7
  400504:	f85d 7b04 	ldr.w	r7, [sp], #4
  400508:	4770      	bx	lr
	...

0040050c <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
  40050c:	b480      	push	{r7}
  40050e:	b083      	sub	sp, #12
  400510:	af00      	add	r7, sp, #0
  400512:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
  400514:	4a04      	ldr	r2, [pc, #16]	; (400528 <gfx_mono_set_framebuffer+0x1c>)
  400516:	687b      	ldr	r3, [r7, #4]
  400518:	6013      	str	r3, [r2, #0]
}
  40051a:	bf00      	nop
  40051c:	370c      	adds	r7, #12
  40051e:	46bd      	mov	sp, r7
  400520:	f85d 7b04 	ldr.w	r7, [sp], #4
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	204013c4 	.word	0x204013c4

0040052c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
  40052c:	b480      	push	{r7}
  40052e:	b083      	sub	sp, #12
  400530:	af00      	add	r7, sp, #0
  400532:	4603      	mov	r3, r0
  400534:	71fb      	strb	r3, [r7, #7]
  400536:	460b      	mov	r3, r1
  400538:	71bb      	strb	r3, [r7, #6]
  40053a:	4613      	mov	r3, r2
  40053c:	717b      	strb	r3, [r7, #5]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40053e:	4b08      	ldr	r3, [pc, #32]	; (400560 <gfx_mono_framebuffer_put_byte+0x34>)
  400540:	681a      	ldr	r2, [r3, #0]
  400542:	79fb      	ldrb	r3, [r7, #7]
  400544:	01db      	lsls	r3, r3, #7
  400546:	4619      	mov	r1, r3
  400548:	79bb      	ldrb	r3, [r7, #6]
  40054a:	440b      	add	r3, r1
  40054c:	4413      	add	r3, r2
  40054e:	797a      	ldrb	r2, [r7, #5]
  400550:	701a      	strb	r2, [r3, #0]
}
  400552:	bf00      	nop
  400554:	370c      	adds	r7, #12
  400556:	46bd      	mov	sp, r7
  400558:	f85d 7b04 	ldr.w	r7, [sp], #4
  40055c:	4770      	bx	lr
  40055e:	bf00      	nop
  400560:	204013c4 	.word	0x204013c4

00400564 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400564:	b480      	push	{r7}
  400566:	b083      	sub	sp, #12
  400568:	af00      	add	r7, sp, #0
  40056a:	4603      	mov	r3, r0
  40056c:	460a      	mov	r2, r1
  40056e:	71fb      	strb	r3, [r7, #7]
  400570:	4613      	mov	r3, r2
  400572:	71bb      	strb	r3, [r7, #6]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  400574:	4b07      	ldr	r3, [pc, #28]	; (400594 <gfx_mono_framebuffer_get_byte+0x30>)
  400576:	681a      	ldr	r2, [r3, #0]
  400578:	79fb      	ldrb	r3, [r7, #7]
  40057a:	01db      	lsls	r3, r3, #7
  40057c:	4619      	mov	r1, r3
  40057e:	79bb      	ldrb	r3, [r7, #6]
  400580:	440b      	add	r3, r1
  400582:	4413      	add	r3, r2
  400584:	781b      	ldrb	r3, [r3, #0]
}
  400586:	4618      	mov	r0, r3
  400588:	370c      	adds	r7, #12
  40058a:	46bd      	mov	sp, r7
  40058c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400590:	4770      	bx	lr
  400592:	bf00      	nop
  400594:	204013c4 	.word	0x204013c4

00400598 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  400598:	b590      	push	{r4, r7, lr}
  40059a:	b085      	sub	sp, #20
  40059c:	af00      	add	r7, sp, #0
  40059e:	4604      	mov	r4, r0
  4005a0:	4608      	mov	r0, r1
  4005a2:	4611      	mov	r1, r2
  4005a4:	461a      	mov	r2, r3
  4005a6:	4623      	mov	r3, r4
  4005a8:	71fb      	strb	r3, [r7, #7]
  4005aa:	4603      	mov	r3, r0
  4005ac:	71bb      	strb	r3, [r7, #6]
  4005ae:	460b      	mov	r3, r1
  4005b0:	717b      	strb	r3, [r7, #5]
  4005b2:	4613      	mov	r3, r2
  4005b4:	713b      	strb	r3, [r7, #4]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4005b6:	79fa      	ldrb	r2, [r7, #7]
  4005b8:	797b      	ldrb	r3, [r7, #5]
  4005ba:	4413      	add	r3, r2
  4005bc:	2b80      	cmp	r3, #128	; 0x80
  4005be:	dd06      	ble.n	4005ce <gfx_mono_generic_draw_horizontal_line+0x36>
		length = GFX_MONO_LCD_WIDTH - x;
  4005c0:	79fb      	ldrb	r3, [r7, #7]
  4005c2:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
  4005c6:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
  4005ca:	3380      	adds	r3, #128	; 0x80
  4005cc:	717b      	strb	r3, [r7, #5]
	}

	page = y / 8;
  4005ce:	79bb      	ldrb	r3, [r7, #6]
  4005d0:	08db      	lsrs	r3, r3, #3
  4005d2:	73fb      	strb	r3, [r7, #15]
	pixelmask = (1 << (y - (page * 8)));
  4005d4:	79ba      	ldrb	r2, [r7, #6]
  4005d6:	7bfb      	ldrb	r3, [r7, #15]
  4005d8:	00db      	lsls	r3, r3, #3
  4005da:	1ad3      	subs	r3, r2, r3
  4005dc:	2201      	movs	r2, #1
  4005de:	fa02 f303 	lsl.w	r3, r2, r3
  4005e2:	73bb      	strb	r3, [r7, #14]

	if (length == 0) {
  4005e4:	797b      	ldrb	r3, [r7, #5]
  4005e6:	2b00      	cmp	r3, #0
  4005e8:	d066      	beq.n	4006b8 <gfx_mono_generic_draw_horizontal_line+0x120>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4005ea:	793b      	ldrb	r3, [r7, #4]
  4005ec:	2b01      	cmp	r3, #1
  4005ee:	d01c      	beq.n	40062a <gfx_mono_generic_draw_horizontal_line+0x92>
  4005f0:	2b02      	cmp	r3, #2
  4005f2:	d05b      	beq.n	4006ac <gfx_mono_generic_draw_horizontal_line+0x114>
  4005f4:	2b00      	cmp	r3, #0
  4005f6:	d03b      	beq.n	400670 <gfx_mono_generic_draw_horizontal_line+0xd8>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
  4005f8:	e05f      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  4005fa:	79fa      	ldrb	r2, [r7, #7]
  4005fc:	797b      	ldrb	r3, [r7, #5]
  4005fe:	4413      	add	r3, r2
  400600:	b2da      	uxtb	r2, r3
  400602:	7bfb      	ldrb	r3, [r7, #15]
  400604:	4611      	mov	r1, r2
  400606:	4618      	mov	r0, r3
  400608:	4b2d      	ldr	r3, [pc, #180]	; (4006c0 <gfx_mono_generic_draw_horizontal_line+0x128>)
  40060a:	4798      	blx	r3
  40060c:	4603      	mov	r3, r0
  40060e:	737b      	strb	r3, [r7, #13]
			temp |= pixelmask;
  400610:	7b7a      	ldrb	r2, [r7, #13]
  400612:	7bbb      	ldrb	r3, [r7, #14]
  400614:	4313      	orrs	r3, r2
  400616:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  400618:	79fa      	ldrb	r2, [r7, #7]
  40061a:	797b      	ldrb	r3, [r7, #5]
  40061c:	4413      	add	r3, r2
  40061e:	b2d9      	uxtb	r1, r3
  400620:	7b7a      	ldrb	r2, [r7, #13]
  400622:	7bf8      	ldrb	r0, [r7, #15]
  400624:	2300      	movs	r3, #0
  400626:	4c27      	ldr	r4, [pc, #156]	; (4006c4 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  400628:	47a0      	blx	r4
		while (length-- > 0) {
  40062a:	797b      	ldrb	r3, [r7, #5]
  40062c:	1e5a      	subs	r2, r3, #1
  40062e:	717a      	strb	r2, [r7, #5]
  400630:	2b00      	cmp	r3, #0
  400632:	d1e2      	bne.n	4005fa <gfx_mono_generic_draw_horizontal_line+0x62>
		break;
  400634:	e041      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  400636:	79fa      	ldrb	r2, [r7, #7]
  400638:	797b      	ldrb	r3, [r7, #5]
  40063a:	4413      	add	r3, r2
  40063c:	b2da      	uxtb	r2, r3
  40063e:	7bfb      	ldrb	r3, [r7, #15]
  400640:	4611      	mov	r1, r2
  400642:	4618      	mov	r0, r3
  400644:	4b1e      	ldr	r3, [pc, #120]	; (4006c0 <gfx_mono_generic_draw_horizontal_line+0x128>)
  400646:	4798      	blx	r3
  400648:	4603      	mov	r3, r0
  40064a:	737b      	strb	r3, [r7, #13]
			temp &= ~pixelmask;
  40064c:	f997 300e 	ldrsb.w	r3, [r7, #14]
  400650:	43db      	mvns	r3, r3
  400652:	b25a      	sxtb	r2, r3
  400654:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400658:	4013      	ands	r3, r2
  40065a:	b25b      	sxtb	r3, r3
  40065c:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  40065e:	79fa      	ldrb	r2, [r7, #7]
  400660:	797b      	ldrb	r3, [r7, #5]
  400662:	4413      	add	r3, r2
  400664:	b2d9      	uxtb	r1, r3
  400666:	7b7a      	ldrb	r2, [r7, #13]
  400668:	7bf8      	ldrb	r0, [r7, #15]
  40066a:	2300      	movs	r3, #0
  40066c:	4c15      	ldr	r4, [pc, #84]	; (4006c4 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  40066e:	47a0      	blx	r4
		while (length-- > 0) {
  400670:	797b      	ldrb	r3, [r7, #5]
  400672:	1e5a      	subs	r2, r3, #1
  400674:	717a      	strb	r2, [r7, #5]
  400676:	2b00      	cmp	r3, #0
  400678:	d1dd      	bne.n	400636 <gfx_mono_generic_draw_horizontal_line+0x9e>
		break;
  40067a:	e01e      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
			temp = gfx_mono_get_byte(page, x + length);
  40067c:	79fa      	ldrb	r2, [r7, #7]
  40067e:	797b      	ldrb	r3, [r7, #5]
  400680:	4413      	add	r3, r2
  400682:	b2da      	uxtb	r2, r3
  400684:	7bfb      	ldrb	r3, [r7, #15]
  400686:	4611      	mov	r1, r2
  400688:	4618      	mov	r0, r3
  40068a:	4b0d      	ldr	r3, [pc, #52]	; (4006c0 <gfx_mono_generic_draw_horizontal_line+0x128>)
  40068c:	4798      	blx	r3
  40068e:	4603      	mov	r3, r0
  400690:	737b      	strb	r3, [r7, #13]
			temp ^= pixelmask;
  400692:	7b7a      	ldrb	r2, [r7, #13]
  400694:	7bbb      	ldrb	r3, [r7, #14]
  400696:	4053      	eors	r3, r2
  400698:	737b      	strb	r3, [r7, #13]
			gfx_mono_put_byte(page, x + length, temp);
  40069a:	79fa      	ldrb	r2, [r7, #7]
  40069c:	797b      	ldrb	r3, [r7, #5]
  40069e:	4413      	add	r3, r2
  4006a0:	b2d9      	uxtb	r1, r3
  4006a2:	7b7a      	ldrb	r2, [r7, #13]
  4006a4:	7bf8      	ldrb	r0, [r7, #15]
  4006a6:	2300      	movs	r3, #0
  4006a8:	4c06      	ldr	r4, [pc, #24]	; (4006c4 <gfx_mono_generic_draw_horizontal_line+0x12c>)
  4006aa:	47a0      	blx	r4
		while (length-- > 0) {
  4006ac:	797b      	ldrb	r3, [r7, #5]
  4006ae:	1e5a      	subs	r2, r3, #1
  4006b0:	717a      	strb	r2, [r7, #5]
  4006b2:	2b00      	cmp	r3, #0
  4006b4:	d1e2      	bne.n	40067c <gfx_mono_generic_draw_horizontal_line+0xe4>
		break;
  4006b6:	e000      	b.n	4006ba <gfx_mono_generic_draw_horizontal_line+0x122>
		return;
  4006b8:	bf00      	nop
	}
}
  4006ba:	3714      	adds	r7, #20
  4006bc:	46bd      	mov	sp, r7
  4006be:	bd90      	pop	{r4, r7, pc}
  4006c0:	00400ad5 	.word	0x00400ad5
  4006c4:	00400a51 	.word	0x00400a51

004006c8 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  4006c8:	b590      	push	{r4, r7, lr}
  4006ca:	b083      	sub	sp, #12
  4006cc:	af00      	add	r7, sp, #0
  4006ce:	4604      	mov	r4, r0
  4006d0:	4608      	mov	r0, r1
  4006d2:	4611      	mov	r1, r2
  4006d4:	461a      	mov	r2, r3
  4006d6:	4623      	mov	r3, r4
  4006d8:	71fb      	strb	r3, [r7, #7]
  4006da:	4603      	mov	r3, r0
  4006dc:	71bb      	strb	r3, [r7, #6]
  4006de:	460b      	mov	r3, r1
  4006e0:	717b      	strb	r3, [r7, #5]
  4006e2:	4613      	mov	r3, r2
  4006e4:	713b      	strb	r3, [r7, #4]
	if (height == 0) {
  4006e6:	793b      	ldrb	r3, [r7, #4]
  4006e8:	2b00      	cmp	r3, #0
  4006ea:	d00f      	beq.n	40070c <gfx_mono_generic_draw_filled_rect+0x44>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
  4006ec:	e008      	b.n	400700 <gfx_mono_generic_draw_filled_rect+0x38>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  4006ee:	79ba      	ldrb	r2, [r7, #6]
  4006f0:	793b      	ldrb	r3, [r7, #4]
  4006f2:	4413      	add	r3, r2
  4006f4:	b2d9      	uxtb	r1, r3
  4006f6:	7e3b      	ldrb	r3, [r7, #24]
  4006f8:	797a      	ldrb	r2, [r7, #5]
  4006fa:	79f8      	ldrb	r0, [r7, #7]
  4006fc:	4c05      	ldr	r4, [pc, #20]	; (400714 <gfx_mono_generic_draw_filled_rect+0x4c>)
  4006fe:	47a0      	blx	r4
	while (height-- > 0) {
  400700:	793b      	ldrb	r3, [r7, #4]
  400702:	1e5a      	subs	r2, r3, #1
  400704:	713a      	strb	r2, [r7, #4]
  400706:	2b00      	cmp	r3, #0
  400708:	d1f1      	bne.n	4006ee <gfx_mono_generic_draw_filled_rect+0x26>
  40070a:	e000      	b.n	40070e <gfx_mono_generic_draw_filled_rect+0x46>
		return;
  40070c:	bf00      	nop
	}
}
  40070e:	370c      	adds	r7, #12
  400710:	46bd      	mov	sp, r7
  400712:	bd90      	pop	{r4, r7, pc}
  400714:	00400599 	.word	0x00400599

00400718 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
  400718:	b580      	push	{r7, lr}
  40071a:	b086      	sub	sp, #24
  40071c:	af00      	add	r7, sp, #0
  40071e:	603b      	str	r3, [r7, #0]
  400720:	4603      	mov	r3, r0
  400722:	71fb      	strb	r3, [r7, #7]
  400724:	460b      	mov	r3, r1
  400726:	71bb      	strb	r3, [r7, #6]
  400728:	4613      	mov	r3, r2
  40072a:	717b      	strb	r3, [r7, #5]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
  40072c:	79bb      	ldrb	r3, [r7, #6]
  40072e:	743b      	strb	r3, [r7, #16]
	gfx_coord_t inc_y = y;
  400730:	797b      	ldrb	r3, [r7, #5]
  400732:	73fb      	strb	r3, [r7, #15]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400734:	683b      	ldr	r3, [r7, #0]
  400736:	7a1b      	ldrb	r3, [r3, #8]
  400738:	08db      	lsrs	r3, r3, #3
  40073a:	74fb      	strb	r3, [r7, #19]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  40073c:	683b      	ldr	r3, [r7, #0]
  40073e:	7a1b      	ldrb	r3, [r3, #8]
  400740:	f003 0307 	and.w	r3, r3, #7
  400744:	b2db      	uxtb	r3, r3
  400746:	2b00      	cmp	r3, #0
  400748:	d002      	beq.n	400750 <gfx_mono_draw_char_progmem+0x38>
		char_row_size++;
  40074a:	7cfb      	ldrb	r3, [r7, #19]
  40074c:	3301      	adds	r3, #1
  40074e:	74fb      	strb	r3, [r7, #19]
	}

	glyph_data_offset = char_row_size * font->height *
  400750:	7cfb      	ldrb	r3, [r7, #19]
  400752:	b29a      	uxth	r2, r3
  400754:	683b      	ldr	r3, [r7, #0]
  400756:	7a5b      	ldrb	r3, [r3, #9]
  400758:	b29b      	uxth	r3, r3
  40075a:	fb12 f303 	smulbb	r3, r2, r3
  40075e:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
  400760:	79fb      	ldrb	r3, [r7, #7]
  400762:	6839      	ldr	r1, [r7, #0]
  400764:	7a89      	ldrb	r1, [r1, #10]
  400766:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
  400768:	b29b      	uxth	r3, r3
  40076a:	fb12 f303 	smulbb	r3, r2, r3
  40076e:	81bb      	strh	r3, [r7, #12]
	glyph_data = font->data.progmem + glyph_data_offset;
  400770:	683b      	ldr	r3, [r7, #0]
  400772:	685a      	ldr	r2, [r3, #4]
  400774:	89bb      	ldrh	r3, [r7, #12]
  400776:	4413      	add	r3, r2
  400778:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
  40077a:	683b      	ldr	r3, [r7, #0]
  40077c:	7a5b      	ldrb	r3, [r3, #9]
  40077e:	74bb      	strb	r3, [r7, #18]

	do {
		uint8_t glyph_byte = 0;
  400780:	2300      	movs	r3, #0
  400782:	73bb      	strb	r3, [r7, #14]
		uint8_t pixelsToDraw = font->width;
  400784:	683b      	ldr	r3, [r7, #0]
  400786:	7a1b      	ldrb	r3, [r3, #8]
  400788:	72fb      	strb	r3, [r7, #11]

		for (i = 0; i < pixelsToDraw; i++) {
  40078a:	2300      	movs	r3, #0
  40078c:	747b      	strb	r3, [r7, #17]
  40078e:	e01e      	b.n	4007ce <gfx_mono_draw_char_progmem+0xb6>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400790:	7c7b      	ldrb	r3, [r7, #17]
  400792:	f003 0307 	and.w	r3, r3, #7
  400796:	b2db      	uxtb	r3, r3
  400798:	2b00      	cmp	r3, #0
  40079a:	d105      	bne.n	4007a8 <gfx_mono_draw_char_progmem+0x90>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  40079c:	697b      	ldr	r3, [r7, #20]
  40079e:	781b      	ldrb	r3, [r3, #0]
  4007a0:	73bb      	strb	r3, [r7, #14]
				glyph_data++;
  4007a2:	697b      	ldr	r3, [r7, #20]
  4007a4:	3301      	adds	r3, #1
  4007a6:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
  4007a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
  4007ac:	2b00      	cmp	r3, #0
  4007ae:	da05      	bge.n	4007bc <gfx_mono_draw_char_progmem+0xa4>
				gfx_mono_draw_pixel(inc_x, inc_y,
  4007b0:	7bf9      	ldrb	r1, [r7, #15]
  4007b2:	7c3b      	ldrb	r3, [r7, #16]
  4007b4:	2201      	movs	r2, #1
  4007b6:	4618      	mov	r0, r3
  4007b8:	4b0e      	ldr	r3, [pc, #56]	; (4007f4 <gfx_mono_draw_char_progmem+0xdc>)
  4007ba:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
  4007bc:	7c3b      	ldrb	r3, [r7, #16]
  4007be:	3301      	adds	r3, #1
  4007c0:	743b      	strb	r3, [r7, #16]
			glyph_byte <<= 1;
  4007c2:	7bbb      	ldrb	r3, [r7, #14]
  4007c4:	005b      	lsls	r3, r3, #1
  4007c6:	73bb      	strb	r3, [r7, #14]
		for (i = 0; i < pixelsToDraw; i++) {
  4007c8:	7c7b      	ldrb	r3, [r7, #17]
  4007ca:	3301      	adds	r3, #1
  4007cc:	747b      	strb	r3, [r7, #17]
  4007ce:	7c7a      	ldrb	r2, [r7, #17]
  4007d0:	7afb      	ldrb	r3, [r7, #11]
  4007d2:	429a      	cmp	r2, r3
  4007d4:	d3dc      	bcc.n	400790 <gfx_mono_draw_char_progmem+0x78>
		}

		inc_y += 1;
  4007d6:	7bfb      	ldrb	r3, [r7, #15]
  4007d8:	3301      	adds	r3, #1
  4007da:	73fb      	strb	r3, [r7, #15]
		inc_x = x;
  4007dc:	79bb      	ldrb	r3, [r7, #6]
  4007de:	743b      	strb	r3, [r7, #16]
		rows_left--;
  4007e0:	7cbb      	ldrb	r3, [r7, #18]
  4007e2:	3b01      	subs	r3, #1
  4007e4:	74bb      	strb	r3, [r7, #18]
	} while (rows_left > 0);
  4007e6:	7cbb      	ldrb	r3, [r7, #18]
  4007e8:	2b00      	cmp	r3, #0
  4007ea:	d1c9      	bne.n	400780 <gfx_mono_draw_char_progmem+0x68>
}
  4007ec:	bf00      	nop
  4007ee:	3718      	adds	r7, #24
  4007f0:	46bd      	mov	sp, r7
  4007f2:	bd80      	pop	{r7, pc}
  4007f4:	004009b5 	.word	0x004009b5

004007f8 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  4007f8:	b590      	push	{r4, r7, lr}
  4007fa:	b085      	sub	sp, #20
  4007fc:	af02      	add	r7, sp, #8
  4007fe:	603b      	str	r3, [r7, #0]
  400800:	4603      	mov	r3, r0
  400802:	71fb      	strb	r3, [r7, #7]
  400804:	460b      	mov	r3, r1
  400806:	71bb      	strb	r3, [r7, #6]
  400808:	4613      	mov	r3, r2
  40080a:	717b      	strb	r3, [r7, #5]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  40080c:	683b      	ldr	r3, [r7, #0]
  40080e:	7a1a      	ldrb	r2, [r3, #8]
  400810:	683b      	ldr	r3, [r7, #0]
  400812:	7a5c      	ldrb	r4, [r3, #9]
  400814:	7979      	ldrb	r1, [r7, #5]
  400816:	79b8      	ldrb	r0, [r7, #6]
  400818:	2300      	movs	r3, #0
  40081a:	9300      	str	r3, [sp, #0]
  40081c:	4623      	mov	r3, r4
  40081e:	4c09      	ldr	r4, [pc, #36]	; (400844 <gfx_mono_draw_char+0x4c>)
  400820:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
  400822:	683b      	ldr	r3, [r7, #0]
  400824:	781b      	ldrb	r3, [r3, #0]
  400826:	2b00      	cmp	r3, #0
  400828:	d000      	beq.n	40082c <gfx_mono_draw_char+0x34>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
  40082a:	e006      	b.n	40083a <gfx_mono_draw_char+0x42>
		gfx_mono_draw_char_progmem(c, x, y, font);
  40082c:	797a      	ldrb	r2, [r7, #5]
  40082e:	79b9      	ldrb	r1, [r7, #6]
  400830:	79f8      	ldrb	r0, [r7, #7]
  400832:	683b      	ldr	r3, [r7, #0]
  400834:	4c04      	ldr	r4, [pc, #16]	; (400848 <gfx_mono_draw_char+0x50>)
  400836:	47a0      	blx	r4
		break;
  400838:	bf00      	nop
	}
}
  40083a:	bf00      	nop
  40083c:	370c      	adds	r7, #12
  40083e:	46bd      	mov	sp, r7
  400840:	bd90      	pop	{r4, r7, pc}
  400842:	bf00      	nop
  400844:	004006c9 	.word	0x004006c9
  400848:	00400719 	.word	0x00400719

0040084c <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  40084c:	b590      	push	{r4, r7, lr}
  40084e:	b087      	sub	sp, #28
  400850:	af00      	add	r7, sp, #0
  400852:	60f8      	str	r0, [r7, #12]
  400854:	607b      	str	r3, [r7, #4]
  400856:	460b      	mov	r3, r1
  400858:	72fb      	strb	r3, [r7, #11]
  40085a:	4613      	mov	r3, r2
  40085c:	72bb      	strb	r3, [r7, #10]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
  40085e:	7afb      	ldrb	r3, [r7, #11]
  400860:	75fb      	strb	r3, [r7, #23]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
  400862:	68fb      	ldr	r3, [r7, #12]
  400864:	781b      	ldrb	r3, [r3, #0]
  400866:	2b0a      	cmp	r3, #10
  400868:	d109      	bne.n	40087e <gfx_mono_draw_string+0x32>
			x = start_of_string_position_x;
  40086a:	7dfb      	ldrb	r3, [r7, #23]
  40086c:	72fb      	strb	r3, [r7, #11]
			y += font->height + 1;
  40086e:	687b      	ldr	r3, [r7, #4]
  400870:	7a5a      	ldrb	r2, [r3, #9]
  400872:	7abb      	ldrb	r3, [r7, #10]
  400874:	4413      	add	r3, r2
  400876:	b2db      	uxtb	r3, r3
  400878:	3301      	adds	r3, #1
  40087a:	72bb      	strb	r3, [r7, #10]
  40087c:	e00f      	b.n	40089e <gfx_mono_draw_string+0x52>
		} else if (*str == '\r') {
  40087e:	68fb      	ldr	r3, [r7, #12]
  400880:	781b      	ldrb	r3, [r3, #0]
  400882:	2b0d      	cmp	r3, #13
  400884:	d00b      	beq.n	40089e <gfx_mono_draw_string+0x52>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400886:	68fb      	ldr	r3, [r7, #12]
  400888:	7818      	ldrb	r0, [r3, #0]
  40088a:	7aba      	ldrb	r2, [r7, #10]
  40088c:	7af9      	ldrb	r1, [r7, #11]
  40088e:	687b      	ldr	r3, [r7, #4]
  400890:	4c08      	ldr	r4, [pc, #32]	; (4008b4 <gfx_mono_draw_string+0x68>)
  400892:	47a0      	blx	r4
			x += font->width;
  400894:	687b      	ldr	r3, [r7, #4]
  400896:	7a1a      	ldrb	r2, [r3, #8]
  400898:	7afb      	ldrb	r3, [r7, #11]
  40089a:	4413      	add	r3, r2
  40089c:	72fb      	strb	r3, [r7, #11]
		}
	} while (*(++str));
  40089e:	68fb      	ldr	r3, [r7, #12]
  4008a0:	3301      	adds	r3, #1
  4008a2:	60fb      	str	r3, [r7, #12]
  4008a4:	68fb      	ldr	r3, [r7, #12]
  4008a6:	781b      	ldrb	r3, [r3, #0]
  4008a8:	2b00      	cmp	r3, #0
  4008aa:	d1da      	bne.n	400862 <gfx_mono_draw_string+0x16>
}
  4008ac:	bf00      	nop
  4008ae:	371c      	adds	r7, #28
  4008b0:	46bd      	mov	sp, r7
  4008b2:	bd90      	pop	{r4, r7, pc}
  4008b4:	004007f9 	.word	0x004007f9

004008b8 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
  4008b8:	b580      	push	{r7, lr}
  4008ba:	b082      	sub	sp, #8
  4008bc:	af00      	add	r7, sp, #0
  4008be:	4603      	mov	r3, r0
  4008c0:	71fb      	strb	r3, [r7, #7]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  4008c2:	79fb      	ldrb	r3, [r7, #7]
  4008c4:	f003 030f 	and.w	r3, r3, #15
  4008c8:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  4008ca:	79fb      	ldrb	r3, [r7, #7]
  4008cc:	f063 034f 	orn	r3, r3, #79	; 0x4f
  4008d0:	b2db      	uxtb	r3, r3
  4008d2:	4618      	mov	r0, r3
  4008d4:	4b02      	ldr	r3, [pc, #8]	; (4008e0 <ssd1306_set_page_address+0x28>)
  4008d6:	4798      	blx	r3
	
}
  4008d8:	bf00      	nop
  4008da:	3708      	adds	r7, #8
  4008dc:	46bd      	mov	sp, r7
  4008de:	bd80      	pop	{r7, pc}
  4008e0:	004011bd 	.word	0x004011bd

004008e4 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
  4008e4:	b580      	push	{r7, lr}
  4008e6:	b082      	sub	sp, #8
  4008e8:	af00      	add	r7, sp, #0
  4008ea:	4603      	mov	r3, r0
  4008ec:	71fb      	strb	r3, [r7, #7]
	// Make sure the address is 7 bits
	address &= 0x7F;
  4008ee:	79fb      	ldrb	r3, [r7, #7]
  4008f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  4008f4:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  4008f6:	79fb      	ldrb	r3, [r7, #7]
  4008f8:	091b      	lsrs	r3, r3, #4
  4008fa:	b2db      	uxtb	r3, r3
  4008fc:	f043 0310 	orr.w	r3, r3, #16
  400900:	b2db      	uxtb	r3, r3
  400902:	4618      	mov	r0, r3
  400904:	4b06      	ldr	r3, [pc, #24]	; (400920 <ssd1306_set_column_address+0x3c>)
  400906:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400908:	79fb      	ldrb	r3, [r7, #7]
  40090a:	f003 030f 	and.w	r3, r3, #15
  40090e:	b2db      	uxtb	r3, r3
  400910:	4618      	mov	r0, r3
  400912:	4b03      	ldr	r3, [pc, #12]	; (400920 <ssd1306_set_column_address+0x3c>)
  400914:	4798      	blx	r3
}
  400916:	bf00      	nop
  400918:	3708      	adds	r7, #8
  40091a:	46bd      	mov	sp, r7
  40091c:	bd80      	pop	{r7, pc}
  40091e:	bf00      	nop
  400920:	004011bd 	.word	0x004011bd

00400924 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
  400924:	b580      	push	{r7, lr}
  400926:	b082      	sub	sp, #8
  400928:	af00      	add	r7, sp, #0
  40092a:	4603      	mov	r3, r0
  40092c:	71fb      	strb	r3, [r7, #7]
	// Make sure address is 6 bits
	address &= 0x3F;
  40092e:	79fb      	ldrb	r3, [r7, #7]
  400930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  400934:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400936:	79fb      	ldrb	r3, [r7, #7]
  400938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40093c:	b2db      	uxtb	r3, r3
  40093e:	4618      	mov	r0, r3
  400940:	4b02      	ldr	r3, [pc, #8]	; (40094c <ssd1306_set_display_start_line_address+0x28>)
  400942:	4798      	blx	r3
}
  400944:	bf00      	nop
  400946:	3708      	adds	r7, #8
  400948:	46bd      	mov	sp, r7
  40094a:	bd80      	pop	{r7, pc}
  40094c:	004011bd 	.word	0x004011bd

00400950 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
  400950:	b590      	push	{r4, r7, lr}
  400952:	b083      	sub	sp, #12
  400954:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
  400956:	4812      	ldr	r0, [pc, #72]	; (4009a0 <gfx_mono_ssd1306_init+0x50>)
  400958:	4b12      	ldr	r3, [pc, #72]	; (4009a4 <gfx_mono_ssd1306_init+0x54>)
  40095a:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
  40095c:	4b12      	ldr	r3, [pc, #72]	; (4009a8 <gfx_mono_ssd1306_init+0x58>)
  40095e:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
  400960:	2000      	movs	r0, #0
  400962:	4b12      	ldr	r3, [pc, #72]	; (4009ac <gfx_mono_ssd1306_init+0x5c>)
  400964:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400966:	2300      	movs	r3, #0
  400968:	71fb      	strb	r3, [r7, #7]
  40096a:	e012      	b.n	400992 <gfx_mono_ssd1306_init+0x42>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  40096c:	2300      	movs	r3, #0
  40096e:	71bb      	strb	r3, [r7, #6]
  400970:	e008      	b.n	400984 <gfx_mono_ssd1306_init+0x34>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400972:	79b9      	ldrb	r1, [r7, #6]
  400974:	79f8      	ldrb	r0, [r7, #7]
  400976:	2301      	movs	r3, #1
  400978:	2200      	movs	r2, #0
  40097a:	4c0d      	ldr	r4, [pc, #52]	; (4009b0 <gfx_mono_ssd1306_init+0x60>)
  40097c:	47a0      	blx	r4
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  40097e:	79bb      	ldrb	r3, [r7, #6]
  400980:	3301      	adds	r3, #1
  400982:	71bb      	strb	r3, [r7, #6]
  400984:	f997 3006 	ldrsb.w	r3, [r7, #6]
  400988:	2b00      	cmp	r3, #0
  40098a:	daf2      	bge.n	400972 <gfx_mono_ssd1306_init+0x22>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  40098c:	79fb      	ldrb	r3, [r7, #7]
  40098e:	3301      	adds	r3, #1
  400990:	71fb      	strb	r3, [r7, #7]
  400992:	79fb      	ldrb	r3, [r7, #7]
  400994:	2b03      	cmp	r3, #3
  400996:	d9e9      	bls.n	40096c <gfx_mono_ssd1306_init+0x1c>
		}
	}
}
  400998:	bf00      	nop
  40099a:	370c      	adds	r7, #12
  40099c:	46bd      	mov	sp, r7
  40099e:	bd90      	pop	{r4, r7, pc}
  4009a0:	204013c8 	.word	0x204013c8
  4009a4:	0040050d 	.word	0x0040050d
  4009a8:	0040110d 	.word	0x0040110d
  4009ac:	00400925 	.word	0x00400925
  4009b0:	00400a51 	.word	0x00400a51

004009b4 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
  4009b4:	b590      	push	{r4, r7, lr}
  4009b6:	b085      	sub	sp, #20
  4009b8:	af00      	add	r7, sp, #0
  4009ba:	4603      	mov	r3, r0
  4009bc:	71fb      	strb	r3, [r7, #7]
  4009be:	460b      	mov	r3, r1
  4009c0:	71bb      	strb	r3, [r7, #6]
  4009c2:	4613      	mov	r3, r2
  4009c4:	717b      	strb	r3, [r7, #5]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  4009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
  4009ca:	2b00      	cmp	r3, #0
  4009cc:	db38      	blt.n	400a40 <gfx_mono_ssd1306_draw_pixel+0x8c>
  4009ce:	79bb      	ldrb	r3, [r7, #6]
  4009d0:	2b1f      	cmp	r3, #31
  4009d2:	d835      	bhi.n	400a40 <gfx_mono_ssd1306_draw_pixel+0x8c>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  4009d4:	79bb      	ldrb	r3, [r7, #6]
  4009d6:	08db      	lsrs	r3, r3, #3
  4009d8:	73bb      	strb	r3, [r7, #14]
	pixel_mask = (1 << (y - (page * 8)));
  4009da:	79ba      	ldrb	r2, [r7, #6]
  4009dc:	7bbb      	ldrb	r3, [r7, #14]
  4009de:	00db      	lsls	r3, r3, #3
  4009e0:	1ad3      	subs	r3, r2, r3
  4009e2:	2201      	movs	r2, #1
  4009e4:	fa02 f303 	lsl.w	r3, r2, r3
  4009e8:	737b      	strb	r3, [r7, #13]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
  4009ea:	79fa      	ldrb	r2, [r7, #7]
  4009ec:	7bbb      	ldrb	r3, [r7, #14]
  4009ee:	4611      	mov	r1, r2
  4009f0:	4618      	mov	r0, r3
  4009f2:	4b15      	ldr	r3, [pc, #84]	; (400a48 <gfx_mono_ssd1306_draw_pixel+0x94>)
  4009f4:	4798      	blx	r3
  4009f6:	4603      	mov	r3, r0
  4009f8:	73fb      	strb	r3, [r7, #15]

	switch (color) {
  4009fa:	797b      	ldrb	r3, [r7, #5]
  4009fc:	2b01      	cmp	r3, #1
  4009fe:	d004      	beq.n	400a0a <gfx_mono_ssd1306_draw_pixel+0x56>
  400a00:	2b02      	cmp	r3, #2
  400a02:	d011      	beq.n	400a28 <gfx_mono_ssd1306_draw_pixel+0x74>
  400a04:	2b00      	cmp	r3, #0
  400a06:	d005      	beq.n	400a14 <gfx_mono_ssd1306_draw_pixel+0x60>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
  400a08:	e013      	b.n	400a32 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value |= pixel_mask;
  400a0a:	7bfa      	ldrb	r2, [r7, #15]
  400a0c:	7b7b      	ldrb	r3, [r7, #13]
  400a0e:	4313      	orrs	r3, r2
  400a10:	73fb      	strb	r3, [r7, #15]
		break;
  400a12:	e00e      	b.n	400a32 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value &= ~pixel_mask;
  400a14:	f997 300d 	ldrsb.w	r3, [r7, #13]
  400a18:	43db      	mvns	r3, r3
  400a1a:	b25a      	sxtb	r2, r3
  400a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
  400a20:	4013      	ands	r3, r2
  400a22:	b25b      	sxtb	r3, r3
  400a24:	73fb      	strb	r3, [r7, #15]
		break;
  400a26:	e004      	b.n	400a32 <gfx_mono_ssd1306_draw_pixel+0x7e>
		pixel_value ^= pixel_mask;
  400a28:	7bfa      	ldrb	r2, [r7, #15]
  400a2a:	7b7b      	ldrb	r3, [r7, #13]
  400a2c:	4053      	eors	r3, r2
  400a2e:	73fb      	strb	r3, [r7, #15]
		break;
  400a30:	bf00      	nop
	}

	gfx_mono_put_byte(page, x, pixel_value);
  400a32:	7bfa      	ldrb	r2, [r7, #15]
  400a34:	79f9      	ldrb	r1, [r7, #7]
  400a36:	7bb8      	ldrb	r0, [r7, #14]
  400a38:	2300      	movs	r3, #0
  400a3a:	4c04      	ldr	r4, [pc, #16]	; (400a4c <gfx_mono_ssd1306_draw_pixel+0x98>)
  400a3c:	47a0      	blx	r4
  400a3e:	e000      	b.n	400a42 <gfx_mono_ssd1306_draw_pixel+0x8e>
		return;
  400a40:	bf00      	nop
}
  400a42:	3714      	adds	r7, #20
  400a44:	46bd      	mov	sp, r7
  400a46:	bd90      	pop	{r4, r7, pc}
  400a48:	00400ad5 	.word	0x00400ad5
  400a4c:	00400a51 	.word	0x00400a51

00400a50 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400a50:	b590      	push	{r4, r7, lr}
  400a52:	b083      	sub	sp, #12
  400a54:	af00      	add	r7, sp, #0
  400a56:	4604      	mov	r4, r0
  400a58:	4608      	mov	r0, r1
  400a5a:	4611      	mov	r1, r2
  400a5c:	461a      	mov	r2, r3
  400a5e:	4623      	mov	r3, r4
  400a60:	71fb      	strb	r3, [r7, #7]
  400a62:	4603      	mov	r3, r0
  400a64:	71bb      	strb	r3, [r7, #6]
  400a66:	460b      	mov	r3, r1
  400a68:	717b      	strb	r3, [r7, #5]
  400a6a:	4613      	mov	r3, r2
  400a6c:	713b      	strb	r3, [r7, #4]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400a6e:	793b      	ldrb	r3, [r7, #4]
  400a70:	f083 0301 	eor.w	r3, r3, #1
  400a74:	b2db      	uxtb	r3, r3
  400a76:	2b00      	cmp	r3, #0
  400a78:	d00a      	beq.n	400a90 <gfx_mono_ssd1306_put_byte+0x40>
  400a7a:	79ba      	ldrb	r2, [r7, #6]
  400a7c:	79fb      	ldrb	r3, [r7, #7]
  400a7e:	4611      	mov	r1, r2
  400a80:	4618      	mov	r0, r3
  400a82:	4b0f      	ldr	r3, [pc, #60]	; (400ac0 <gfx_mono_ssd1306_put_byte+0x70>)
  400a84:	4798      	blx	r3
  400a86:	4603      	mov	r3, r0
  400a88:	461a      	mov	r2, r3
  400a8a:	797b      	ldrb	r3, [r7, #5]
  400a8c:	4293      	cmp	r3, r2
  400a8e:	d012      	beq.n	400ab6 <gfx_mono_ssd1306_put_byte+0x66>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400a90:	797a      	ldrb	r2, [r7, #5]
  400a92:	79b9      	ldrb	r1, [r7, #6]
  400a94:	79fb      	ldrb	r3, [r7, #7]
  400a96:	4618      	mov	r0, r3
  400a98:	4b0a      	ldr	r3, [pc, #40]	; (400ac4 <gfx_mono_ssd1306_put_byte+0x74>)
  400a9a:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
  400a9c:	79fb      	ldrb	r3, [r7, #7]
  400a9e:	4618      	mov	r0, r3
  400aa0:	4b09      	ldr	r3, [pc, #36]	; (400ac8 <gfx_mono_ssd1306_put_byte+0x78>)
  400aa2:	4798      	blx	r3
	ssd1306_set_column_address(column);
  400aa4:	79bb      	ldrb	r3, [r7, #6]
  400aa6:	4618      	mov	r0, r3
  400aa8:	4b08      	ldr	r3, [pc, #32]	; (400acc <gfx_mono_ssd1306_put_byte+0x7c>)
  400aaa:	4798      	blx	r3

	ssd1306_write_data(data);
  400aac:	797b      	ldrb	r3, [r7, #5]
  400aae:	4618      	mov	r0, r3
  400ab0:	4b07      	ldr	r3, [pc, #28]	; (400ad0 <gfx_mono_ssd1306_put_byte+0x80>)
  400ab2:	4798      	blx	r3
  400ab4:	e000      	b.n	400ab8 <gfx_mono_ssd1306_put_byte+0x68>
		return;
  400ab6:	bf00      	nop
}
  400ab8:	370c      	adds	r7, #12
  400aba:	46bd      	mov	sp, r7
  400abc:	bd90      	pop	{r4, r7, pc}
  400abe:	bf00      	nop
  400ac0:	00400565 	.word	0x00400565
  400ac4:	0040052d 	.word	0x0040052d
  400ac8:	004008b9 	.word	0x004008b9
  400acc:	004008e5 	.word	0x004008e5
  400ad0:	00401261 	.word	0x00401261

00400ad4 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
  400ad4:	b580      	push	{r7, lr}
  400ad6:	b082      	sub	sp, #8
  400ad8:	af00      	add	r7, sp, #0
  400ada:	4603      	mov	r3, r0
  400adc:	460a      	mov	r2, r1
  400ade:	71fb      	strb	r3, [r7, #7]
  400ae0:	4613      	mov	r3, r2
  400ae2:	71bb      	strb	r3, [r7, #6]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400ae4:	79ba      	ldrb	r2, [r7, #6]
  400ae6:	79fb      	ldrb	r3, [r7, #7]
  400ae8:	4611      	mov	r1, r2
  400aea:	4618      	mov	r0, r3
  400aec:	4b03      	ldr	r3, [pc, #12]	; (400afc <gfx_mono_ssd1306_get_byte+0x28>)
  400aee:	4798      	blx	r3
  400af0:	4603      	mov	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400af2:	4618      	mov	r0, r3
  400af4:	3708      	adds	r7, #8
  400af6:	46bd      	mov	sp, r7
  400af8:	bd80      	pop	{r7, pc}
  400afa:	bf00      	nop
  400afc:	00400565 	.word	0x00400565

00400b00 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
  400b00:	b480      	push	{r7}
  400b02:	b083      	sub	sp, #12
  400b04:	af00      	add	r7, sp, #0
  400b06:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  400b08:	687b      	ldr	r3, [r7, #4]
  400b0a:	2b07      	cmp	r3, #7
  400b0c:	d825      	bhi.n	400b5a <osc_get_rate+0x5a>
  400b0e:	a201      	add	r2, pc, #4	; (adr r2, 400b14 <osc_get_rate+0x14>)
  400b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  400b14:	00400b35 	.word	0x00400b35
  400b18:	00400b3b 	.word	0x00400b3b
  400b1c:	00400b41 	.word	0x00400b41
  400b20:	00400b47 	.word	0x00400b47
  400b24:	00400b4b 	.word	0x00400b4b
  400b28:	00400b4f 	.word	0x00400b4f
  400b2c:	00400b53 	.word	0x00400b53
  400b30:	00400b57 	.word	0x00400b57
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
  400b34:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  400b38:	e010      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
  400b3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b3e:	e00d      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
  400b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  400b44:	e00a      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
  400b46:	4b08      	ldr	r3, [pc, #32]	; (400b68 <osc_get_rate+0x68>)
  400b48:	e008      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
  400b4a:	4b08      	ldr	r3, [pc, #32]	; (400b6c <osc_get_rate+0x6c>)
  400b4c:	e006      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
  400b4e:	4b08      	ldr	r3, [pc, #32]	; (400b70 <osc_get_rate+0x70>)
  400b50:	e004      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
  400b52:	4b07      	ldr	r3, [pc, #28]	; (400b70 <osc_get_rate+0x70>)
  400b54:	e002      	b.n	400b5c <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
  400b56:	4b06      	ldr	r3, [pc, #24]	; (400b70 <osc_get_rate+0x70>)
  400b58:	e000      	b.n	400b5c <osc_get_rate+0x5c>
	}

	return 0;
  400b5a:	2300      	movs	r3, #0
}
  400b5c:	4618      	mov	r0, r3
  400b5e:	370c      	adds	r7, #12
  400b60:	46bd      	mov	sp, r7
  400b62:	f85d 7b04 	ldr.w	r7, [sp], #4
  400b66:	4770      	bx	lr
  400b68:	003d0900 	.word	0x003d0900
  400b6c:	007a1200 	.word	0x007a1200
  400b70:	00b71b00 	.word	0x00b71b00

00400b74 <sysclk_get_main_hz>:
{
  400b74:	b580      	push	{r7, lr}
  400b76:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  400b78:	2006      	movs	r0, #6
  400b7a:	4b05      	ldr	r3, [pc, #20]	; (400b90 <sysclk_get_main_hz+0x1c>)
  400b7c:	4798      	blx	r3
  400b7e:	4602      	mov	r2, r0
  400b80:	4613      	mov	r3, r2
  400b82:	009b      	lsls	r3, r3, #2
  400b84:	4413      	add	r3, r2
  400b86:	009a      	lsls	r2, r3, #2
  400b88:	4413      	add	r3, r2
}
  400b8a:	4618      	mov	r0, r3
  400b8c:	bd80      	pop	{r7, pc}
  400b8e:	bf00      	nop
  400b90:	00400b01 	.word	0x00400b01

00400b94 <sysclk_get_cpu_hz>:
{
  400b94:	b580      	push	{r7, lr}
  400b96:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400b98:	4b02      	ldr	r3, [pc, #8]	; (400ba4 <sysclk_get_cpu_hz+0x10>)
  400b9a:	4798      	blx	r3
  400b9c:	4603      	mov	r3, r0
}
  400b9e:	4618      	mov	r0, r3
  400ba0:	bd80      	pop	{r7, pc}
  400ba2:	bf00      	nop
  400ba4:	00400b75 	.word	0x00400b75

00400ba8 <sysclk_get_peripheral_hz>:
{
  400ba8:	b580      	push	{r7, lr}
  400baa:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  400bac:	4b02      	ldr	r3, [pc, #8]	; (400bb8 <sysclk_get_peripheral_hz+0x10>)
  400bae:	4798      	blx	r3
  400bb0:	4603      	mov	r3, r0
  400bb2:	085b      	lsrs	r3, r3, #1
}
  400bb4:	4618      	mov	r0, r3
  400bb6:	bd80      	pop	{r7, pc}
  400bb8:	00400b75 	.word	0x00400b75

00400bbc <ioport_enable_pin>:
 * IOPORT_CREATE_PIN().
 *
 * \param pin  IOPORT pin to enable
 */
static inline void ioport_enable_pin(ioport_pin_t pin)
{
  400bbc:	b480      	push	{r7}
  400bbe:	b089      	sub	sp, #36	; 0x24
  400bc0:	af00      	add	r7, sp, #0
  400bc2:	6078      	str	r0, [r7, #4]
  400bc4:	687b      	ldr	r3, [r7, #4]
  400bc6:	61fb      	str	r3, [r7, #28]
  400bc8:	69fb      	ldr	r3, [r7, #28]
  400bca:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
  400bcc:	69bb      	ldr	r3, [r7, #24]
  400bce:	095a      	lsrs	r2, r3, #5
  400bd0:	69fb      	ldr	r3, [r7, #28]
  400bd2:	617b      	str	r3, [r7, #20]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
  400bd4:	697b      	ldr	r3, [r7, #20]
  400bd6:	f003 031f 	and.w	r3, r3, #31
  400bda:	2101      	movs	r1, #1
  400bdc:	fa01 f303 	lsl.w	r3, r1, r3
  400be0:	613a      	str	r2, [r7, #16]
  400be2:	60fb      	str	r3, [r7, #12]
  400be4:	693b      	ldr	r3, [r7, #16]
  400be6:	60bb      	str	r3, [r7, #8]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400be8:	68ba      	ldr	r2, [r7, #8]
  400bea:	4b06      	ldr	r3, [pc, #24]	; (400c04 <ioport_enable_pin+0x48>)
  400bec:	4413      	add	r3, r2
  400bee:	025b      	lsls	r3, r3, #9
  400bf0:	461a      	mov	r2, r3
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400bf2:	68fb      	ldr	r3, [r7, #12]
  400bf4:	6013      	str	r3, [r2, #0]
	arch_ioport_enable_pin(pin);
}
  400bf6:	bf00      	nop
  400bf8:	3724      	adds	r7, #36	; 0x24
  400bfa:	46bd      	mov	sp, r7
  400bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
  400c00:	4770      	bx	lr
  400c02:	bf00      	nop
  400c04:	00200707 	.word	0x00200707

00400c08 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
  400c08:	b480      	push	{r7}
  400c0a:	b08d      	sub	sp, #52	; 0x34
  400c0c:	af00      	add	r7, sp, #0
  400c0e:	6078      	str	r0, [r7, #4]
  400c10:	6039      	str	r1, [r7, #0]
  400c12:	687b      	ldr	r3, [r7, #4]
  400c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  400c16:	683b      	ldr	r3, [r7, #0]
  400c18:	62bb      	str	r3, [r7, #40]	; 0x28
  400c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c1c:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  400c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400c20:	095a      	lsrs	r2, r3, #5
  400c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400c24:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  400c26:	6a3b      	ldr	r3, [r7, #32]
  400c28:	f003 031f 	and.w	r3, r3, #31
  400c2c:	2101      	movs	r1, #1
  400c2e:	fa01 f303 	lsl.w	r3, r1, r3
  400c32:	61fa      	str	r2, [r7, #28]
  400c34:	61bb      	str	r3, [r7, #24]
  400c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
  400c38:	617b      	str	r3, [r7, #20]
  400c3a:	69fb      	ldr	r3, [r7, #28]
  400c3c:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400c3e:	693a      	ldr	r2, [r7, #16]
  400c40:	4b37      	ldr	r3, [pc, #220]	; (400d20 <ioport_set_pin_mode+0x118>)
  400c42:	4413      	add	r3, r2
  400c44:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
  400c46:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
  400c48:	697b      	ldr	r3, [r7, #20]
  400c4a:	f003 0308 	and.w	r3, r3, #8
  400c4e:	2b00      	cmp	r3, #0
  400c50:	d003      	beq.n	400c5a <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  400c52:	68fb      	ldr	r3, [r7, #12]
  400c54:	69ba      	ldr	r2, [r7, #24]
  400c56:	665a      	str	r2, [r3, #100]	; 0x64
  400c58:	e002      	b.n	400c60 <ioport_set_pin_mode+0x58>
	} else {
		base->PIO_PUDR = mask;
  400c5a:	68fb      	ldr	r3, [r7, #12]
  400c5c:	69ba      	ldr	r2, [r7, #24]
  400c5e:	661a      	str	r2, [r3, #96]	; 0x60
	}

#if defined(IOPORT_MODE_PULLDOWN)
	if (mode & IOPORT_MODE_PULLDOWN) {
  400c60:	697b      	ldr	r3, [r7, #20]
  400c62:	f003 0310 	and.w	r3, r3, #16
  400c66:	2b00      	cmp	r3, #0
  400c68:	d004      	beq.n	400c74 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  400c6a:	68fb      	ldr	r3, [r7, #12]
  400c6c:	69ba      	ldr	r2, [r7, #24]
  400c6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  400c72:	e003      	b.n	400c7c <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_PPDDR = mask;
  400c74:	68fb      	ldr	r3, [r7, #12]
  400c76:	69ba      	ldr	r2, [r7, #24]
  400c78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  400c7c:	697b      	ldr	r3, [r7, #20]
  400c7e:	f003 0320 	and.w	r3, r3, #32
  400c82:	2b00      	cmp	r3, #0
  400c84:	d003      	beq.n	400c8e <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  400c86:	68fb      	ldr	r3, [r7, #12]
  400c88:	69ba      	ldr	r2, [r7, #24]
  400c8a:	651a      	str	r2, [r3, #80]	; 0x50
  400c8c:	e002      	b.n	400c94 <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_MDDR = mask;
  400c8e:	68fb      	ldr	r3, [r7, #12]
  400c90:	69ba      	ldr	r2, [r7, #24]
  400c92:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  400c94:	697b      	ldr	r3, [r7, #20]
  400c96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  400c9a:	2b00      	cmp	r3, #0
  400c9c:	d003      	beq.n	400ca6 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  400c9e:	68fb      	ldr	r3, [r7, #12]
  400ca0:	69ba      	ldr	r2, [r7, #24]
  400ca2:	621a      	str	r2, [r3, #32]
  400ca4:	e002      	b.n	400cac <ioport_set_pin_mode+0xa4>
	} else {
		base->PIO_IFDR = mask;
  400ca6:	68fb      	ldr	r3, [r7, #12]
  400ca8:	69ba      	ldr	r2, [r7, #24]
  400caa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
  400cac:	697b      	ldr	r3, [r7, #20]
  400cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
  400cb2:	2b00      	cmp	r3, #0
  400cb4:	d004      	beq.n	400cc0 <ioport_set_pin_mode+0xb8>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
#else
		base->PIO_IFSCER = mask;
  400cb6:	68fb      	ldr	r3, [r7, #12]
  400cb8:	69ba      	ldr	r2, [r7, #24]
  400cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  400cbe:	e003      	b.n	400cc8 <ioport_set_pin_mode+0xc0>
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
#else
		base->PIO_IFSCDR = mask;
  400cc0:	68fb      	ldr	r3, [r7, #12]
  400cc2:	69ba      	ldr	r2, [r7, #24]
  400cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
	}
#else
	if (mode & IOPORT_MODE_MUX_BIT0) {
  400cc8:	697b      	ldr	r3, [r7, #20]
  400cca:	f003 0301 	and.w	r3, r3, #1
  400cce:	2b00      	cmp	r3, #0
  400cd0:	d006      	beq.n	400ce0 <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  400cd2:	68fb      	ldr	r3, [r7, #12]
  400cd4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400cd6:	69bb      	ldr	r3, [r7, #24]
  400cd8:	431a      	orrs	r2, r3
  400cda:	68fb      	ldr	r3, [r7, #12]
  400cdc:	671a      	str	r2, [r3, #112]	; 0x70
  400cde:	e006      	b.n	400cee <ioport_set_pin_mode+0xe6>
	} else {
		base->PIO_ABCDSR[0] &= ~mask;
  400ce0:	68fb      	ldr	r3, [r7, #12]
  400ce2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400ce4:	69bb      	ldr	r3, [r7, #24]
  400ce6:	43db      	mvns	r3, r3
  400ce8:	401a      	ands	r2, r3
  400cea:	68fb      	ldr	r3, [r7, #12]
  400cec:	671a      	str	r2, [r3, #112]	; 0x70
	}

	if (mode & IOPORT_MODE_MUX_BIT1) {
  400cee:	697b      	ldr	r3, [r7, #20]
  400cf0:	f003 0302 	and.w	r3, r3, #2
  400cf4:	2b00      	cmp	r3, #0
  400cf6:	d006      	beq.n	400d06 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  400cf8:	68fb      	ldr	r3, [r7, #12]
  400cfa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400cfc:	69bb      	ldr	r3, [r7, #24]
  400cfe:	431a      	orrs	r2, r3
  400d00:	68fb      	ldr	r3, [r7, #12]
  400d02:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_set_pin_mode(pin, mode);
}
  400d04:	e006      	b.n	400d14 <ioport_set_pin_mode+0x10c>
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
  400d06:	68fb      	ldr	r3, [r7, #12]
  400d08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400d0a:	69bb      	ldr	r3, [r7, #24]
  400d0c:	43db      	mvns	r3, r3
  400d0e:	401a      	ands	r2, r3
  400d10:	68fb      	ldr	r3, [r7, #12]
  400d12:	675a      	str	r2, [r3, #116]	; 0x74
  400d14:	bf00      	nop
  400d16:	3734      	adds	r7, #52	; 0x34
  400d18:	46bd      	mov	sp, r7
  400d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
  400d1e:	4770      	bx	lr
  400d20:	00200707 	.word	0x00200707

00400d24 <ioport_set_pin_dir>:
 * \param pin IOPORT pin to configure
 * \param dir Direction to set for the specified pin (\ref ioport_direction)
 */
static inline void ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
  400d24:	b480      	push	{r7}
  400d26:	b08d      	sub	sp, #52	; 0x34
  400d28:	af00      	add	r7, sp, #0
  400d2a:	6078      	str	r0, [r7, #4]
  400d2c:	460b      	mov	r3, r1
  400d2e:	70fb      	strb	r3, [r7, #3]
  400d30:	687b      	ldr	r3, [r7, #4]
  400d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  400d34:	78fb      	ldrb	r3, [r7, #3]
  400d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  400d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d3c:	627b      	str	r3, [r7, #36]	; 0x24
  400d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400d40:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  400d42:	6a3b      	ldr	r3, [r7, #32]
  400d44:	095b      	lsrs	r3, r3, #5
  400d46:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400d48:	69fa      	ldr	r2, [r7, #28]
  400d4a:	4b17      	ldr	r3, [pc, #92]	; (400da8 <ioport_set_pin_dir+0x84>)
  400d4c:	4413      	add	r3, r2
  400d4e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_dir(ioport_pin_t pin,
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400d50:	61bb      	str	r3, [r7, #24]

	if (dir == IOPORT_DIR_OUTPUT) {
  400d52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400d56:	2b01      	cmp	r3, #1
  400d58:	d109      	bne.n	400d6e <ioport_set_pin_dir+0x4a>
  400d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d5c:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  400d5e:	697b      	ldr	r3, [r7, #20]
  400d60:	f003 031f 	and.w	r3, r3, #31
  400d64:	2201      	movs	r2, #1
  400d66:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d68:	69bb      	ldr	r3, [r7, #24]
  400d6a:	611a      	str	r2, [r3, #16]
  400d6c:	e00c      	b.n	400d88 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  400d6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  400d72:	2b00      	cmp	r3, #0
  400d74:	d108      	bne.n	400d88 <ioport_set_pin_dir+0x64>
  400d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d78:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  400d7a:	693b      	ldr	r3, [r7, #16]
  400d7c:	f003 031f 	and.w	r3, r3, #31
  400d80:	2201      	movs	r2, #1
  400d82:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  400d84:	69bb      	ldr	r3, [r7, #24]
  400d86:	615a      	str	r2, [r3, #20]
  400d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  400d8a:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400d8c:	68fb      	ldr	r3, [r7, #12]
  400d8e:	f003 031f 	and.w	r3, r3, #31
  400d92:	2201      	movs	r2, #1
  400d94:	409a      	lsls	r2, r3
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d96:	69bb      	ldr	r3, [r7, #24]
  400d98:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_set_pin_dir(pin, dir);
}
  400d9c:	bf00      	nop
  400d9e:	3734      	adds	r7, #52	; 0x34
  400da0:	46bd      	mov	sp, r7
  400da2:	f85d 7b04 	ldr.w	r7, [sp], #4
  400da6:	4770      	bx	lr
  400da8:	00200707 	.word	0x00200707

00400dac <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
  400dac:	b480      	push	{r7}
  400dae:	b08b      	sub	sp, #44	; 0x2c
  400db0:	af00      	add	r7, sp, #0
  400db2:	6078      	str	r0, [r7, #4]
  400db4:	460b      	mov	r3, r1
  400db6:	70fb      	strb	r3, [r7, #3]
  400db8:	687b      	ldr	r3, [r7, #4]
  400dba:	627b      	str	r3, [r7, #36]	; 0x24
  400dbc:	78fb      	ldrb	r3, [r7, #3]
  400dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  400dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400dc4:	61fb      	str	r3, [r7, #28]
  400dc6:	69fb      	ldr	r3, [r7, #28]
  400dc8:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  400dca:	69bb      	ldr	r3, [r7, #24]
  400dcc:	095b      	lsrs	r3, r3, #5
  400dce:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  400dd0:	697a      	ldr	r2, [r7, #20]
  400dd2:	4b10      	ldr	r3, [pc, #64]	; (400e14 <ioport_set_pin_level+0x68>)
  400dd4:	4413      	add	r3, r2
  400dd6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
  400dd8:	613b      	str	r3, [r7, #16]

	if (level) {
  400dda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  400dde:	2b00      	cmp	r3, #0
  400de0:	d009      	beq.n	400df6 <ioport_set_pin_level+0x4a>
  400de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400de4:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  400de6:	68fb      	ldr	r3, [r7, #12]
  400de8:	f003 031f 	and.w	r3, r3, #31
  400dec:	2201      	movs	r2, #1
  400dee:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400df0:	693b      	ldr	r3, [r7, #16]
  400df2:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
  400df4:	e008      	b.n	400e08 <ioport_set_pin_level+0x5c>
  400df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  400df8:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  400dfa:	68bb      	ldr	r3, [r7, #8]
  400dfc:	f003 031f 	and.w	r3, r3, #31
  400e00:	2201      	movs	r2, #1
  400e02:	409a      	lsls	r2, r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400e04:	693b      	ldr	r3, [r7, #16]
  400e06:	635a      	str	r2, [r3, #52]	; 0x34
  400e08:	bf00      	nop
  400e0a:	372c      	adds	r7, #44	; 0x2c
  400e0c:	46bd      	mov	sp, r7
  400e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e12:	4770      	bx	lr
  400e14:	00200707 	.word	0x00200707

00400e18 <spi_reset>:
{
  400e18:	b480      	push	{r7}
  400e1a:	b083      	sub	sp, #12
  400e1c:	af00      	add	r7, sp, #0
  400e1e:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400e20:	687b      	ldr	r3, [r7, #4]
  400e22:	2280      	movs	r2, #128	; 0x80
  400e24:	601a      	str	r2, [r3, #0]
}
  400e26:	bf00      	nop
  400e28:	370c      	adds	r7, #12
  400e2a:	46bd      	mov	sp, r7
  400e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e30:	4770      	bx	lr

00400e32 <spi_enable>:
{
  400e32:	b480      	push	{r7}
  400e34:	b083      	sub	sp, #12
  400e36:	af00      	add	r7, sp, #0
  400e38:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e3a:	687b      	ldr	r3, [r7, #4]
  400e3c:	2201      	movs	r2, #1
  400e3e:	601a      	str	r2, [r3, #0]
}
  400e40:	bf00      	nop
  400e42:	370c      	adds	r7, #12
  400e44:	46bd      	mov	sp, r7
  400e46:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e4a:	4770      	bx	lr

00400e4c <spi_disable>:
{
  400e4c:	b480      	push	{r7}
  400e4e:	b083      	sub	sp, #12
  400e50:	af00      	add	r7, sp, #0
  400e52:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400e54:	687b      	ldr	r3, [r7, #4]
  400e56:	2202      	movs	r2, #2
  400e58:	601a      	str	r2, [r3, #0]
}
  400e5a:	bf00      	nop
  400e5c:	370c      	adds	r7, #12
  400e5e:	46bd      	mov	sp, r7
  400e60:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e64:	4770      	bx	lr

00400e66 <spi_set_master_mode>:
{
  400e66:	b480      	push	{r7}
  400e68:	b083      	sub	sp, #12
  400e6a:	af00      	add	r7, sp, #0
  400e6c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400e6e:	687b      	ldr	r3, [r7, #4]
  400e70:	685b      	ldr	r3, [r3, #4]
  400e72:	f043 0201 	orr.w	r2, r3, #1
  400e76:	687b      	ldr	r3, [r7, #4]
  400e78:	605a      	str	r2, [r3, #4]
}
  400e7a:	bf00      	nop
  400e7c:	370c      	adds	r7, #12
  400e7e:	46bd      	mov	sp, r7
  400e80:	f85d 7b04 	ldr.w	r7, [sp], #4
  400e84:	4770      	bx	lr

00400e86 <spi_set_fixed_peripheral_select>:
{
  400e86:	b480      	push	{r7}
  400e88:	b083      	sub	sp, #12
  400e8a:	af00      	add	r7, sp, #0
  400e8c:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400e8e:	687b      	ldr	r3, [r7, #4]
  400e90:	685b      	ldr	r3, [r3, #4]
  400e92:	f023 0202 	bic.w	r2, r3, #2
  400e96:	687b      	ldr	r3, [r7, #4]
  400e98:	605a      	str	r2, [r3, #4]
}
  400e9a:	bf00      	nop
  400e9c:	370c      	adds	r7, #12
  400e9e:	46bd      	mov	sp, r7
  400ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ea4:	4770      	bx	lr

00400ea6 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
  400ea6:	b480      	push	{r7}
  400ea8:	b083      	sub	sp, #12
  400eaa:	af00      	add	r7, sp, #0
  400eac:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400eae:	687b      	ldr	r3, [r7, #4]
  400eb0:	685b      	ldr	r3, [r3, #4]
  400eb2:	f043 0210 	orr.w	r2, r3, #16
  400eb6:	687b      	ldr	r3, [r7, #4]
  400eb8:	605a      	str	r2, [r3, #4]
}
  400eba:	bf00      	nop
  400ebc:	370c      	adds	r7, #12
  400ebe:	46bd      	mov	sp, r7
  400ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ec4:	4770      	bx	lr

00400ec6 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
  400ec6:	b480      	push	{r7}
  400ec8:	b083      	sub	sp, #12
  400eca:	af00      	add	r7, sp, #0
  400ecc:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400ece:	687b      	ldr	r3, [r7, #4]
  400ed0:	685b      	ldr	r3, [r3, #4]
  400ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
  400ed6:	687b      	ldr	r3, [r7, #4]
  400ed8:	605a      	str	r2, [r3, #4]
}
  400eda:	bf00      	nop
  400edc:	370c      	adds	r7, #12
  400ede:	46bd      	mov	sp, r7
  400ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
  400ee4:	4770      	bx	lr
	...

00400ee8 <ssd1306_hard_reset>:
{
  400ee8:	b580      	push	{r7, lr}
  400eea:	b082      	sub	sp, #8
  400eec:	af00      	add	r7, sp, #0
	uint32_t delay_10us = 10 * (sysclk_get_cpu_hz()/1000000);
  400eee:	4b0f      	ldr	r3, [pc, #60]	; (400f2c <ssd1306_hard_reset+0x44>)
  400ef0:	4798      	blx	r3
  400ef2:	4602      	mov	r2, r0
  400ef4:	4b0e      	ldr	r3, [pc, #56]	; (400f30 <ssd1306_hard_reset+0x48>)
  400ef6:	fba3 2302 	umull	r2, r3, r3, r2
  400efa:	0c9a      	lsrs	r2, r3, #18
  400efc:	4613      	mov	r3, r2
  400efe:	009b      	lsls	r3, r3, #2
  400f00:	4413      	add	r3, r2
  400f02:	005b      	lsls	r3, r3, #1
  400f04:	607b      	str	r3, [r7, #4]
	ioport_set_pin_level(SSD1306_RES_PIN, false);
  400f06:	2100      	movs	r1, #0
  400f08:	2051      	movs	r0, #81	; 0x51
  400f0a:	4b0a      	ldr	r3, [pc, #40]	; (400f34 <ssd1306_hard_reset+0x4c>)
  400f0c:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  400f0e:	6878      	ldr	r0, [r7, #4]
  400f10:	4b09      	ldr	r3, [pc, #36]	; (400f38 <ssd1306_hard_reset+0x50>)
  400f12:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  400f14:	2101      	movs	r1, #1
  400f16:	2051      	movs	r0, #81	; 0x51
  400f18:	4b06      	ldr	r3, [pc, #24]	; (400f34 <ssd1306_hard_reset+0x4c>)
  400f1a:	4798      	blx	r3
	delay_cycles(delay_10us); // At lest 10us
  400f1c:	6878      	ldr	r0, [r7, #4]
  400f1e:	4b06      	ldr	r3, [pc, #24]	; (400f38 <ssd1306_hard_reset+0x50>)
  400f20:	4798      	blx	r3
}
  400f22:	bf00      	nop
  400f24:	3708      	adds	r7, #8
  400f26:	46bd      	mov	sp, r7
  400f28:	bd80      	pop	{r7, pc}
  400f2a:	bf00      	nop
  400f2c:	00400b95 	.word	0x00400b95
  400f30:	431bde83 	.word	0x431bde83
  400f34:	00400dad 	.word	0x00400dad
  400f38:	20400001 	.word	0x20400001

00400f3c <ssd1306_display_on>:
 * \brief Turn the OLED display on
 *
 * This function will turn on the OLED.
 */
static inline void ssd1306_display_on(void)
{
  400f3c:	b580      	push	{r7, lr}
  400f3e:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400f40:	20af      	movs	r0, #175	; 0xaf
  400f42:	4b02      	ldr	r3, [pc, #8]	; (400f4c <ssd1306_display_on+0x10>)
  400f44:	4798      	blx	r3
}
  400f46:	bf00      	nop
  400f48:	bd80      	pop	{r7, pc}
  400f4a:	bf00      	nop
  400f4c:	004011bd 	.word	0x004011bd

00400f50 <ssd1306_set_contrast>:
 * \param contrast a number between 0 and 0xFF
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
  400f50:	b580      	push	{r7, lr}
  400f52:	b082      	sub	sp, #8
  400f54:	af00      	add	r7, sp, #0
  400f56:	4603      	mov	r3, r0
  400f58:	71fb      	strb	r3, [r7, #7]
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400f5a:	2081      	movs	r0, #129	; 0x81
  400f5c:	4b05      	ldr	r3, [pc, #20]	; (400f74 <ssd1306_set_contrast+0x24>)
  400f5e:	4798      	blx	r3
	ssd1306_write_command(contrast);
  400f60:	79fb      	ldrb	r3, [r7, #7]
  400f62:	4618      	mov	r0, r3
  400f64:	4b03      	ldr	r3, [pc, #12]	; (400f74 <ssd1306_set_contrast+0x24>)
  400f66:	4798      	blx	r3
	return contrast;
  400f68:	79fb      	ldrb	r3, [r7, #7]
}
  400f6a:	4618      	mov	r0, r3
  400f6c:	3708      	adds	r7, #8
  400f6e:	46bd      	mov	sp, r7
  400f70:	bd80      	pop	{r7, pc}
  400f72:	bf00      	nop
  400f74:	004011bd 	.word	0x004011bd

00400f78 <ssd1306_display_invert_disable>:
 *
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
  400f78:	b580      	push	{r7, lr}
  400f7a:	af00      	add	r7, sp, #0
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400f7c:	20a6      	movs	r0, #166	; 0xa6
  400f7e:	4b02      	ldr	r3, [pc, #8]	; (400f88 <ssd1306_display_invert_disable+0x10>)
  400f80:	4798      	blx	r3
}
  400f82:	bf00      	nop
  400f84:	bd80      	pop	{r7, pc}
  400f86:	bf00      	nop
  400f88:	004011bd 	.word	0x004011bd

00400f8c <ssd1306_interface_init>:
#define SPI_MOSI_MASK 21
#define SPI_CLK_MASK 22


static void ssd1306_interface_init(void)
{
  400f8c:	b590      	push	{r4, r7, lr}
  400f8e:	b083      	sub	sp, #12
  400f90:	af00      	add	r7, sp, #0
	
	ioport_set_pin_dir(SSD1306_RES_PIN, IOPORT_DIR_OUTPUT);
  400f92:	2101      	movs	r1, #1
  400f94:	2051      	movs	r0, #81	; 0x51
  400f96:	4b46      	ldr	r3, [pc, #280]	; (4010b0 <ssd1306_interface_init+0x124>)
  400f98:	4798      	blx	r3
	ioport_set_pin_dir(SSD1306_DC_PIN, IOPORT_DIR_OUTPUT);
  400f9a:	2101      	movs	r1, #1
  400f9c:	2023      	movs	r0, #35	; 0x23
  400f9e:	4b44      	ldr	r3, [pc, #272]	; (4010b0 <ssd1306_interface_init+0x124>)
  400fa0:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_RES_PIN, IOPORT_MODE_PULLUP);
  400fa2:	2108      	movs	r1, #8
  400fa4:	2051      	movs	r0, #81	; 0x51
  400fa6:	4b43      	ldr	r3, [pc, #268]	; (4010b4 <ssd1306_interface_init+0x128>)
  400fa8:	4798      	blx	r3
	ioport_set_pin_mode(SSD1306_DC_PIN, IOPORT_MODE_PULLUP);
  400faa:	2108      	movs	r1, #8
  400fac:	2023      	movs	r0, #35	; 0x23
  400fae:	4b41      	ldr	r3, [pc, #260]	; (4010b4 <ssd1306_interface_init+0x128>)
  400fb0:	4798      	blx	r3
	ioport_enable_pin(SSD1306_DC_PIN);
  400fb2:	2023      	movs	r0, #35	; 0x23
  400fb4:	4b40      	ldr	r3, [pc, #256]	; (4010b8 <ssd1306_interface_init+0x12c>)
  400fb6:	4798      	blx	r3
	ioport_enable_pin(SSD1306_RES_PIN);
  400fb8:	2051      	movs	r0, #81	; 0x51
  400fba:	4b3f      	ldr	r3, [pc, #252]	; (4010b8 <ssd1306_interface_init+0x12c>)
  400fbc:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  400fbe:	2101      	movs	r1, #1
  400fc0:	2023      	movs	r0, #35	; 0x23
  400fc2:	4b3e      	ldr	r3, [pc, #248]	; (4010bc <ssd1306_interface_init+0x130>)
  400fc4:	4798      	blx	r3
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  400fc6:	2101      	movs	r1, #1
  400fc8:	2051      	movs	r0, #81	; 0x51
  400fca:	4b3c      	ldr	r3, [pc, #240]	; (4010bc <ssd1306_interface_init+0x130>)
  400fcc:	4798      	blx	r3
	
	
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400fce:	2300      	movs	r3, #0
  400fd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400fd4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fd8:	4839      	ldr	r0, [pc, #228]	; (4010c0 <ssd1306_interface_init+0x134>)
  400fda:	4c3a      	ldr	r4, [pc, #232]	; (4010c4 <ssd1306_interface_init+0x138>)
  400fdc:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400fde:	2300      	movs	r3, #0
  400fe0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400fe4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400fe8:	4835      	ldr	r0, [pc, #212]	; (4010c0 <ssd1306_interface_init+0x134>)
  400fea:	4c36      	ldr	r4, [pc, #216]	; (4010c4 <ssd1306_interface_init+0x138>)
  400fec:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400fee:	2300      	movs	r3, #0
  400ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400ff4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400ff8:	4831      	ldr	r0, [pc, #196]	; (4010c0 <ssd1306_interface_init+0x134>)
  400ffa:	4c32      	ldr	r4, [pc, #200]	; (4010c4 <ssd1306_interface_init+0x138>)
  400ffc:	47a0      	blx	r4
	
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400ffe:	2300      	movs	r3, #0
  401000:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  401004:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401008:	482d      	ldr	r0, [pc, #180]	; (4010c0 <ssd1306_interface_init+0x134>)
  40100a:	4c2e      	ldr	r4, [pc, #184]	; (4010c4 <ssd1306_interface_init+0x138>)
  40100c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  40100e:	2300      	movs	r3, #0
  401010:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  401014:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401018:	4829      	ldr	r0, [pc, #164]	; (4010c0 <ssd1306_interface_init+0x134>)
  40101a:	4c2a      	ldr	r4, [pc, #168]	; (4010c4 <ssd1306_interface_init+0x138>)
  40101c:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  40101e:	2300      	movs	r3, #0
  401020:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  401024:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401028:	4825      	ldr	r0, [pc, #148]	; (4010c0 <ssd1306_interface_init+0x134>)
  40102a:	4c26      	ldr	r4, [pc, #152]	; (4010c4 <ssd1306_interface_init+0x138>)
  40102c:	47a0      	blx	r4
		
		spi_disable(SPI0);
  40102e:	4826      	ldr	r0, [pc, #152]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401030:	4b26      	ldr	r3, [pc, #152]	; (4010cc <ssd1306_interface_init+0x140>)
  401032:	4798      	blx	r3
		spi_reset(SPI0);
  401034:	4824      	ldr	r0, [pc, #144]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401036:	4b26      	ldr	r3, [pc, #152]	; (4010d0 <ssd1306_interface_init+0x144>)
  401038:	4798      	blx	r3
		spi_set_master_mode(SPI0);
  40103a:	4823      	ldr	r0, [pc, #140]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40103c:	4b25      	ldr	r3, [pc, #148]	; (4010d4 <ssd1306_interface_init+0x148>)
  40103e:	4798      	blx	r3
		//spi_set_transfer_delay(SPI0, 1, 40, 30);
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  401040:	2208      	movs	r2, #8
  401042:	2101      	movs	r1, #1
  401044:	4820      	ldr	r0, [pc, #128]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401046:	4b24      	ldr	r3, [pc, #144]	; (4010d8 <ssd1306_interface_init+0x14c>)
  401048:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  40104a:	2200      	movs	r2, #0
  40104c:	2101      	movs	r1, #1
  40104e:	481e      	ldr	r0, [pc, #120]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401050:	4b22      	ldr	r3, [pc, #136]	; (4010dc <ssd1306_interface_init+0x150>)
  401052:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  401054:	2200      	movs	r2, #0
  401056:	2101      	movs	r1, #1
  401058:	481b      	ldr	r0, [pc, #108]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40105a:	4b21      	ldr	r3, [pc, #132]	; (4010e0 <ssd1306_interface_init+0x154>)
  40105c:	4798      	blx	r3
		spi_set_fixed_peripheral_select(SPI0);
  40105e:	481a      	ldr	r0, [pc, #104]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401060:	4b20      	ldr	r3, [pc, #128]	; (4010e4 <ssd1306_interface_init+0x158>)
  401062:	4798      	blx	r3
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  401064:	2200      	movs	r2, #0
  401066:	2101      	movs	r1, #1
  401068:	4817      	ldr	r0, [pc, #92]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40106a:	4b1f      	ldr	r3, [pc, #124]	; (4010e8 <ssd1306_interface_init+0x15c>)
  40106c:	4798      	blx	r3
		spi_disable_loopback(SPI0);
  40106e:	4816      	ldr	r0, [pc, #88]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401070:	4b1e      	ldr	r3, [pc, #120]	; (4010ec <ssd1306_interface_init+0x160>)
  401072:	4798      	blx	r3

		spi_disable_mode_fault_detect(SPI0);
  401074:	4814      	ldr	r0, [pc, #80]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401076:	4b1e      	ldr	r3, [pc, #120]	; (4010f0 <ssd1306_interface_init+0x164>)
  401078:	4798      	blx	r3
		int div = spi_calc_baudrate_div(1000000, sysclk_get_peripheral_hz());
  40107a:	4b1e      	ldr	r3, [pc, #120]	; (4010f4 <ssd1306_interface_init+0x168>)
  40107c:	4798      	blx	r3
  40107e:	4603      	mov	r3, r0
  401080:	4619      	mov	r1, r3
  401082:	481d      	ldr	r0, [pc, #116]	; (4010f8 <ssd1306_interface_init+0x16c>)
  401084:	4b1d      	ldr	r3, [pc, #116]	; (4010fc <ssd1306_interface_init+0x170>)
  401086:	4798      	blx	r3
  401088:	4603      	mov	r3, r0
  40108a:	607b      	str	r3, [r7, #4]
		spi_set_baudrate_div(SPI0,1, div);
  40108c:	687b      	ldr	r3, [r7, #4]
  40108e:	b2db      	uxtb	r3, r3
  401090:	461a      	mov	r2, r3
  401092:	2101      	movs	r1, #1
  401094:	480c      	ldr	r0, [pc, #48]	; (4010c8 <ssd1306_interface_init+0x13c>)
  401096:	4b1a      	ldr	r3, [pc, #104]	; (401100 <ssd1306_interface_init+0x174>)
  401098:	4798      	blx	r3
		spi_enable_clock(SPI0);
  40109a:	480b      	ldr	r0, [pc, #44]	; (4010c8 <ssd1306_interface_init+0x13c>)
  40109c:	4b19      	ldr	r3, [pc, #100]	; (401104 <ssd1306_interface_init+0x178>)
  40109e:	4798      	blx	r3
		
		spi_enable(SPI0);
  4010a0:	4809      	ldr	r0, [pc, #36]	; (4010c8 <ssd1306_interface_init+0x13c>)
  4010a2:	4b19      	ldr	r3, [pc, #100]	; (401108 <ssd1306_interface_init+0x17c>)
  4010a4:	4798      	blx	r3
}
  4010a6:	bf00      	nop
  4010a8:	370c      	adds	r7, #12
  4010aa:	46bd      	mov	sp, r7
  4010ac:	bd90      	pop	{r4, r7, pc}
  4010ae:	bf00      	nop
  4010b0:	00400d25 	.word	0x00400d25
  4010b4:	00400c09 	.word	0x00400c09
  4010b8:	00400bbd 	.word	0x00400bbd
  4010bc:	00400dad 	.word	0x00400dad
  4010c0:	400e1400 	.word	0x400e1400
  4010c4:	00401da5 	.word	0x00401da5
  4010c8:	40008000 	.word	0x40008000
  4010cc:	00400e4d 	.word	0x00400e4d
  4010d0:	00400e19 	.word	0x00400e19
  4010d4:	00400e67 	.word	0x00400e67
  4010d8:	00400381 	.word	0x00400381
  4010dc:	004002e1 	.word	0x004002e1
  4010e0:	00400331 	.word	0x00400331
  4010e4:	00400e87 	.word	0x00400e87
  4010e8:	00400427 	.word	0x00400427
  4010ec:	00400ec7 	.word	0x00400ec7
  4010f0:	00400ea7 	.word	0x00400ea7
  4010f4:	00400ba9 	.word	0x00400ba9
  4010f8:	000f4240 	.word	0x000f4240
  4010fc:	00400471 	.word	0x00400471
  401100:	004004ad 	.word	0x004004ad
  401104:	004001f1 	.word	0x004001f1
  401108:	00400e33 	.word	0x00400e33

0040110c <ssd1306_init>:
 a
 a
 a
 */
void ssd1306_init(void)
{
  40110c:	b580      	push	{r7, lr}
  40110e:	af00      	add	r7, sp, #0
	// Initialize delay routine
	delay_init();

	// Initialize the interface
	ssd1306_interface_init();
  401110:	4b23      	ldr	r3, [pc, #140]	; (4011a0 <ssd1306_init+0x94>)
  401112:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
  401114:	4b23      	ldr	r3, [pc, #140]	; (4011a4 <ssd1306_init+0x98>)
  401116:	4798      	blx	r3

	// Set the reset pin to the default state
	ioport_set_pin_level(SSD1306_RES_PIN, true);
  401118:	2101      	movs	r1, #1
  40111a:	2051      	movs	r0, #81	; 0x51
  40111c:	4b22      	ldr	r3, [pc, #136]	; (4011a8 <ssd1306_init+0x9c>)
  40111e:	4798      	blx	r3
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  401120:	20a8      	movs	r0, #168	; 0xa8
  401122:	4b22      	ldr	r3, [pc, #136]	; (4011ac <ssd1306_init+0xa0>)
  401124:	4798      	blx	r3
	ssd1306_write_command(0x1F);
  401126:	201f      	movs	r0, #31
  401128:	4b20      	ldr	r3, [pc, #128]	; (4011ac <ssd1306_init+0xa0>)
  40112a:	4798      	blx	r3

	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  40112c:	20d3      	movs	r0, #211	; 0xd3
  40112e:	4b1f      	ldr	r3, [pc, #124]	; (4011ac <ssd1306_init+0xa0>)
  401130:	4798      	blx	r3
	ssd1306_write_command(0x00);
  401132:	2000      	movs	r0, #0
  401134:	4b1d      	ldr	r3, [pc, #116]	; (4011ac <ssd1306_init+0xa0>)
  401136:	4798      	blx	r3

	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  401138:	2040      	movs	r0, #64	; 0x40
  40113a:	4b1c      	ldr	r3, [pc, #112]	; (4011ac <ssd1306_init+0xa0>)
  40113c:	4798      	blx	r3

	// Set Column Address 0 Mapped to SEG0
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  40113e:	20a1      	movs	r0, #161	; 0xa1
  401140:	4b1a      	ldr	r3, [pc, #104]	; (4011ac <ssd1306_init+0xa0>)
  401142:	4798      	blx	r3

	// Set COM/Row Scan Scan from COM63 to 0
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  401144:	20c8      	movs	r0, #200	; 0xc8
  401146:	4b19      	ldr	r3, [pc, #100]	; (4011ac <ssd1306_init+0xa0>)
  401148:	4798      	blx	r3

	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  40114a:	20da      	movs	r0, #218	; 0xda
  40114c:	4b17      	ldr	r3, [pc, #92]	; (4011ac <ssd1306_init+0xa0>)
  40114e:	4798      	blx	r3
	ssd1306_write_command(0x02);
  401150:	2002      	movs	r0, #2
  401152:	4b16      	ldr	r3, [pc, #88]	; (4011ac <ssd1306_init+0xa0>)
  401154:	4798      	blx	r3

	ssd1306_set_contrast(0x8F);
  401156:	208f      	movs	r0, #143	; 0x8f
  401158:	4b15      	ldr	r3, [pc, #84]	; (4011b0 <ssd1306_init+0xa4>)
  40115a:	4798      	blx	r3

	// Disable Entire display On
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  40115c:	20a4      	movs	r0, #164	; 0xa4
  40115e:	4b13      	ldr	r3, [pc, #76]	; (4011ac <ssd1306_init+0xa0>)
  401160:	4798      	blx	r3

	ssd1306_display_invert_disable();
  401162:	4b14      	ldr	r3, [pc, #80]	; (4011b4 <ssd1306_init+0xa8>)
  401164:	4798      	blx	r3

	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  401166:	20d5      	movs	r0, #213	; 0xd5
  401168:	4b10      	ldr	r3, [pc, #64]	; (4011ac <ssd1306_init+0xa0>)
  40116a:	4798      	blx	r3
	ssd1306_write_command(0x80);
  40116c:	2080      	movs	r0, #128	; 0x80
  40116e:	4b0f      	ldr	r3, [pc, #60]	; (4011ac <ssd1306_init+0xa0>)
  401170:	4798      	blx	r3

	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  401172:	208d      	movs	r0, #141	; 0x8d
  401174:	4b0d      	ldr	r3, [pc, #52]	; (4011ac <ssd1306_init+0xa0>)
  401176:	4798      	blx	r3
	ssd1306_write_command(0x14);
  401178:	2014      	movs	r0, #20
  40117a:	4b0c      	ldr	r3, [pc, #48]	; (4011ac <ssd1306_init+0xa0>)
  40117c:	4798      	blx	r3

	// Set VCOMH Deselect Level
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  40117e:	20db      	movs	r0, #219	; 0xdb
  401180:	4b0a      	ldr	r3, [pc, #40]	; (4011ac <ssd1306_init+0xa0>)
  401182:	4798      	blx	r3
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  401184:	2040      	movs	r0, #64	; 0x40
  401186:	4b09      	ldr	r3, [pc, #36]	; (4011ac <ssd1306_init+0xa0>)
  401188:	4798      	blx	r3

	// Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  40118a:	20d9      	movs	r0, #217	; 0xd9
  40118c:	4b07      	ldr	r3, [pc, #28]	; (4011ac <ssd1306_init+0xa0>)
  40118e:	4798      	blx	r3
	ssd1306_write_command(0xF1);
  401190:	20f1      	movs	r0, #241	; 0xf1
  401192:	4b06      	ldr	r3, [pc, #24]	; (4011ac <ssd1306_init+0xa0>)
  401194:	4798      	blx	r3

	
	ssd1306_display_on();
  401196:	4b08      	ldr	r3, [pc, #32]	; (4011b8 <ssd1306_init+0xac>)
  401198:	4798      	blx	r3
}
  40119a:	bf00      	nop
  40119c:	bd80      	pop	{r7, pc}
  40119e:	bf00      	nop
  4011a0:	00400f8d 	.word	0x00400f8d
  4011a4:	00400ee9 	.word	0x00400ee9
  4011a8:	00400dad 	.word	0x00400dad
  4011ac:	004011bd 	.word	0x004011bd
  4011b0:	00400f51 	.word	0x00400f51
  4011b4:	00400f79 	.word	0x00400f79
  4011b8:	00400f3d 	.word	0x00400f3d

004011bc <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  4011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4011be:	b083      	sub	sp, #12
  4011c0:	af00      	add	r7, sp, #0
  4011c2:	4603      	mov	r3, r0
  4011c4:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, false);
  4011c6:	2100      	movs	r1, #0
  4011c8:	2023      	movs	r0, #35	; 0x23
  4011ca:	4b1c      	ldr	r3, [pc, #112]	; (40123c <ssd1306_write_command+0x80>)
  4011cc:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  4011ce:	2101      	movs	r1, #1
  4011d0:	481b      	ldr	r0, [pc, #108]	; (401240 <ssd1306_write_command+0x84>)
  4011d2:	4b1c      	ldr	r3, [pc, #112]	; (401244 <ssd1306_write_command+0x88>)
  4011d4:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  4011d6:	79fb      	ldrb	r3, [r7, #7]
  4011d8:	b299      	uxth	r1, r3
  4011da:	2301      	movs	r3, #1
  4011dc:	2201      	movs	r2, #1
  4011de:	4818      	ldr	r0, [pc, #96]	; (401240 <ssd1306_write_command+0x84>)
  4011e0:	4c19      	ldr	r4, [pc, #100]	; (401248 <ssd1306_write_command+0x8c>)
  4011e2:	47a0      	blx	r4
	delay_us(10);
  4011e4:	4b19      	ldr	r3, [pc, #100]	; (40124c <ssd1306_write_command+0x90>)
  4011e6:	4798      	blx	r3
  4011e8:	4603      	mov	r3, r0
  4011ea:	4619      	mov	r1, r3
  4011ec:	f04f 0200 	mov.w	r2, #0
  4011f0:	460b      	mov	r3, r1
  4011f2:	4614      	mov	r4, r2
  4011f4:	00a6      	lsls	r6, r4, #2
  4011f6:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  4011fa:	009d      	lsls	r5, r3, #2
  4011fc:	462b      	mov	r3, r5
  4011fe:	4634      	mov	r4, r6
  401200:	185b      	adds	r3, r3, r1
  401202:	eb44 0402 	adc.w	r4, r4, r2
  401206:	18db      	adds	r3, r3, r3
  401208:	eb44 0404 	adc.w	r4, r4, r4
  40120c:	4619      	mov	r1, r3
  40120e:	4622      	mov	r2, r4
  401210:	4b0f      	ldr	r3, [pc, #60]	; (401250 <ssd1306_write_command+0x94>)
  401212:	f04f 0400 	mov.w	r4, #0
  401216:	18cd      	adds	r5, r1, r3
  401218:	eb42 0604 	adc.w	r6, r2, r4
  40121c:	4628      	mov	r0, r5
  40121e:	4631      	mov	r1, r6
  401220:	4c0c      	ldr	r4, [pc, #48]	; (401254 <ssd1306_write_command+0x98>)
  401222:	4a0d      	ldr	r2, [pc, #52]	; (401258 <ssd1306_write_command+0x9c>)
  401224:	f04f 0300 	mov.w	r3, #0
  401228:	47a0      	blx	r4
  40122a:	4603      	mov	r3, r0
  40122c:	460c      	mov	r4, r1
  40122e:	4618      	mov	r0, r3
  401230:	4b0a      	ldr	r3, [pc, #40]	; (40125c <ssd1306_write_command+0xa0>)
  401232:	4798      	blx	r3
}
  401234:	bf00      	nop
  401236:	370c      	adds	r7, #12
  401238:	46bd      	mov	sp, r7
  40123a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40123c:	00400dad 	.word	0x00400dad
  401240:	40008000 	.word	0x40008000
  401244:	0040022d 	.word	0x0040022d
  401248:	00400261 	.word	0x00400261
  40124c:	00400b95 	.word	0x00400b95
  401250:	005a83df 	.word	0x005a83df
  401254:	00403201 	.word	0x00403201
  401258:	005a83e0 	.word	0x005a83e0
  40125c:	20400001 	.word	0x20400001

00401260 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  401260:	b5f0      	push	{r4, r5, r6, r7, lr}
  401262:	b083      	sub	sp, #12
  401264:	af00      	add	r7, sp, #0
  401266:	4603      	mov	r3, r0
  401268:	71fb      	strb	r3, [r7, #7]
	ioport_set_pin_level(SSD1306_DC_PIN, true);
  40126a:	2101      	movs	r1, #1
  40126c:	2023      	movs	r0, #35	; 0x23
  40126e:	4b1c      	ldr	r3, [pc, #112]	; (4012e0 <ssd1306_write_data+0x80>)
  401270:	4798      	blx	r3
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  401272:	2101      	movs	r1, #1
  401274:	481b      	ldr	r0, [pc, #108]	; (4012e4 <ssd1306_write_data+0x84>)
  401276:	4b1c      	ldr	r3, [pc, #112]	; (4012e8 <ssd1306_write_data+0x88>)
  401278:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  40127a:	79fb      	ldrb	r3, [r7, #7]
  40127c:	b299      	uxth	r1, r3
  40127e:	2301      	movs	r3, #1
  401280:	2201      	movs	r2, #1
  401282:	4818      	ldr	r0, [pc, #96]	; (4012e4 <ssd1306_write_data+0x84>)
  401284:	4c19      	ldr	r4, [pc, #100]	; (4012ec <ssd1306_write_data+0x8c>)
  401286:	47a0      	blx	r4
	delay_us(10);
  401288:	4b19      	ldr	r3, [pc, #100]	; (4012f0 <ssd1306_write_data+0x90>)
  40128a:	4798      	blx	r3
  40128c:	4603      	mov	r3, r0
  40128e:	4619      	mov	r1, r3
  401290:	f04f 0200 	mov.w	r2, #0
  401294:	460b      	mov	r3, r1
  401296:	4614      	mov	r4, r2
  401298:	00a6      	lsls	r6, r4, #2
  40129a:	ea46 7693 	orr.w	r6, r6, r3, lsr #30
  40129e:	009d      	lsls	r5, r3, #2
  4012a0:	462b      	mov	r3, r5
  4012a2:	4634      	mov	r4, r6
  4012a4:	185b      	adds	r3, r3, r1
  4012a6:	eb44 0402 	adc.w	r4, r4, r2
  4012aa:	18db      	adds	r3, r3, r3
  4012ac:	eb44 0404 	adc.w	r4, r4, r4
  4012b0:	4619      	mov	r1, r3
  4012b2:	4622      	mov	r2, r4
  4012b4:	4b0f      	ldr	r3, [pc, #60]	; (4012f4 <ssd1306_write_data+0x94>)
  4012b6:	f04f 0400 	mov.w	r4, #0
  4012ba:	18cd      	adds	r5, r1, r3
  4012bc:	eb42 0604 	adc.w	r6, r2, r4
  4012c0:	4628      	mov	r0, r5
  4012c2:	4631      	mov	r1, r6
  4012c4:	4c0c      	ldr	r4, [pc, #48]	; (4012f8 <ssd1306_write_data+0x98>)
  4012c6:	4a0d      	ldr	r2, [pc, #52]	; (4012fc <ssd1306_write_data+0x9c>)
  4012c8:	f04f 0300 	mov.w	r3, #0
  4012cc:	47a0      	blx	r4
  4012ce:	4603      	mov	r3, r0
  4012d0:	460c      	mov	r4, r1
  4012d2:	4618      	mov	r0, r3
  4012d4:	4b0a      	ldr	r3, [pc, #40]	; (401300 <ssd1306_write_data+0xa0>)
  4012d6:	4798      	blx	r3
}
  4012d8:	bf00      	nop
  4012da:	370c      	adds	r7, #12
  4012dc:	46bd      	mov	sp, r7
  4012de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4012e0:	00400dad 	.word	0x00400dad
  4012e4:	40008000 	.word	0x40008000
  4012e8:	0040022d 	.word	0x0040022d
  4012ec:	00400261 	.word	0x00400261
  4012f0:	00400b95 	.word	0x00400b95
  4012f4:	005a83df 	.word	0x005a83df
  4012f8:	00403201 	.word	0x00403201
  4012fc:	005a83e0 	.word	0x005a83e0
  401300:	20400001 	.word	0x20400001

00401304 <osc_enable>:
{
  401304:	b580      	push	{r7, lr}
  401306:	b082      	sub	sp, #8
  401308:	af00      	add	r7, sp, #0
  40130a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  40130c:	687b      	ldr	r3, [r7, #4]
  40130e:	2b07      	cmp	r3, #7
  401310:	d831      	bhi.n	401376 <osc_enable+0x72>
  401312:	a201      	add	r2, pc, #4	; (adr r2, 401318 <osc_enable+0x14>)
  401314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401318:	00401375 	.word	0x00401375
  40131c:	00401339 	.word	0x00401339
  401320:	00401341 	.word	0x00401341
  401324:	00401349 	.word	0x00401349
  401328:	00401351 	.word	0x00401351
  40132c:	00401359 	.word	0x00401359
  401330:	00401361 	.word	0x00401361
  401334:	0040136b 	.word	0x0040136b
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
  401338:	2000      	movs	r0, #0
  40133a:	4b11      	ldr	r3, [pc, #68]	; (401380 <osc_enable+0x7c>)
  40133c:	4798      	blx	r3
		break;
  40133e:	e01a      	b.n	401376 <osc_enable+0x72>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
  401340:	2001      	movs	r0, #1
  401342:	4b0f      	ldr	r3, [pc, #60]	; (401380 <osc_enable+0x7c>)
  401344:	4798      	blx	r3
		break;
  401346:	e016      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
  401348:	2000      	movs	r0, #0
  40134a:	4b0e      	ldr	r3, [pc, #56]	; (401384 <osc_enable+0x80>)
  40134c:	4798      	blx	r3
		break;
  40134e:	e012      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
  401350:	2010      	movs	r0, #16
  401352:	4b0c      	ldr	r3, [pc, #48]	; (401384 <osc_enable+0x80>)
  401354:	4798      	blx	r3
		break;
  401356:	e00e      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
  401358:	2020      	movs	r0, #32
  40135a:	4b0a      	ldr	r3, [pc, #40]	; (401384 <osc_enable+0x80>)
  40135c:	4798      	blx	r3
		break;
  40135e:	e00a      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  401360:	213e      	movs	r1, #62	; 0x3e
  401362:	2000      	movs	r0, #0
  401364:	4b08      	ldr	r3, [pc, #32]	; (401388 <osc_enable+0x84>)
  401366:	4798      	blx	r3
		break;
  401368:	e005      	b.n	401376 <osc_enable+0x72>
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
  40136a:	213e      	movs	r1, #62	; 0x3e
  40136c:	2001      	movs	r0, #1
  40136e:	4b06      	ldr	r3, [pc, #24]	; (401388 <osc_enable+0x84>)
  401370:	4798      	blx	r3
		break;
  401372:	e000      	b.n	401376 <osc_enable+0x72>
		break;
  401374:	bf00      	nop
}
  401376:	bf00      	nop
  401378:	3708      	adds	r7, #8
  40137a:	46bd      	mov	sp, r7
  40137c:	bd80      	pop	{r7, pc}
  40137e:	bf00      	nop
  401380:	00402211 	.word	0x00402211
  401384:	0040227d 	.word	0x0040227d
  401388:	004022ed 	.word	0x004022ed

0040138c <osc_is_ready>:
{
  40138c:	b580      	push	{r7, lr}
  40138e:	b082      	sub	sp, #8
  401390:	af00      	add	r7, sp, #0
  401392:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401394:	687b      	ldr	r3, [r7, #4]
  401396:	2b07      	cmp	r3, #7
  401398:	d826      	bhi.n	4013e8 <osc_is_ready+0x5c>
  40139a:	a201      	add	r2, pc, #4	; (adr r2, 4013a0 <osc_is_ready+0x14>)
  40139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4013a0:	004013c1 	.word	0x004013c1
  4013a4:	004013c5 	.word	0x004013c5
  4013a8:	004013c5 	.word	0x004013c5
  4013ac:	004013d7 	.word	0x004013d7
  4013b0:	004013d7 	.word	0x004013d7
  4013b4:	004013d7 	.word	0x004013d7
  4013b8:	004013d7 	.word	0x004013d7
  4013bc:	004013d7 	.word	0x004013d7
		return 1;
  4013c0:	2301      	movs	r3, #1
  4013c2:	e012      	b.n	4013ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_32kxtal();
  4013c4:	4b0b      	ldr	r3, [pc, #44]	; (4013f4 <osc_is_ready+0x68>)
  4013c6:	4798      	blx	r3
  4013c8:	4603      	mov	r3, r0
  4013ca:	2b00      	cmp	r3, #0
  4013cc:	bf14      	ite	ne
  4013ce:	2301      	movne	r3, #1
  4013d0:	2300      	moveq	r3, #0
  4013d2:	b2db      	uxtb	r3, r3
  4013d4:	e009      	b.n	4013ea <osc_is_ready+0x5e>
		return pmc_osc_is_ready_mainck();
  4013d6:	4b08      	ldr	r3, [pc, #32]	; (4013f8 <osc_is_ready+0x6c>)
  4013d8:	4798      	blx	r3
  4013da:	4603      	mov	r3, r0
  4013dc:	2b00      	cmp	r3, #0
  4013de:	bf14      	ite	ne
  4013e0:	2301      	movne	r3, #1
  4013e2:	2300      	moveq	r3, #0
  4013e4:	b2db      	uxtb	r3, r3
  4013e6:	e000      	b.n	4013ea <osc_is_ready+0x5e>
	return 0;
  4013e8:	2300      	movs	r3, #0
}
  4013ea:	4618      	mov	r0, r3
  4013ec:	3708      	adds	r7, #8
  4013ee:	46bd      	mov	sp, r7
  4013f0:	bd80      	pop	{r7, pc}
  4013f2:	bf00      	nop
  4013f4:	00402249 	.word	0x00402249
  4013f8:	00402365 	.word	0x00402365

004013fc <osc_get_rate>:
{
  4013fc:	b480      	push	{r7}
  4013fe:	b083      	sub	sp, #12
  401400:	af00      	add	r7, sp, #0
  401402:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  401404:	687b      	ldr	r3, [r7, #4]
  401406:	2b07      	cmp	r3, #7
  401408:	d825      	bhi.n	401456 <osc_get_rate+0x5a>
  40140a:	a201      	add	r2, pc, #4	; (adr r2, 401410 <osc_get_rate+0x14>)
  40140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401410:	00401431 	.word	0x00401431
  401414:	00401437 	.word	0x00401437
  401418:	0040143d 	.word	0x0040143d
  40141c:	00401443 	.word	0x00401443
  401420:	00401447 	.word	0x00401447
  401424:	0040144b 	.word	0x0040144b
  401428:	0040144f 	.word	0x0040144f
  40142c:	00401453 	.word	0x00401453
		return OSC_SLCK_32K_RC_HZ;
  401430:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  401434:	e010      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  401436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  40143a:	e00d      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  40143c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  401440:	e00a      	b.n	401458 <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  401442:	4b08      	ldr	r3, [pc, #32]	; (401464 <osc_get_rate+0x68>)
  401444:	e008      	b.n	401458 <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  401446:	4b08      	ldr	r3, [pc, #32]	; (401468 <osc_get_rate+0x6c>)
  401448:	e006      	b.n	401458 <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  40144a:	4b08      	ldr	r3, [pc, #32]	; (40146c <osc_get_rate+0x70>)
  40144c:	e004      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  40144e:	4b07      	ldr	r3, [pc, #28]	; (40146c <osc_get_rate+0x70>)
  401450:	e002      	b.n	401458 <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  401452:	4b06      	ldr	r3, [pc, #24]	; (40146c <osc_get_rate+0x70>)
  401454:	e000      	b.n	401458 <osc_get_rate+0x5c>
	return 0;
  401456:	2300      	movs	r3, #0
}
  401458:	4618      	mov	r0, r3
  40145a:	370c      	adds	r7, #12
  40145c:	46bd      	mov	sp, r7
  40145e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401462:	4770      	bx	lr
  401464:	003d0900 	.word	0x003d0900
  401468:	007a1200 	.word	0x007a1200
  40146c:	00b71b00 	.word	0x00b71b00

00401470 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
  401470:	b580      	push	{r7, lr}
  401472:	b082      	sub	sp, #8
  401474:	af00      	add	r7, sp, #0
  401476:	4603      	mov	r3, r0
  401478:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
  40147a:	bf00      	nop
  40147c:	79fb      	ldrb	r3, [r7, #7]
  40147e:	4618      	mov	r0, r3
  401480:	4b05      	ldr	r3, [pc, #20]	; (401498 <osc_wait_ready+0x28>)
  401482:	4798      	blx	r3
  401484:	4603      	mov	r3, r0
  401486:	f083 0301 	eor.w	r3, r3, #1
  40148a:	b2db      	uxtb	r3, r3
  40148c:	2b00      	cmp	r3, #0
  40148e:	d1f5      	bne.n	40147c <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
  401490:	bf00      	nop
  401492:	3708      	adds	r7, #8
  401494:	46bd      	mov	sp, r7
  401496:	bd80      	pop	{r7, pc}
  401498:	0040138d 	.word	0x0040138d

0040149c <pll_config_init>:
 * hardware mul+1 is hidden in this implementation. Use mul as mul effective
 * value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
  40149c:	b580      	push	{r7, lr}
  40149e:	b086      	sub	sp, #24
  4014a0:	af00      	add	r7, sp, #0
  4014a2:	60f8      	str	r0, [r7, #12]
  4014a4:	607a      	str	r2, [r7, #4]
  4014a6:	603b      	str	r3, [r7, #0]
  4014a8:	460b      	mov	r3, r1
  4014aa:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
  4014ac:	687b      	ldr	r3, [r7, #4]
  4014ae:	2b00      	cmp	r3, #0
  4014b0:	d107      	bne.n	4014c2 <pll_config_init+0x26>
  4014b2:	683b      	ldr	r3, [r7, #0]
  4014b4:	2b00      	cmp	r3, #0
  4014b6:	d104      	bne.n	4014c2 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
  4014b8:	68fb      	ldr	r3, [r7, #12]
  4014ba:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
  4014be:	601a      	str	r2, [r3, #0]
  4014c0:	e019      	b.n	4014f6 <pll_config_init+0x5a>
	} else { /* PLLA */
	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(e_src) / ul_div;
  4014c2:	7afb      	ldrb	r3, [r7, #11]
  4014c4:	4618      	mov	r0, r3
  4014c6:	4b0e      	ldr	r3, [pc, #56]	; (401500 <pll_config_init+0x64>)
  4014c8:	4798      	blx	r3
  4014ca:	4602      	mov	r2, r0
  4014cc:	687b      	ldr	r3, [r7, #4]
  4014ce:	fbb2 f3f3 	udiv	r3, r2, r3
  4014d2:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_INPUT_MIN_HZ);
	Assert(vco_hz <= PLL_INPUT_MAX_HZ);

	vco_hz *= ul_mul;
  4014d4:	697b      	ldr	r3, [r7, #20]
  4014d6:	683a      	ldr	r2, [r7, #0]
  4014d8:	fb02 f303 	mul.w	r3, r2, r3
  4014dc:	617b      	str	r3, [r7, #20]
	Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
	Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

	/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4014de:	683b      	ldr	r3, [r7, #0]
  4014e0:	3b01      	subs	r3, #1
  4014e2:	041a      	lsls	r2, r3, #16
  4014e4:	4b07      	ldr	r3, [pc, #28]	; (401504 <pll_config_init+0x68>)
  4014e6:	4013      	ands	r3, r2
  4014e8:	687a      	ldr	r2, [r7, #4]
  4014ea:	b2d2      	uxtb	r2, r2
  4014ec:	4313      	orrs	r3, r2
		| CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
  4014ee:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div)  \
  4014f2:	68fb      	ldr	r3, [r7, #12]
  4014f4:	601a      	str	r2, [r3, #0]
	}
}
  4014f6:	bf00      	nop
  4014f8:	3718      	adds	r7, #24
  4014fa:	46bd      	mov	sp, r7
  4014fc:	bd80      	pop	{r7, pc}
  4014fe:	bf00      	nop
  401500:	004013fd 	.word	0x004013fd
  401504:	07ff0000 	.word	0x07ff0000

00401508 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
  401508:	b580      	push	{r7, lr}
  40150a:	b082      	sub	sp, #8
  40150c:	af00      	add	r7, sp, #0
  40150e:	6078      	str	r0, [r7, #4]
  401510:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401512:	683b      	ldr	r3, [r7, #0]
  401514:	2b00      	cmp	r3, #0
  401516:	d108      	bne.n	40152a <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
  401518:	4b09      	ldr	r3, [pc, #36]	; (401540 <pll_enable+0x38>)
  40151a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  40151c:	4a09      	ldr	r2, [pc, #36]	; (401544 <pll_enable+0x3c>)
  40151e:	687b      	ldr	r3, [r7, #4]
  401520:	681b      	ldr	r3, [r3, #0]
  401522:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  401526:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
  401528:	e005      	b.n	401536 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
  40152a:	4a06      	ldr	r2, [pc, #24]	; (401544 <pll_enable+0x3c>)
  40152c:	687b      	ldr	r3, [r7, #4]
  40152e:	681b      	ldr	r3, [r3, #0]
  401530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401534:	61d3      	str	r3, [r2, #28]
}
  401536:	bf00      	nop
  401538:	3708      	adds	r7, #8
  40153a:	46bd      	mov	sp, r7
  40153c:	bd80      	pop	{r7, pc}
  40153e:	bf00      	nop
  401540:	00402381 	.word	0x00402381
  401544:	400e0600 	.word	0x400e0600

00401548 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
  401548:	b580      	push	{r7, lr}
  40154a:	b082      	sub	sp, #8
  40154c:	af00      	add	r7, sp, #0
  40154e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
  401550:	687b      	ldr	r3, [r7, #4]
  401552:	2b00      	cmp	r3, #0
  401554:	d103      	bne.n	40155e <pll_is_locked+0x16>
	return pmc_is_locked_pllack();
  401556:	4b05      	ldr	r3, [pc, #20]	; (40156c <pll_is_locked+0x24>)
  401558:	4798      	blx	r3
  40155a:	4603      	mov	r3, r0
  40155c:	e002      	b.n	401564 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
  40155e:	4b04      	ldr	r3, [pc, #16]	; (401570 <pll_is_locked+0x28>)
  401560:	4798      	blx	r3
  401562:	4603      	mov	r3, r0
	}
}
  401564:	4618      	mov	r0, r3
  401566:	3708      	adds	r7, #8
  401568:	46bd      	mov	sp, r7
  40156a:	bd80      	pop	{r7, pc}
  40156c:	0040239d 	.word	0x0040239d
  401570:	004023b9 	.word	0x004023b9

00401574 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
  401574:	b580      	push	{r7, lr}
  401576:	b082      	sub	sp, #8
  401578:	af00      	add	r7, sp, #0
  40157a:	4603      	mov	r3, r0
  40157c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
  40157e:	79fb      	ldrb	r3, [r7, #7]
  401580:	3b03      	subs	r3, #3
  401582:	2b04      	cmp	r3, #4
  401584:	d808      	bhi.n	401598 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
  401586:	79fb      	ldrb	r3, [r7, #7]
  401588:	4618      	mov	r0, r3
  40158a:	4b06      	ldr	r3, [pc, #24]	; (4015a4 <pll_enable_source+0x30>)
  40158c:	4798      	blx	r3
		osc_wait_ready(e_src);
  40158e:	79fb      	ldrb	r3, [r7, #7]
  401590:	4618      	mov	r0, r3
  401592:	4b05      	ldr	r3, [pc, #20]	; (4015a8 <pll_enable_source+0x34>)
  401594:	4798      	blx	r3
		break;
  401596:	e000      	b.n	40159a <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
  401598:	bf00      	nop
	}
}
  40159a:	bf00      	nop
  40159c:	3708      	adds	r7, #8
  40159e:	46bd      	mov	sp, r7
  4015a0:	bd80      	pop	{r7, pc}
  4015a2:	bf00      	nop
  4015a4:	00401305 	.word	0x00401305
  4015a8:	00401471 	.word	0x00401471

004015ac <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
  4015ac:	b580      	push	{r7, lr}
  4015ae:	b082      	sub	sp, #8
  4015b0:	af00      	add	r7, sp, #0
  4015b2:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4015b4:	bf00      	nop
  4015b6:	6878      	ldr	r0, [r7, #4]
  4015b8:	4b04      	ldr	r3, [pc, #16]	; (4015cc <pll_wait_for_lock+0x20>)
  4015ba:	4798      	blx	r3
  4015bc:	4603      	mov	r3, r0
  4015be:	2b00      	cmp	r3, #0
  4015c0:	d0f9      	beq.n	4015b6 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
  4015c2:	2300      	movs	r3, #0
}
  4015c4:	4618      	mov	r0, r3
  4015c6:	3708      	adds	r7, #8
  4015c8:	46bd      	mov	sp, r7
  4015ca:	bd80      	pop	{r7, pc}
  4015cc:	00401549 	.word	0x00401549

004015d0 <sysclk_get_main_hz>:
{
  4015d0:	b580      	push	{r7, lr}
  4015d2:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  4015d4:	2006      	movs	r0, #6
  4015d6:	4b05      	ldr	r3, [pc, #20]	; (4015ec <sysclk_get_main_hz+0x1c>)
  4015d8:	4798      	blx	r3
  4015da:	4602      	mov	r2, r0
  4015dc:	4613      	mov	r3, r2
  4015de:	009b      	lsls	r3, r3, #2
  4015e0:	4413      	add	r3, r2
  4015e2:	009a      	lsls	r2, r3, #2
  4015e4:	4413      	add	r3, r2
}
  4015e6:	4618      	mov	r0, r3
  4015e8:	bd80      	pop	{r7, pc}
  4015ea:	bf00      	nop
  4015ec:	004013fd 	.word	0x004013fd

004015f0 <sysclk_get_cpu_hz>:
{
  4015f0:	b580      	push	{r7, lr}
  4015f2:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  4015f4:	4b02      	ldr	r3, [pc, #8]	; (401600 <sysclk_get_cpu_hz+0x10>)
  4015f6:	4798      	blx	r3
  4015f8:	4603      	mov	r3, r0
}
  4015fa:	4618      	mov	r0, r3
  4015fc:	bd80      	pop	{r7, pc}
  4015fe:	bf00      	nop
  401600:	004015d1 	.word	0x004015d1

00401604 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  401604:	b590      	push	{r4, r7, lr}
  401606:	b083      	sub	sp, #12
  401608:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40160a:	4813      	ldr	r0, [pc, #76]	; (401658 <sysclk_init+0x54>)
  40160c:	4b13      	ldr	r3, [pc, #76]	; (40165c <sysclk_init+0x58>)
  40160e:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
  401610:	2006      	movs	r0, #6
  401612:	4b13      	ldr	r3, [pc, #76]	; (401660 <sysclk_init+0x5c>)
  401614:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
  401616:	1d38      	adds	r0, r7, #4
  401618:	2319      	movs	r3, #25
  40161a:	2201      	movs	r2, #1
  40161c:	2106      	movs	r1, #6
  40161e:	4c11      	ldr	r4, [pc, #68]	; (401664 <sysclk_init+0x60>)
  401620:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
  401622:	1d3b      	adds	r3, r7, #4
  401624:	2100      	movs	r1, #0
  401626:	4618      	mov	r0, r3
  401628:	4b0f      	ldr	r3, [pc, #60]	; (401668 <sysclk_init+0x64>)
  40162a:	4798      	blx	r3
		pll_wait_for_lock(0);
  40162c:	2000      	movs	r0, #0
  40162e:	4b0f      	ldr	r3, [pc, #60]	; (40166c <sysclk_init+0x68>)
  401630:	4798      	blx	r3
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  401632:	2002      	movs	r0, #2
  401634:	4b0e      	ldr	r3, [pc, #56]	; (401670 <sysclk_init+0x6c>)
  401636:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  401638:	2000      	movs	r0, #0
  40163a:	4b0e      	ldr	r3, [pc, #56]	; (401674 <sysclk_init+0x70>)
  40163c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  40163e:	4b0e      	ldr	r3, [pc, #56]	; (401678 <sysclk_init+0x74>)
  401640:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  401642:	4b0e      	ldr	r3, [pc, #56]	; (40167c <sysclk_init+0x78>)
  401644:	4798      	blx	r3
  401646:	4603      	mov	r3, r0
  401648:	4618      	mov	r0, r3
  40164a:	4b04      	ldr	r3, [pc, #16]	; (40165c <sysclk_init+0x58>)
  40164c:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
  40164e:	bf00      	nop
  401650:	370c      	adds	r7, #12
  401652:	46bd      	mov	sp, r7
  401654:	bd90      	pop	{r4, r7, pc}
  401656:	bf00      	nop
  401658:	11e1a300 	.word	0x11e1a300
  40165c:	00402701 	.word	0x00402701
  401660:	00401575 	.word	0x00401575
  401664:	0040149d 	.word	0x0040149d
  401668:	00401509 	.word	0x00401509
  40166c:	004015ad 	.word	0x004015ad
  401670:	00402111 	.word	0x00402111
  401674:	0040218d 	.word	0x0040218d
  401678:	00402599 	.word	0x00402599
  40167c:	004015f1 	.word	0x004015f1

00401680 <SCB_EnableICache>:
/** \brief Enable I-Cache

    The function turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache(void)
{
  401680:	b480      	push	{r7}
  401682:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  401684:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401688:	f3bf 8f6f 	isb	sy
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  40168c:	4b09      	ldr	r3, [pc, #36]	; (4016b4 <SCB_EnableICache+0x34>)
  40168e:	2200      	movs	r2, #0
  401690:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401694:	4a07      	ldr	r2, [pc, #28]	; (4016b4 <SCB_EnableICache+0x34>)
  401696:	4b07      	ldr	r3, [pc, #28]	; (4016b4 <SCB_EnableICache+0x34>)
  401698:	695b      	ldr	r3, [r3, #20]
  40169a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  40169e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb");
  4016a0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4016a4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
  4016a8:	bf00      	nop
  4016aa:	46bd      	mov	sp, r7
  4016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4016b0:	4770      	bx	lr
  4016b2:	bf00      	nop
  4016b4:	e000ed00 	.word	0xe000ed00

004016b8 <SCB_EnableDCache>:
/** \brief Enable D-Cache

    The function turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache(void)
{
  4016b8:	b480      	push	{r7}
  4016ba:	b08b      	sub	sp, #44	; 0x2c
  4016bc:	af00      	add	r7, sp, #0
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  4016be:	4b26      	ldr	r3, [pc, #152]	; (401758 <SCB_EnableDCache+0xa0>)
  4016c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  4016c4:	61fb      	str	r3, [r7, #28]
    sets    = CCSIDR_SETS(ccsidr);
  4016c6:	69fb      	ldr	r3, [r7, #28]
  4016c8:	0b5b      	lsrs	r3, r3, #13
  4016ca:	f3c3 030e 	ubfx	r3, r3, #0, #15
  4016ce:	627b      	str	r3, [r7, #36]	; 0x24
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  4016d0:	69fb      	ldr	r3, [r7, #28]
  4016d2:	f003 0307 	and.w	r3, r3, #7
  4016d6:	3304      	adds	r3, #4
  4016d8:	61bb      	str	r3, [r7, #24]
    ways    = CCSIDR_WAYS(ccsidr);
  4016da:	69fb      	ldr	r3, [r7, #28]
  4016dc:	08db      	lsrs	r3, r3, #3
  4016de:	f3c3 0309 	ubfx	r3, r3, #0, #10
  4016e2:	617b      	str	r3, [r7, #20]
  4016e4:	697b      	ldr	r3, [r7, #20]
  4016e6:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  4016e8:	68bb      	ldr	r3, [r7, #8]
  4016ea:	fab3 f383 	clz	r3, r3
  4016ee:	607b      	str	r3, [r7, #4]
   return ((uint8_t) result);    /* Add explicit type cast here */
  4016f0:	687b      	ldr	r3, [r7, #4]
  4016f2:	b2db      	uxtb	r3, r3
    wshift  = __CLZ(ways) & 0x1f;
  4016f4:	f003 031f 	and.w	r3, r3, #31
  4016f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb");
  4016fa:	f3bf 8f4f 	dsb	sy

    __DSB();

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
  4016fe:	697b      	ldr	r3, [r7, #20]
  401700:	623b      	str	r3, [r7, #32]
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
  401702:	6a3a      	ldr	r2, [r7, #32]
  401704:	693b      	ldr	r3, [r7, #16]
  401706:	fa02 f303 	lsl.w	r3, r2, r3
  40170a:	4619      	mov	r1, r3
  40170c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  40170e:	69bb      	ldr	r3, [r7, #24]
  401710:	fa02 f303 	lsl.w	r3, r2, r3
  401714:	430b      	orrs	r3, r1
  401716:	60fb      	str	r3, [r7, #12]
              SCB->DCISW = sw;
  401718:	4a0f      	ldr	r2, [pc, #60]	; (401758 <SCB_EnableDCache+0xa0>)
  40171a:	68fb      	ldr	r3, [r7, #12]
  40171c:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
            } while(tmpways--);
  401720:	6a3b      	ldr	r3, [r7, #32]
  401722:	1e5a      	subs	r2, r3, #1
  401724:	623a      	str	r2, [r7, #32]
  401726:	2b00      	cmp	r3, #0
  401728:	d1eb      	bne.n	401702 <SCB_EnableDCache+0x4a>
        } while(sets--);
  40172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  40172c:	1e5a      	subs	r2, r3, #1
  40172e:	627a      	str	r2, [r7, #36]	; 0x24
  401730:	2b00      	cmp	r3, #0
  401732:	d1e4      	bne.n	4016fe <SCB_EnableDCache+0x46>
  401734:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  401738:	4a07      	ldr	r2, [pc, #28]	; (401758 <SCB_EnableDCache+0xa0>)
  40173a:	4b07      	ldr	r3, [pc, #28]	; (401758 <SCB_EnableDCache+0xa0>)
  40173c:	695b      	ldr	r3, [r3, #20]
  40173e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
  401742:	6153      	str	r3, [r2, #20]
  401744:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401748:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
  40174c:	bf00      	nop
  40174e:	372c      	adds	r7, #44	; 0x2c
  401750:	46bd      	mov	sp, r7
  401752:	f85d 7b04 	ldr.w	r7, [sp], #4
  401756:	4770      	bx	lr
  401758:	e000ed00 	.word	0xe000ed00

0040175c <sysclk_enable_peripheral_clock>:
{
  40175c:	b580      	push	{r7, lr}
  40175e:	b082      	sub	sp, #8
  401760:	af00      	add	r7, sp, #0
  401762:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
  401764:	6878      	ldr	r0, [r7, #4]
  401766:	4b03      	ldr	r3, [pc, #12]	; (401774 <sysclk_enable_peripheral_clock+0x18>)
  401768:	4798      	blx	r3
}
  40176a:	bf00      	nop
  40176c:	3708      	adds	r7, #8
  40176e:	46bd      	mov	sp, r7
  401770:	bd80      	pop	{r7, pc}
  401772:	bf00      	nop
  401774:	004023d5 	.word	0x004023d5

00401778 <ioport_init>:
{
  401778:	b580      	push	{r7, lr}
  40177a:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
  40177c:	200a      	movs	r0, #10
  40177e:	4b08      	ldr	r3, [pc, #32]	; (4017a0 <ioport_init+0x28>)
  401780:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
  401782:	200b      	movs	r0, #11
  401784:	4b06      	ldr	r3, [pc, #24]	; (4017a0 <ioport_init+0x28>)
  401786:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOC);
  401788:	200c      	movs	r0, #12
  40178a:	4b05      	ldr	r3, [pc, #20]	; (4017a0 <ioport_init+0x28>)
  40178c:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOD);
  40178e:	2010      	movs	r0, #16
  401790:	4b03      	ldr	r3, [pc, #12]	; (4017a0 <ioport_init+0x28>)
  401792:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOE);
  401794:	2011      	movs	r0, #17
  401796:	4b02      	ldr	r3, [pc, #8]	; (4017a0 <ioport_init+0x28>)
  401798:	4798      	blx	r3
}
  40179a:	bf00      	nop
  40179c:	bd80      	pop	{r7, pc}
  40179e:	bf00      	nop
  4017a0:	0040175d 	.word	0x0040175d

004017a4 <ioport_set_pin_mode>:
{
  4017a4:	b480      	push	{r7}
  4017a6:	b08d      	sub	sp, #52	; 0x34
  4017a8:	af00      	add	r7, sp, #0
  4017aa:	6078      	str	r0, [r7, #4]
  4017ac:	6039      	str	r1, [r7, #0]
  4017ae:	687b      	ldr	r3, [r7, #4]
  4017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  4017b2:	683b      	ldr	r3, [r7, #0]
  4017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  4017b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017b8:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4017bc:	095a      	lsrs	r2, r3, #5
  4017be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4017c0:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4017c2:	6a3b      	ldr	r3, [r7, #32]
  4017c4:	f003 031f 	and.w	r3, r3, #31
  4017c8:	2101      	movs	r1, #1
  4017ca:	fa01 f303 	lsl.w	r3, r1, r3
  4017ce:	61fa      	str	r2, [r7, #28]
  4017d0:	61bb      	str	r3, [r7, #24]
  4017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
  4017d4:	617b      	str	r3, [r7, #20]
  4017d6:	69fb      	ldr	r3, [r7, #28]
  4017d8:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4017da:	693a      	ldr	r2, [r7, #16]
  4017dc:	4b37      	ldr	r3, [pc, #220]	; (4018bc <ioport_set_pin_mode+0x118>)
  4017de:	4413      	add	r3, r2
  4017e0:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_port_to_base(port);
  4017e2:	60fb      	str	r3, [r7, #12]
	if (mode & IOPORT_MODE_PULLUP) {
  4017e4:	697b      	ldr	r3, [r7, #20]
  4017e6:	f003 0308 	and.w	r3, r3, #8
  4017ea:	2b00      	cmp	r3, #0
  4017ec:	d003      	beq.n	4017f6 <ioport_set_pin_mode+0x52>
		base->PIO_PUER = mask;
  4017ee:	68fb      	ldr	r3, [r7, #12]
  4017f0:	69ba      	ldr	r2, [r7, #24]
  4017f2:	665a      	str	r2, [r3, #100]	; 0x64
  4017f4:	e002      	b.n	4017fc <ioport_set_pin_mode+0x58>
		base->PIO_PUDR = mask;
  4017f6:	68fb      	ldr	r3, [r7, #12]
  4017f8:	69ba      	ldr	r2, [r7, #24]
  4017fa:	661a      	str	r2, [r3, #96]	; 0x60
	if (mode & IOPORT_MODE_PULLDOWN) {
  4017fc:	697b      	ldr	r3, [r7, #20]
  4017fe:	f003 0310 	and.w	r3, r3, #16
  401802:	2b00      	cmp	r3, #0
  401804:	d004      	beq.n	401810 <ioport_set_pin_mode+0x6c>
		base->PIO_PPDER = mask;
  401806:	68fb      	ldr	r3, [r7, #12]
  401808:	69ba      	ldr	r2, [r7, #24]
  40180a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  40180e:	e003      	b.n	401818 <ioport_set_pin_mode+0x74>
		base->PIO_PPDDR = mask;
  401810:	68fb      	ldr	r3, [r7, #12]
  401812:	69ba      	ldr	r2, [r7, #24]
  401814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (mode & IOPORT_MODE_OPEN_DRAIN) {
  401818:	697b      	ldr	r3, [r7, #20]
  40181a:	f003 0320 	and.w	r3, r3, #32
  40181e:	2b00      	cmp	r3, #0
  401820:	d003      	beq.n	40182a <ioport_set_pin_mode+0x86>
		base->PIO_MDER = mask;
  401822:	68fb      	ldr	r3, [r7, #12]
  401824:	69ba      	ldr	r2, [r7, #24]
  401826:	651a      	str	r2, [r3, #80]	; 0x50
  401828:	e002      	b.n	401830 <ioport_set_pin_mode+0x8c>
		base->PIO_MDDR = mask;
  40182a:	68fb      	ldr	r3, [r7, #12]
  40182c:	69ba      	ldr	r2, [r7, #24]
  40182e:	655a      	str	r2, [r3, #84]	; 0x54
	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
  401830:	697b      	ldr	r3, [r7, #20]
  401832:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
  401836:	2b00      	cmp	r3, #0
  401838:	d003      	beq.n	401842 <ioport_set_pin_mode+0x9e>
		base->PIO_IFER = mask;
  40183a:	68fb      	ldr	r3, [r7, #12]
  40183c:	69ba      	ldr	r2, [r7, #24]
  40183e:	621a      	str	r2, [r3, #32]
  401840:	e002      	b.n	401848 <ioport_set_pin_mode+0xa4>
		base->PIO_IFDR = mask;
  401842:	68fb      	ldr	r3, [r7, #12]
  401844:	69ba      	ldr	r2, [r7, #24]
  401846:	625a      	str	r2, [r3, #36]	; 0x24
	if (mode & IOPORT_MODE_DEBOUNCE) {
  401848:	697b      	ldr	r3, [r7, #20]
  40184a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40184e:	2b00      	cmp	r3, #0
  401850:	d004      	beq.n	40185c <ioport_set_pin_mode+0xb8>
		base->PIO_IFSCER = mask;
  401852:	68fb      	ldr	r3, [r7, #12]
  401854:	69ba      	ldr	r2, [r7, #24]
  401856:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  40185a:	e003      	b.n	401864 <ioport_set_pin_mode+0xc0>
		base->PIO_IFSCDR = mask;
  40185c:	68fb      	ldr	r3, [r7, #12]
  40185e:	69ba      	ldr	r2, [r7, #24]
  401860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if (mode & IOPORT_MODE_MUX_BIT0) {
  401864:	697b      	ldr	r3, [r7, #20]
  401866:	f003 0301 	and.w	r3, r3, #1
  40186a:	2b00      	cmp	r3, #0
  40186c:	d006      	beq.n	40187c <ioport_set_pin_mode+0xd8>
		base->PIO_ABCDSR[0] |= mask;
  40186e:	68fb      	ldr	r3, [r7, #12]
  401870:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401872:	69bb      	ldr	r3, [r7, #24]
  401874:	431a      	orrs	r2, r3
  401876:	68fb      	ldr	r3, [r7, #12]
  401878:	671a      	str	r2, [r3, #112]	; 0x70
  40187a:	e006      	b.n	40188a <ioport_set_pin_mode+0xe6>
		base->PIO_ABCDSR[0] &= ~mask;
  40187c:	68fb      	ldr	r3, [r7, #12]
  40187e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401880:	69bb      	ldr	r3, [r7, #24]
  401882:	43db      	mvns	r3, r3
  401884:	401a      	ands	r2, r3
  401886:	68fb      	ldr	r3, [r7, #12]
  401888:	671a      	str	r2, [r3, #112]	; 0x70
	if (mode & IOPORT_MODE_MUX_BIT1) {
  40188a:	697b      	ldr	r3, [r7, #20]
  40188c:	f003 0302 	and.w	r3, r3, #2
  401890:	2b00      	cmp	r3, #0
  401892:	d006      	beq.n	4018a2 <ioport_set_pin_mode+0xfe>
		base->PIO_ABCDSR[1] |= mask;
  401894:	68fb      	ldr	r3, [r7, #12]
  401896:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401898:	69bb      	ldr	r3, [r7, #24]
  40189a:	431a      	orrs	r2, r3
  40189c:	68fb      	ldr	r3, [r7, #12]
  40189e:	675a      	str	r2, [r3, #116]	; 0x74
}
  4018a0:	e006      	b.n	4018b0 <ioport_set_pin_mode+0x10c>
		base->PIO_ABCDSR[1] &= ~mask;
  4018a2:	68fb      	ldr	r3, [r7, #12]
  4018a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  4018a6:	69bb      	ldr	r3, [r7, #24]
  4018a8:	43db      	mvns	r3, r3
  4018aa:	401a      	ands	r2, r3
  4018ac:	68fb      	ldr	r3, [r7, #12]
  4018ae:	675a      	str	r2, [r3, #116]	; 0x74
  4018b0:	bf00      	nop
  4018b2:	3734      	adds	r7, #52	; 0x34
  4018b4:	46bd      	mov	sp, r7
  4018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4018ba:	4770      	bx	lr
  4018bc:	00200707 	.word	0x00200707

004018c0 <ioport_set_pin_dir>:
{
  4018c0:	b480      	push	{r7}
  4018c2:	b08d      	sub	sp, #52	; 0x34
  4018c4:	af00      	add	r7, sp, #0
  4018c6:	6078      	str	r0, [r7, #4]
  4018c8:	460b      	mov	r3, r1
  4018ca:	70fb      	strb	r3, [r7, #3]
  4018cc:	687b      	ldr	r3, [r7, #4]
  4018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  4018d0:	78fb      	ldrb	r3, [r7, #3]
  4018d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4018d8:	627b      	str	r3, [r7, #36]	; 0x24
  4018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4018dc:	623b      	str	r3, [r7, #32]
	return pin >> 5;
  4018de:	6a3b      	ldr	r3, [r7, #32]
  4018e0:	095b      	lsrs	r3, r3, #5
  4018e2:	61fb      	str	r3, [r7, #28]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4018e4:	69fa      	ldr	r2, [r7, #28]
  4018e6:	4b17      	ldr	r3, [pc, #92]	; (401944 <ioport_set_pin_dir+0x84>)
  4018e8:	4413      	add	r3, r2
  4018ea:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  4018ec:	61bb      	str	r3, [r7, #24]
	if (dir == IOPORT_DIR_OUTPUT) {
  4018ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4018f2:	2b01      	cmp	r3, #1
  4018f4:	d109      	bne.n	40190a <ioport_set_pin_dir+0x4a>
  4018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4018f8:	617b      	str	r3, [r7, #20]
	return 1U << (pin & 0x1F);
  4018fa:	697b      	ldr	r3, [r7, #20]
  4018fc:	f003 031f 	and.w	r3, r3, #31
  401900:	2201      	movs	r2, #1
  401902:	409a      	lsls	r2, r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  401904:	69bb      	ldr	r3, [r7, #24]
  401906:	611a      	str	r2, [r3, #16]
  401908:	e00c      	b.n	401924 <ioport_set_pin_dir+0x64>
	} else if (dir == IOPORT_DIR_INPUT) {
  40190a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  40190e:	2b00      	cmp	r3, #0
  401910:	d108      	bne.n	401924 <ioport_set_pin_dir+0x64>
  401912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401914:	613b      	str	r3, [r7, #16]
	return 1U << (pin & 0x1F);
  401916:	693b      	ldr	r3, [r7, #16]
  401918:	f003 031f 	and.w	r3, r3, #31
  40191c:	2201      	movs	r2, #1
  40191e:	409a      	lsls	r2, r3
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  401920:	69bb      	ldr	r3, [r7, #24]
  401922:	615a      	str	r2, [r3, #20]
  401924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  401926:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401928:	68fb      	ldr	r3, [r7, #12]
  40192a:	f003 031f 	and.w	r3, r3, #31
  40192e:	2201      	movs	r2, #1
  401930:	409a      	lsls	r2, r3
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  401932:	69bb      	ldr	r3, [r7, #24]
  401934:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
  401938:	bf00      	nop
  40193a:	3734      	adds	r7, #52	; 0x34
  40193c:	46bd      	mov	sp, r7
  40193e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401942:	4770      	bx	lr
  401944:	00200707 	.word	0x00200707

00401948 <ioport_set_pin_level>:
{
  401948:	b480      	push	{r7}
  40194a:	b08b      	sub	sp, #44	; 0x2c
  40194c:	af00      	add	r7, sp, #0
  40194e:	6078      	str	r0, [r7, #4]
  401950:	460b      	mov	r3, r1
  401952:	70fb      	strb	r3, [r7, #3]
  401954:	687b      	ldr	r3, [r7, #4]
  401956:	627b      	str	r3, [r7, #36]	; 0x24
  401958:	78fb      	ldrb	r3, [r7, #3]
  40195a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  40195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401960:	61fb      	str	r3, [r7, #28]
  401962:	69fb      	ldr	r3, [r7, #28]
  401964:	61bb      	str	r3, [r7, #24]
	return pin >> 5;
  401966:	69bb      	ldr	r3, [r7, #24]
  401968:	095b      	lsrs	r3, r3, #5
  40196a:	617b      	str	r3, [r7, #20]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40196c:	697a      	ldr	r2, [r7, #20]
  40196e:	4b10      	ldr	r3, [pc, #64]	; (4019b0 <ioport_set_pin_level+0x68>)
  401970:	4413      	add	r3, r2
  401972:	025b      	lsls	r3, r3, #9
	Pio *base = arch_ioport_pin_to_base(pin);
  401974:	613b      	str	r3, [r7, #16]
	if (level) {
  401976:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
  40197a:	2b00      	cmp	r3, #0
  40197c:	d009      	beq.n	401992 <ioport_set_pin_level+0x4a>
  40197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401980:	60fb      	str	r3, [r7, #12]
	return 1U << (pin & 0x1F);
  401982:	68fb      	ldr	r3, [r7, #12]
  401984:	f003 031f 	and.w	r3, r3, #31
  401988:	2201      	movs	r2, #1
  40198a:	409a      	lsls	r2, r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  40198c:	693b      	ldr	r3, [r7, #16]
  40198e:	631a      	str	r2, [r3, #48]	; 0x30
}
  401990:	e008      	b.n	4019a4 <ioport_set_pin_level+0x5c>
  401992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  401994:	60bb      	str	r3, [r7, #8]
	return 1U << (pin & 0x1F);
  401996:	68bb      	ldr	r3, [r7, #8]
  401998:	f003 031f 	and.w	r3, r3, #31
  40199c:	2201      	movs	r2, #1
  40199e:	409a      	lsls	r2, r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  4019a0:	693b      	ldr	r3, [r7, #16]
  4019a2:	635a      	str	r2, [r3, #52]	; 0x34
  4019a4:	bf00      	nop
  4019a6:	372c      	adds	r7, #44	; 0x2c
  4019a8:	46bd      	mov	sp, r7
  4019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4019ae:	4770      	bx	lr
  4019b0:	00200707 	.word	0x00200707

004019b4 <ioport_set_pin_sense_mode>:
 * \param pin IOPORT pin to configure
 * \param pin_sense Edge to sense for the pin (\ref ioport_sense)
 */
static inline void ioport_set_pin_sense_mode(ioport_pin_t pin,
		enum ioport_sense pin_sense)
{
  4019b4:	b480      	push	{r7}
  4019b6:	b08d      	sub	sp, #52	; 0x34
  4019b8:	af00      	add	r7, sp, #0
  4019ba:	6078      	str	r0, [r7, #4]
  4019bc:	460b      	mov	r3, r1
  4019be:	70fb      	strb	r3, [r7, #3]
  4019c0:	687b      	ldr	r3, [r7, #4]
  4019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  4019c4:	78fb      	ldrb	r3, [r7, #3]
  4019c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  4019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019cc:	627b      	str	r3, [r7, #36]	; 0x24
	return pin >> 5;
  4019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  4019d0:	095a      	lsrs	r2, r3, #5
  4019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  4019d4:	623b      	str	r3, [r7, #32]
	return 1U << (pin & 0x1F);
  4019d6:	6a3b      	ldr	r3, [r7, #32]
  4019d8:	f003 031f 	and.w	r3, r3, #31
  4019dc:	2101      	movs	r1, #1
  4019de:	fa01 f303 	lsl.w	r3, r1, r3
  4019e2:	61fa      	str	r2, [r7, #28]
  4019e4:	61bb      	str	r3, [r7, #24]
  4019e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
  4019ea:	75fb      	strb	r3, [r7, #23]
  4019ec:	69fb      	ldr	r3, [r7, #28]
  4019ee:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  4019f0:	693a      	ldr	r2, [r7, #16]
  4019f2:	4b23      	ldr	r3, [pc, #140]	; (401a80 <ioport_set_pin_sense_mode+0xcc>)
  4019f4:	4413      	add	r3, r2
  4019f6:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_sense_mode(ioport_port_t port,
		ioport_port_mask_t mask, enum ioport_sense pin_sense)
{
	Pio *base = arch_ioport_port_to_base(port);
  4019f8:	60fb      	str	r3, [r7, #12]
	 *       1       0         0    IOPORT_SENSE_FALLING
	 *       1       0         1    IOPORT_SENSE_RISING
	 *       1       1         0    IOPORT_SENSE_LEVEL_LOW
	 *       1       1         1    IOPORT_SENSE_LEVEL_HIGH
	 */
	switch(pin_sense) {
  4019fa:	7dfb      	ldrb	r3, [r7, #23]
  4019fc:	3b01      	subs	r3, #1
  4019fe:	2b03      	cmp	r3, #3
  401a00:	d82e      	bhi.n	401a60 <ioport_set_pin_sense_mode+0xac>
  401a02:	a201      	add	r2, pc, #4	; (adr r2, 401a08 <ioport_set_pin_sense_mode+0x54>)
  401a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  401a08:	00401a3d 	.word	0x00401a3d
  401a0c:	00401a4f 	.word	0x00401a4f
  401a10:	00401a19 	.word	0x00401a19
  401a14:	00401a2b 	.word	0x00401a2b
	case IOPORT_SENSE_LEVEL_LOW:
		base->PIO_LSR = mask;
  401a18:	68fb      	ldr	r3, [r7, #12]
  401a1a:	69ba      	ldr	r2, [r7, #24]
  401a1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_FELLSR = mask;
  401a20:	68fb      	ldr	r3, [r7, #12]
  401a22:	69ba      	ldr	r2, [r7, #24]
  401a24:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401a28:	e01f      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_LEVEL_HIGH:
		base->PIO_LSR = mask;
  401a2a:	68fb      	ldr	r3, [r7, #12]
  401a2c:	69ba      	ldr	r2, [r7, #24]
  401a2e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		base->PIO_REHLSR = mask;
  401a32:	68fb      	ldr	r3, [r7, #12]
  401a34:	69ba      	ldr	r2, [r7, #24]
  401a36:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401a3a:	e016      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
  401a3c:	68fb      	ldr	r3, [r7, #12]
  401a3e:	69ba      	ldr	r2, [r7, #24]
  401a40:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_FELLSR = mask;
  401a44:	68fb      	ldr	r3, [r7, #12]
  401a46:	69ba      	ldr	r2, [r7, #24]
  401a48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  401a4c:	e00d      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401a4e:	68fb      	ldr	r3, [r7, #12]
  401a50:	69ba      	ldr	r2, [r7, #24]
  401a52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401a56:	68fb      	ldr	r3, [r7, #12]
  401a58:	69ba      	ldr	r2, [r7, #24]
  401a5a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401a5e:	e004      	b.n	401a6a <ioport_set_pin_sense_mode+0xb6>
		break;
	default:
		base->PIO_AIMDR = mask;
  401a60:	68fb      	ldr	r3, [r7, #12]
  401a62:	69ba      	ldr	r2, [r7, #24]
  401a64:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	arch_ioport_set_pin_sense_mode(pin, pin_sense);
}
  401a68:	e003      	b.n	401a72 <ioport_set_pin_sense_mode+0xbe>
		return;
	}
	base->PIO_AIMER = mask;
  401a6a:	68fb      	ldr	r3, [r7, #12]
  401a6c:	69ba      	ldr	r2, [r7, #24]
  401a6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  401a72:	bf00      	nop
  401a74:	3734      	adds	r7, #52	; 0x34
  401a76:	46bd      	mov	sp, r7
  401a78:	f85d 7b04 	ldr.w	r7, [sp], #4
  401a7c:	4770      	bx	lr
  401a7e:	bf00      	nop
  401a80:	00200707 	.word	0x00200707

00401a84 <tcm_disable>:
/** \brief  TCM memory Disable

	The function enables TCM memories
 */
static inline void tcm_disable(void) 
{
  401a84:	b480      	push	{r7}
  401a86:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
  401a88:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401a8c:	f3bf 8f6f 	isb	sy

	__DSB();
	__ISB();
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401a90:	4a0c      	ldr	r2, [pc, #48]	; (401ac4 <tcm_disable+0x40>)
  401a92:	4b0c      	ldr	r3, [pc, #48]	; (401ac4 <tcm_disable+0x40>)
  401a94:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
  401a98:	f023 0301 	bic.w	r3, r3, #1
  401a9c:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  401aa0:	4a08      	ldr	r2, [pc, #32]	; (401ac4 <tcm_disable+0x40>)
  401aa2:	4b08      	ldr	r3, [pc, #32]	; (401ac4 <tcm_disable+0x40>)
  401aa4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
  401aa8:	f023 0301 	bic.w	r3, r3, #1
  401aac:	f8c2 3294 	str.w	r3, [r2, #660]	; 0x294
  __ASM volatile ("dsb");
  401ab0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401ab4:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
}
  401ab8:	bf00      	nop
  401aba:	46bd      	mov	sp, r7
  401abc:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ac0:	4770      	bx	lr
  401ac2:	bf00      	nop
  401ac4:	e000ed00 	.word	0xe000ed00

00401ac8 <board_init>:
#endif

void board_init(void)
{
  401ac8:	b580      	push	{r7, lr}
  401aca:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  401acc:	4b13      	ldr	r3, [pc, #76]	; (401b1c <board_init+0x54>)
  401ace:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  401ad2:	605a      	str	r2, [r3, #4]
	_setup_memory_region();
#endif

#ifdef CONF_BOARD_ENABLE_CACHE
	/* Enabling the Cache */
	SCB_EnableICache(); 
  401ad4:	4b12      	ldr	r3, [pc, #72]	; (401b20 <board_init+0x58>)
  401ad6:	4798      	blx	r3
	SCB_EnableDCache();
  401ad8:	4b12      	ldr	r3, [pc, #72]	; (401b24 <board_init+0x5c>)
  401ada:	4798      	blx	r3
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401adc:	4b12      	ldr	r3, [pc, #72]	; (401b28 <board_init+0x60>)
  401ade:	4a13      	ldr	r2, [pc, #76]	; (401b2c <board_init+0x64>)
  401ae0:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401ae2:	4b11      	ldr	r3, [pc, #68]	; (401b28 <board_init+0x60>)
  401ae4:	4a12      	ldr	r2, [pc, #72]	; (401b30 <board_init+0x68>)
  401ae6:	605a      	str	r2, [r3, #4]
					| EEFC_FCR_FARG(7));
	
	tcm_disable();
  401ae8:	4b12      	ldr	r3, [pc, #72]	; (401b34 <board_init+0x6c>)
  401aea:	4798      	blx	r3
#endif

	/* Initialize IOPORTs */
	ioport_init();
  401aec:	4b12      	ldr	r3, [pc, #72]	; (401b38 <board_init+0x70>)
  401aee:	4798      	blx	r3

	/* Configure the pins connected to LED as output and set their
	 * default initial state to high (LED off).
	 */
	ioport_set_pin_dir(LED0_GPIO, IOPORT_DIR_OUTPUT);
  401af0:	2101      	movs	r1, #1
  401af2:	2048      	movs	r0, #72	; 0x48
  401af4:	4b11      	ldr	r3, [pc, #68]	; (401b3c <board_init+0x74>)
  401af6:	4798      	blx	r3
	ioport_set_pin_level(LED0_GPIO, LED0_INACTIVE_LEVEL);
  401af8:	2101      	movs	r1, #1
  401afa:	2048      	movs	r0, #72	; 0x48
  401afc:	4b10      	ldr	r3, [pc, #64]	; (401b40 <board_init+0x78>)
  401afe:	4798      	blx	r3

	/* Configure Push Button pins */
	ioport_set_pin_input_mode(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS,
  401b00:	2100      	movs	r1, #0
  401b02:	200b      	movs	r0, #11
  401b04:	4b0d      	ldr	r3, [pc, #52]	; (401b3c <board_init+0x74>)
  401b06:	4798      	blx	r3
  401b08:	2188      	movs	r1, #136	; 0x88
  401b0a:	200b      	movs	r0, #11
  401b0c:	4b0d      	ldr	r3, [pc, #52]	; (401b44 <board_init+0x7c>)
  401b0e:	4798      	blx	r3
  401b10:	2102      	movs	r1, #2
  401b12:	200b      	movs	r0, #11
  401b14:	4b0c      	ldr	r3, [pc, #48]	; (401b48 <board_init+0x80>)
  401b16:	4798      	blx	r3
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);

#endif
}
  401b18:	bf00      	nop
  401b1a:	bd80      	pop	{r7, pc}
  401b1c:	400e1850 	.word	0x400e1850
  401b20:	00401681 	.word	0x00401681
  401b24:	004016b9 	.word	0x004016b9
  401b28:	400e0c00 	.word	0x400e0c00
  401b2c:	5a00080c 	.word	0x5a00080c
  401b30:	5a00070c 	.word	0x5a00070c
  401b34:	00401a85 	.word	0x00401a85
  401b38:	00401779 	.word	0x00401779
  401b3c:	004018c1 	.word	0x004018c1
  401b40:	00401949 	.word	0x00401949
  401b44:	004017a5 	.word	0x004017a5
  401b48:	004019b5 	.word	0x004019b5

00401b4c <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
  401b4c:	b480      	push	{r7}
  401b4e:	b085      	sub	sp, #20
  401b50:	af00      	add	r7, sp, #0
  401b52:	60f8      	str	r0, [r7, #12]
  401b54:	60b9      	str	r1, [r7, #8]
  401b56:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  401b58:	687b      	ldr	r3, [r7, #4]
  401b5a:	2b00      	cmp	r3, #0
  401b5c:	d003      	beq.n	401b66 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
  401b5e:	68fb      	ldr	r3, [r7, #12]
  401b60:	68ba      	ldr	r2, [r7, #8]
  401b62:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
  401b64:	e002      	b.n	401b6c <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
  401b66:	68fb      	ldr	r3, [r7, #12]
  401b68:	68ba      	ldr	r2, [r7, #8]
  401b6a:	661a      	str	r2, [r3, #96]	; 0x60
}
  401b6c:	bf00      	nop
  401b6e:	3714      	adds	r7, #20
  401b70:	46bd      	mov	sp, r7
  401b72:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b76:	4770      	bx	lr

00401b78 <pio_set>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
  401b78:	b480      	push	{r7}
  401b7a:	b083      	sub	sp, #12
  401b7c:	af00      	add	r7, sp, #0
  401b7e:	6078      	str	r0, [r7, #4]
  401b80:	6039      	str	r1, [r7, #0]
	p_pio->PIO_SODR = ul_mask;
  401b82:	687b      	ldr	r3, [r7, #4]
  401b84:	683a      	ldr	r2, [r7, #0]
  401b86:	631a      	str	r2, [r3, #48]	; 0x30
}
  401b88:	bf00      	nop
  401b8a:	370c      	adds	r7, #12
  401b8c:	46bd      	mov	sp, r7
  401b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401b92:	4770      	bx	lr

00401b94 <pio_clear>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
  401b94:	b480      	push	{r7}
  401b96:	b083      	sub	sp, #12
  401b98:	af00      	add	r7, sp, #0
  401b9a:	6078      	str	r0, [r7, #4]
  401b9c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_CODR = ul_mask;
  401b9e:	687b      	ldr	r3, [r7, #4]
  401ba0:	683a      	ldr	r2, [r7, #0]
  401ba2:	635a      	str	r2, [r3, #52]	; 0x34
}
  401ba4:	bf00      	nop
  401ba6:	370c      	adds	r7, #12
  401ba8:	46bd      	mov	sp, r7
  401baa:	f85d 7b04 	ldr.w	r7, [sp], #4
  401bae:	4770      	bx	lr

00401bb0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
  401bb0:	b480      	push	{r7}
  401bb2:	b087      	sub	sp, #28
  401bb4:	af00      	add	r7, sp, #0
  401bb6:	60f8      	str	r0, [r7, #12]
  401bb8:	60b9      	str	r1, [r7, #8]
  401bba:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401bbc:	68fb      	ldr	r3, [r7, #12]
  401bbe:	687a      	ldr	r2, [r7, #4]
  401bc0:	645a      	str	r2, [r3, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401bc2:	68bb      	ldr	r3, [r7, #8]
  401bc4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401bc8:	d04a      	beq.n	401c60 <pio_set_peripheral+0xb0>
  401bca:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401bce:	d808      	bhi.n	401be2 <pio_set_peripheral+0x32>
  401bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401bd4:	d016      	beq.n	401c04 <pio_set_peripheral+0x54>
  401bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401bda:	d02c      	beq.n	401c36 <pio_set_peripheral+0x86>
  401bdc:	2b00      	cmp	r3, #0
  401bde:	d069      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401be0:	e064      	b.n	401cac <pio_set_peripheral+0xfc>
  401be2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401be6:	d065      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401be8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401bec:	d803      	bhi.n	401bf6 <pio_set_peripheral+0x46>
  401bee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401bf2:	d04a      	beq.n	401c8a <pio_set_peripheral+0xda>
  401bf4:	e05a      	b.n	401cac <pio_set_peripheral+0xfc>
  401bf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401bfa:	d05b      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401bfc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401c00:	d058      	beq.n	401cb4 <pio_set_peripheral+0x104>
  401c02:	e053      	b.n	401cac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c04:	68fb      	ldr	r3, [r7, #12]
  401c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c08:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c0a:	68fb      	ldr	r3, [r7, #12]
  401c0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c0e:	687b      	ldr	r3, [r7, #4]
  401c10:	43d9      	mvns	r1, r3
  401c12:	697b      	ldr	r3, [r7, #20]
  401c14:	400b      	ands	r3, r1
  401c16:	401a      	ands	r2, r3
  401c18:	68fb      	ldr	r3, [r7, #12]
  401c1a:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c1c:	68fb      	ldr	r3, [r7, #12]
  401c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c20:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c22:	68fb      	ldr	r3, [r7, #12]
  401c24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401c26:	687b      	ldr	r3, [r7, #4]
  401c28:	43d9      	mvns	r1, r3
  401c2a:	697b      	ldr	r3, [r7, #20]
  401c2c:	400b      	ands	r3, r1
  401c2e:	401a      	ands	r2, r3
  401c30:	68fb      	ldr	r3, [r7, #12]
  401c32:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c34:	e03a      	b.n	401cac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c36:	68fb      	ldr	r3, [r7, #12]
  401c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c3a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c3c:	687a      	ldr	r2, [r7, #4]
  401c3e:	697b      	ldr	r3, [r7, #20]
  401c40:	431a      	orrs	r2, r3
  401c42:	68fb      	ldr	r3, [r7, #12]
  401c44:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c46:	68fb      	ldr	r3, [r7, #12]
  401c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c4a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401c4c:	68fb      	ldr	r3, [r7, #12]
  401c4e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  401c50:	687b      	ldr	r3, [r7, #4]
  401c52:	43d9      	mvns	r1, r3
  401c54:	697b      	ldr	r3, [r7, #20]
  401c56:	400b      	ands	r3, r1
  401c58:	401a      	ands	r2, r3
  401c5a:	68fb      	ldr	r3, [r7, #12]
  401c5c:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c5e:	e025      	b.n	401cac <pio_set_peripheral+0xfc>
#if (!SAMG)
	case PIO_PERIPH_C:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c60:	68fb      	ldr	r3, [r7, #12]
  401c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c64:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401c66:	68fb      	ldr	r3, [r7, #12]
  401c68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  401c6a:	687b      	ldr	r3, [r7, #4]
  401c6c:	43d9      	mvns	r1, r3
  401c6e:	697b      	ldr	r3, [r7, #20]
  401c70:	400b      	ands	r3, r1
  401c72:	401a      	ands	r2, r3
  401c74:	68fb      	ldr	r3, [r7, #12]
  401c76:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c78:	68fb      	ldr	r3, [r7, #12]
  401c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c7c:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401c7e:	687a      	ldr	r2, [r7, #4]
  401c80:	697b      	ldr	r3, [r7, #20]
  401c82:	431a      	orrs	r2, r3
  401c84:	68fb      	ldr	r3, [r7, #12]
  401c86:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401c88:	e010      	b.n	401cac <pio_set_peripheral+0xfc>
	case PIO_PERIPH_D:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401c8a:	68fb      	ldr	r3, [r7, #12]
  401c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
  401c8e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401c90:	687a      	ldr	r2, [r7, #4]
  401c92:	697b      	ldr	r3, [r7, #20]
  401c94:	431a      	orrs	r2, r3
  401c96:	68fb      	ldr	r3, [r7, #12]
  401c98:	671a      	str	r2, [r3, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401c9a:	68fb      	ldr	r3, [r7, #12]
  401c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  401c9e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401ca0:	687a      	ldr	r2, [r7, #4]
  401ca2:	697b      	ldr	r3, [r7, #20]
  401ca4:	431a      	orrs	r2, r3
  401ca6:	68fb      	ldr	r3, [r7, #12]
  401ca8:	675a      	str	r2, [r3, #116]	; 0x74
		break;
  401caa:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401cac:	68fb      	ldr	r3, [r7, #12]
  401cae:	687a      	ldr	r2, [r7, #4]
  401cb0:	605a      	str	r2, [r3, #4]
  401cb2:	e000      	b.n	401cb6 <pio_set_peripheral+0x106>
		return;
  401cb4:	bf00      	nop
}
  401cb6:	371c      	adds	r7, #28
  401cb8:	46bd      	mov	sp, r7
  401cba:	f85d 7b04 	ldr.w	r7, [sp], #4
  401cbe:	4770      	bx	lr

00401cc0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
  401cc0:	b580      	push	{r7, lr}
  401cc2:	b084      	sub	sp, #16
  401cc4:	af00      	add	r7, sp, #0
  401cc6:	60f8      	str	r0, [r7, #12]
  401cc8:	60b9      	str	r1, [r7, #8]
  401cca:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
  401ccc:	68b9      	ldr	r1, [r7, #8]
  401cce:	68f8      	ldr	r0, [r7, #12]
  401cd0:	4b19      	ldr	r3, [pc, #100]	; (401d38 <pio_set_input+0x78>)
  401cd2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
  401cd4:	687b      	ldr	r3, [r7, #4]
  401cd6:	f003 0301 	and.w	r3, r3, #1
  401cda:	461a      	mov	r2, r3
  401cdc:	68b9      	ldr	r1, [r7, #8]
  401cde:	68f8      	ldr	r0, [r7, #12]
  401ce0:	4b16      	ldr	r3, [pc, #88]	; (401d3c <pio_set_input+0x7c>)
  401ce2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  401ce4:	687b      	ldr	r3, [r7, #4]
  401ce6:	f003 030a 	and.w	r3, r3, #10
  401cea:	2b00      	cmp	r3, #0
  401cec:	d003      	beq.n	401cf6 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
  401cee:	68fb      	ldr	r3, [r7, #12]
  401cf0:	68ba      	ldr	r2, [r7, #8]
  401cf2:	621a      	str	r2, [r3, #32]
  401cf4:	e002      	b.n	401cfc <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
  401cf6:	68fb      	ldr	r3, [r7, #12]
  401cf8:	68ba      	ldr	r2, [r7, #8]
  401cfa:	625a      	str	r2, [r3, #36]	; 0x24
	}

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
  401cfc:	687b      	ldr	r3, [r7, #4]
  401cfe:	f003 0302 	and.w	r3, r3, #2
  401d02:	2b00      	cmp	r3, #0
  401d04:	d004      	beq.n	401d10 <pio_set_input+0x50>
		p_pio->PIO_IFSCDR = ul_mask;
  401d06:	68fb      	ldr	r3, [r7, #12]
  401d08:	68ba      	ldr	r2, [r7, #8]
  401d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  401d0e:	e008      	b.n	401d22 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
  401d10:	687b      	ldr	r3, [r7, #4]
  401d12:	f003 0308 	and.w	r3, r3, #8
  401d16:	2b00      	cmp	r3, #0
  401d18:	d003      	beq.n	401d22 <pio_set_input+0x62>
			p_pio->PIO_IFSCER = ul_mask;
  401d1a:	68fb      	ldr	r3, [r7, #12]
  401d1c:	68ba      	ldr	r2, [r7, #8]
  401d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
  401d22:	68fb      	ldr	r3, [r7, #12]
  401d24:	68ba      	ldr	r2, [r7, #8]
  401d26:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
  401d28:	68fb      	ldr	r3, [r7, #12]
  401d2a:	68ba      	ldr	r2, [r7, #8]
  401d2c:	601a      	str	r2, [r3, #0]
}
  401d2e:	bf00      	nop
  401d30:	3710      	adds	r7, #16
  401d32:	46bd      	mov	sp, r7
  401d34:	bd80      	pop	{r7, pc}
  401d36:	bf00      	nop
  401d38:	00401ef9 	.word	0x00401ef9
  401d3c:	00401b4d 	.word	0x00401b4d

00401d40 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
  401d40:	b580      	push	{r7, lr}
  401d42:	b084      	sub	sp, #16
  401d44:	af00      	add	r7, sp, #0
  401d46:	60f8      	str	r0, [r7, #12]
  401d48:	60b9      	str	r1, [r7, #8]
  401d4a:	607a      	str	r2, [r7, #4]
  401d4c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
  401d4e:	68b9      	ldr	r1, [r7, #8]
  401d50:	68f8      	ldr	r0, [r7, #12]
  401d52:	4b12      	ldr	r3, [pc, #72]	; (401d9c <pio_set_output+0x5c>)
  401d54:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
  401d56:	69ba      	ldr	r2, [r7, #24]
  401d58:	68b9      	ldr	r1, [r7, #8]
  401d5a:	68f8      	ldr	r0, [r7, #12]
  401d5c:	4b10      	ldr	r3, [pc, #64]	; (401da0 <pio_set_output+0x60>)
  401d5e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
  401d60:	683b      	ldr	r3, [r7, #0]
  401d62:	2b00      	cmp	r3, #0
  401d64:	d003      	beq.n	401d6e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
  401d66:	68fb      	ldr	r3, [r7, #12]
  401d68:	68ba      	ldr	r2, [r7, #8]
  401d6a:	651a      	str	r2, [r3, #80]	; 0x50
  401d6c:	e002      	b.n	401d74 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
  401d6e:	68fb      	ldr	r3, [r7, #12]
  401d70:	68ba      	ldr	r2, [r7, #8]
  401d72:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
  401d74:	687b      	ldr	r3, [r7, #4]
  401d76:	2b00      	cmp	r3, #0
  401d78:	d003      	beq.n	401d82 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
  401d7a:	68fb      	ldr	r3, [r7, #12]
  401d7c:	68ba      	ldr	r2, [r7, #8]
  401d7e:	631a      	str	r2, [r3, #48]	; 0x30
  401d80:	e002      	b.n	401d88 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
  401d82:	68fb      	ldr	r3, [r7, #12]
  401d84:	68ba      	ldr	r2, [r7, #8]
  401d86:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
  401d88:	68fb      	ldr	r3, [r7, #12]
  401d8a:	68ba      	ldr	r2, [r7, #8]
  401d8c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
  401d8e:	68fb      	ldr	r3, [r7, #12]
  401d90:	68ba      	ldr	r2, [r7, #8]
  401d92:	601a      	str	r2, [r3, #0]
}
  401d94:	bf00      	nop
  401d96:	3710      	adds	r7, #16
  401d98:	46bd      	mov	sp, r7
  401d9a:	bd80      	pop	{r7, pc}
  401d9c:	00401ef9 	.word	0x00401ef9
  401da0:	00401b4d 	.word	0x00401b4d

00401da4 <pio_configure>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask, const uint32_t ul_attribute)
{
  401da4:	b590      	push	{r4, r7, lr}
  401da6:	b087      	sub	sp, #28
  401da8:	af02      	add	r7, sp, #8
  401daa:	60f8      	str	r0, [r7, #12]
  401dac:	60b9      	str	r1, [r7, #8]
  401dae:	607a      	str	r2, [r7, #4]
  401db0:	603b      	str	r3, [r7, #0]
	/* Configure pins */
	switch (ul_type) {
  401db2:	68bb      	ldr	r3, [r7, #8]
  401db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401db8:	d016      	beq.n	401de8 <pio_configure+0x44>
  401dba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  401dbe:	d809      	bhi.n	401dd4 <pio_configure+0x30>
  401dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401dc4:	d010      	beq.n	401de8 <pio_configure+0x44>
  401dc6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401dca:	d00d      	beq.n	401de8 <pio_configure+0x44>
  401dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  401dd0:	d00a      	beq.n	401de8 <pio_configure+0x44>
  401dd2:	e03d      	b.n	401e50 <pio_configure+0xac>
  401dd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401dd8:	d01a      	beq.n	401e10 <pio_configure+0x6c>
  401dda:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401dde:	d017      	beq.n	401e10 <pio_configure+0x6c>
  401de0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401de4:	d00e      	beq.n	401e04 <pio_configure+0x60>
  401de6:	e033      	b.n	401e50 <pio_configure+0xac>
	case PIO_PERIPH_B:
#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	case PIO_PERIPH_C:
	case PIO_PERIPH_D:
#endif
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  401de8:	687a      	ldr	r2, [r7, #4]
  401dea:	68b9      	ldr	r1, [r7, #8]
  401dec:	68f8      	ldr	r0, [r7, #12]
  401dee:	4b1c      	ldr	r3, [pc, #112]	; (401e60 <pio_configure+0xbc>)
  401df0:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_attribute & PIO_PULLUP));
  401df2:	683b      	ldr	r3, [r7, #0]
  401df4:	f003 0301 	and.w	r3, r3, #1
  401df8:	461a      	mov	r2, r3
  401dfa:	6879      	ldr	r1, [r7, #4]
  401dfc:	68f8      	ldr	r0, [r7, #12]
  401dfe:	4b19      	ldr	r3, [pc, #100]	; (401e64 <pio_configure+0xc0>)
  401e00:	4798      	blx	r3
		break;
  401e02:	e027      	b.n	401e54 <pio_configure+0xb0>

	case PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401e04:	683a      	ldr	r2, [r7, #0]
  401e06:	6879      	ldr	r1, [r7, #4]
  401e08:	68f8      	ldr	r0, [r7, #12]
  401e0a:	4b17      	ldr	r3, [pc, #92]	; (401e68 <pio_configure+0xc4>)
  401e0c:	4798      	blx	r3
		break;
  401e0e:	e021      	b.n	401e54 <pio_configure+0xb0>

	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401e10:	68bb      	ldr	r3, [r7, #8]
  401e12:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  401e16:	bf0c      	ite	eq
  401e18:	2301      	moveq	r3, #1
  401e1a:	2300      	movne	r3, #0
  401e1c:	b2db      	uxtb	r3, r3
  401e1e:	461a      	mov	r2, r3
				(ul_attribute & PIO_OPENDRAIN) ? 1 : 0,
  401e20:	683b      	ldr	r3, [r7, #0]
  401e22:	f003 0304 	and.w	r3, r3, #4
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401e26:	2b00      	cmp	r3, #0
  401e28:	bf14      	ite	ne
  401e2a:	2301      	movne	r3, #1
  401e2c:	2300      	moveq	r3, #0
  401e2e:	b2db      	uxtb	r3, r3
  401e30:	4619      	mov	r1, r3
				(ul_attribute & PIO_PULLUP) ? 1 : 0);
  401e32:	683b      	ldr	r3, [r7, #0]
  401e34:	f003 0301 	and.w	r3, r3, #1
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401e38:	2b00      	cmp	r3, #0
  401e3a:	bf14      	ite	ne
  401e3c:	2301      	movne	r3, #1
  401e3e:	2300      	moveq	r3, #0
  401e40:	b2db      	uxtb	r3, r3
  401e42:	9300      	str	r3, [sp, #0]
  401e44:	460b      	mov	r3, r1
  401e46:	6879      	ldr	r1, [r7, #4]
  401e48:	68f8      	ldr	r0, [r7, #12]
  401e4a:	4c08      	ldr	r4, [pc, #32]	; (401e6c <pio_configure+0xc8>)
  401e4c:	47a0      	blx	r4
		break;
  401e4e:	e001      	b.n	401e54 <pio_configure+0xb0>

	default:
		return 0;
  401e50:	2300      	movs	r3, #0
  401e52:	e000      	b.n	401e56 <pio_configure+0xb2>
	}

	return 1;
  401e54:	2301      	movs	r3, #1
}
  401e56:	4618      	mov	r0, r3
  401e58:	3714      	adds	r7, #20
  401e5a:	46bd      	mov	sp, r7
  401e5c:	bd90      	pop	{r4, r7, pc}
  401e5e:	bf00      	nop
  401e60:	00401bb1 	.word	0x00401bb1
  401e64:	00401b4d 	.word	0x00401b4d
  401e68:	00401cc1 	.word	0x00401cc1
  401e6c:	00401d41 	.word	0x00401d41

00401e70 <pio_configure_interrupt>:
 * \param ul_mask Interrupt source bit map.
 * \param ul_attr Interrupt source attributes.
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
  401e70:	b480      	push	{r7}
  401e72:	b085      	sub	sp, #20
  401e74:	af00      	add	r7, sp, #0
  401e76:	60f8      	str	r0, [r7, #12]
  401e78:	60b9      	str	r1, [r7, #8]
  401e7a:	607a      	str	r2, [r7, #4]
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
  401e7c:	687b      	ldr	r3, [r7, #4]
  401e7e:	f003 0310 	and.w	r3, r3, #16
  401e82:	2b00      	cmp	r3, #0
  401e84:	d020      	beq.n	401ec8 <pio_configure_interrupt+0x58>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;
  401e86:	68fb      	ldr	r3, [r7, #12]
  401e88:	68ba      	ldr	r2, [r7, #8]
  401e8a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
  401e8e:	687b      	ldr	r3, [r7, #4]
  401e90:	f003 0320 	and.w	r3, r3, #32
  401e94:	2b00      	cmp	r3, #0
  401e96:	d004      	beq.n	401ea2 <pio_configure_interrupt+0x32>
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
  401e98:	68fb      	ldr	r3, [r7, #12]
  401e9a:	68ba      	ldr	r2, [r7, #8]
  401e9c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  401ea0:	e003      	b.n	401eaa <pio_configure_interrupt+0x3a>
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
  401ea2:	68fb      	ldr	r3, [r7, #12]
  401ea4:	68ba      	ldr	r2, [r7, #8]
  401ea6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
  401eaa:	687b      	ldr	r3, [r7, #4]
  401eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  401eb0:	2b00      	cmp	r3, #0
  401eb2:	d004      	beq.n	401ebe <pio_configure_interrupt+0x4e>
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
  401eb4:	68fb      	ldr	r3, [r7, #12]
  401eb6:	68ba      	ldr	r2, [r7, #8]
  401eb8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
	}
}
  401ebc:	e008      	b.n	401ed0 <pio_configure_interrupt+0x60>
			p_pio->PIO_LSR = ul_mask;
  401ebe:	68fb      	ldr	r3, [r7, #12]
  401ec0:	68ba      	ldr	r2, [r7, #8]
  401ec2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
  401ec6:	e003      	b.n	401ed0 <pio_configure_interrupt+0x60>
		p_pio->PIO_AIMDR = ul_mask;
  401ec8:	68fb      	ldr	r3, [r7, #12]
  401eca:	68ba      	ldr	r2, [r7, #8]
  401ecc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
  401ed0:	bf00      	nop
  401ed2:	3714      	adds	r7, #20
  401ed4:	46bd      	mov	sp, r7
  401ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
  401eda:	4770      	bx	lr

00401edc <pio_enable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401edc:	b480      	push	{r7}
  401ede:	b083      	sub	sp, #12
  401ee0:	af00      	add	r7, sp, #0
  401ee2:	6078      	str	r0, [r7, #4]
  401ee4:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IER = ul_mask;
  401ee6:	687b      	ldr	r3, [r7, #4]
  401ee8:	683a      	ldr	r2, [r7, #0]
  401eea:	641a      	str	r2, [r3, #64]	; 0x40
}
  401eec:	bf00      	nop
  401eee:	370c      	adds	r7, #12
  401ef0:	46bd      	mov	sp, r7
  401ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
  401ef6:	4770      	bx	lr

00401ef8 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
  401ef8:	b480      	push	{r7}
  401efa:	b083      	sub	sp, #12
  401efc:	af00      	add	r7, sp, #0
  401efe:	6078      	str	r0, [r7, #4]
  401f00:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
  401f02:	687b      	ldr	r3, [r7, #4]
  401f04:	683a      	ldr	r2, [r7, #0]
  401f06:	645a      	str	r2, [r3, #68]	; 0x44
}
  401f08:	bf00      	nop
  401f0a:	370c      	adds	r7, #12
  401f0c:	46bd      	mov	sp, r7
  401f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f12:	4770      	bx	lr

00401f14 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
  401f14:	b480      	push	{r7}
  401f16:	b083      	sub	sp, #12
  401f18:	af00      	add	r7, sp, #0
  401f1a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
  401f1c:	687b      	ldr	r3, [r7, #4]
  401f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
  401f20:	4618      	mov	r0, r3
  401f22:	370c      	adds	r7, #12
  401f24:	46bd      	mov	sp, r7
  401f26:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f2a:	4770      	bx	lr

00401f2c <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
  401f2c:	b480      	push	{r7}
  401f2e:	b083      	sub	sp, #12
  401f30:	af00      	add	r7, sp, #0
  401f32:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
  401f34:	687b      	ldr	r3, [r7, #4]
  401f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
  401f38:	4618      	mov	r0, r3
  401f3a:	370c      	adds	r7, #12
  401f3c:	46bd      	mov	sp, r7
  401f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
  401f42:	4770      	bx	lr

00401f44 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401f44:	b580      	push	{r7, lr}
  401f46:	b084      	sub	sp, #16
  401f48:	af00      	add	r7, sp, #0
  401f4a:	6078      	str	r0, [r7, #4]
  401f4c:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  401f4e:	6878      	ldr	r0, [r7, #4]
  401f50:	4b26      	ldr	r3, [pc, #152]	; (401fec <pio_handler_process+0xa8>)
  401f52:	4798      	blx	r3
  401f54:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
  401f56:	6878      	ldr	r0, [r7, #4]
  401f58:	4b25      	ldr	r3, [pc, #148]	; (401ff0 <pio_handler_process+0xac>)
  401f5a:	4798      	blx	r3
  401f5c:	4602      	mov	r2, r0
  401f5e:	68fb      	ldr	r3, [r7, #12]
  401f60:	4013      	ands	r3, r2
  401f62:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
  401f64:	68fb      	ldr	r3, [r7, #12]
  401f66:	2b00      	cmp	r3, #0
  401f68:	d03c      	beq.n	401fe4 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
  401f6a:	2300      	movs	r3, #0
  401f6c:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
  401f6e:	e034      	b.n	401fda <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
  401f70:	4a20      	ldr	r2, [pc, #128]	; (401ff4 <pio_handler_process+0xb0>)
  401f72:	68bb      	ldr	r3, [r7, #8]
  401f74:	011b      	lsls	r3, r3, #4
  401f76:	4413      	add	r3, r2
  401f78:	681a      	ldr	r2, [r3, #0]
  401f7a:	683b      	ldr	r3, [r7, #0]
  401f7c:	429a      	cmp	r2, r3
  401f7e:	d126      	bne.n	401fce <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401f80:	4a1c      	ldr	r2, [pc, #112]	; (401ff4 <pio_handler_process+0xb0>)
  401f82:	68bb      	ldr	r3, [r7, #8]
  401f84:	011b      	lsls	r3, r3, #4
  401f86:	4413      	add	r3, r2
  401f88:	3304      	adds	r3, #4
  401f8a:	681a      	ldr	r2, [r3, #0]
  401f8c:	68fb      	ldr	r3, [r7, #12]
  401f8e:	4013      	ands	r3, r2
  401f90:	2b00      	cmp	r3, #0
  401f92:	d01c      	beq.n	401fce <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401f94:	4a17      	ldr	r2, [pc, #92]	; (401ff4 <pio_handler_process+0xb0>)
  401f96:	68bb      	ldr	r3, [r7, #8]
  401f98:	011b      	lsls	r3, r3, #4
  401f9a:	4413      	add	r3, r2
  401f9c:	330c      	adds	r3, #12
  401f9e:	681b      	ldr	r3, [r3, #0]
  401fa0:	4914      	ldr	r1, [pc, #80]	; (401ff4 <pio_handler_process+0xb0>)
  401fa2:	68ba      	ldr	r2, [r7, #8]
  401fa4:	0112      	lsls	r2, r2, #4
  401fa6:	440a      	add	r2, r1
  401fa8:	6810      	ldr	r0, [r2, #0]
  401faa:	4912      	ldr	r1, [pc, #72]	; (401ff4 <pio_handler_process+0xb0>)
  401fac:	68ba      	ldr	r2, [r7, #8]
  401fae:	0112      	lsls	r2, r2, #4
  401fb0:	440a      	add	r2, r1
  401fb2:	3204      	adds	r2, #4
  401fb4:	6812      	ldr	r2, [r2, #0]
  401fb6:	4611      	mov	r1, r2
  401fb8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
  401fba:	4a0e      	ldr	r2, [pc, #56]	; (401ff4 <pio_handler_process+0xb0>)
  401fbc:	68bb      	ldr	r3, [r7, #8]
  401fbe:	011b      	lsls	r3, r3, #4
  401fc0:	4413      	add	r3, r2
  401fc2:	3304      	adds	r3, #4
  401fc4:	681b      	ldr	r3, [r3, #0]
  401fc6:	43db      	mvns	r3, r3
  401fc8:	68fa      	ldr	r2, [r7, #12]
  401fca:	4013      	ands	r3, r2
  401fcc:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
  401fce:	68bb      	ldr	r3, [r7, #8]
  401fd0:	3301      	adds	r3, #1
  401fd2:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
  401fd4:	68bb      	ldr	r3, [r7, #8]
  401fd6:	2b06      	cmp	r3, #6
  401fd8:	d803      	bhi.n	401fe2 <pio_handler_process+0x9e>
		while (status != 0) {
  401fda:	68fb      	ldr	r3, [r7, #12]
  401fdc:	2b00      	cmp	r3, #0
  401fde:	d1c7      	bne.n	401f70 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
  401fe0:	e000      	b.n	401fe4 <pio_handler_process+0xa0>
				break;
  401fe2:	bf00      	nop
}
  401fe4:	bf00      	nop
  401fe6:	3710      	adds	r7, #16
  401fe8:	46bd      	mov	sp, r7
  401fea:	bd80      	pop	{r7, pc}
  401fec:	00401f15 	.word	0x00401f15
  401ff0:	00401f2d 	.word	0x00401f2d
  401ff4:	204015c8 	.word	0x204015c8

00401ff8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  401ff8:	b580      	push	{r7, lr}
  401ffa:	b086      	sub	sp, #24
  401ffc:	af00      	add	r7, sp, #0
  401ffe:	60f8      	str	r0, [r7, #12]
  402000:	60b9      	str	r1, [r7, #8]
  402002:	607a      	str	r2, [r7, #4]
  402004:	603b      	str	r3, [r7, #0]
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  402006:	4b21      	ldr	r3, [pc, #132]	; (40208c <pio_handler_set+0x94>)
  402008:	681b      	ldr	r3, [r3, #0]
  40200a:	2b06      	cmp	r3, #6
  40200c:	d901      	bls.n	402012 <pio_handler_set+0x1a>
		return 1;
  40200e:	2301      	movs	r3, #1
  402010:	e038      	b.n	402084 <pio_handler_set+0x8c>

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402012:	2300      	movs	r3, #0
  402014:	75fb      	strb	r3, [r7, #23]
  402016:	e011      	b.n	40203c <pio_handler_set+0x44>
		pSource = &(gs_interrupt_sources[i]);
  402018:	7dfb      	ldrb	r3, [r7, #23]
  40201a:	011b      	lsls	r3, r3, #4
  40201c:	4a1c      	ldr	r2, [pc, #112]	; (402090 <pio_handler_set+0x98>)
  40201e:	4413      	add	r3, r2
  402020:	613b      	str	r3, [r7, #16]
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  402022:	693b      	ldr	r3, [r7, #16]
  402024:	681a      	ldr	r2, [r3, #0]
  402026:	68bb      	ldr	r3, [r7, #8]
  402028:	429a      	cmp	r2, r3
  40202a:	d104      	bne.n	402036 <pio_handler_set+0x3e>
  40202c:	693b      	ldr	r3, [r7, #16]
  40202e:	685a      	ldr	r2, [r3, #4]
  402030:	687b      	ldr	r3, [r7, #4]
  402032:	429a      	cmp	r2, r3
  402034:	d008      	beq.n	402048 <pio_handler_set+0x50>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  402036:	7dfb      	ldrb	r3, [r7, #23]
  402038:	3301      	adds	r3, #1
  40203a:	75fb      	strb	r3, [r7, #23]
  40203c:	7dfa      	ldrb	r2, [r7, #23]
  40203e:	4b13      	ldr	r3, [pc, #76]	; (40208c <pio_handler_set+0x94>)
  402040:	681b      	ldr	r3, [r3, #0]
  402042:	429a      	cmp	r2, r3
  402044:	d9e8      	bls.n	402018 <pio_handler_set+0x20>
  402046:	e000      	b.n	40204a <pio_handler_set+0x52>
			break;
  402048:	bf00      	nop
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  40204a:	693b      	ldr	r3, [r7, #16]
  40204c:	68ba      	ldr	r2, [r7, #8]
  40204e:	601a      	str	r2, [r3, #0]
	pSource->mask = ul_mask;
  402050:	693b      	ldr	r3, [r7, #16]
  402052:	687a      	ldr	r2, [r7, #4]
  402054:	605a      	str	r2, [r3, #4]
	pSource->attr = ul_attr;
  402056:	693b      	ldr	r3, [r7, #16]
  402058:	683a      	ldr	r2, [r7, #0]
  40205a:	609a      	str	r2, [r3, #8]
	pSource->handler = p_handler;
  40205c:	693b      	ldr	r3, [r7, #16]
  40205e:	6a3a      	ldr	r2, [r7, #32]
  402060:	60da      	str	r2, [r3, #12]
	if (i == gs_ul_nb_sources + 1) {
  402062:	7dfa      	ldrb	r2, [r7, #23]
  402064:	4b09      	ldr	r3, [pc, #36]	; (40208c <pio_handler_set+0x94>)
  402066:	681b      	ldr	r3, [r3, #0]
  402068:	3301      	adds	r3, #1
  40206a:	429a      	cmp	r2, r3
  40206c:	d104      	bne.n	402078 <pio_handler_set+0x80>
		gs_ul_nb_sources++;
  40206e:	4b07      	ldr	r3, [pc, #28]	; (40208c <pio_handler_set+0x94>)
  402070:	681b      	ldr	r3, [r3, #0]
  402072:	3301      	adds	r3, #1
  402074:	4a05      	ldr	r2, [pc, #20]	; (40208c <pio_handler_set+0x94>)
  402076:	6013      	str	r3, [r2, #0]
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  402078:	683a      	ldr	r2, [r7, #0]
  40207a:	6879      	ldr	r1, [r7, #4]
  40207c:	68f8      	ldr	r0, [r7, #12]
  40207e:	4b05      	ldr	r3, [pc, #20]	; (402094 <pio_handler_set+0x9c>)
  402080:	4798      	blx	r3

	return 0;
  402082:	2300      	movs	r3, #0
}
  402084:	4618      	mov	r0, r3
  402086:	3718      	adds	r7, #24
  402088:	46bd      	mov	sp, r7
  40208a:	bd80      	pop	{r7, pc}
  40208c:	20401638 	.word	0x20401638
  402090:	204015c8 	.word	0x204015c8
  402094:	00401e71 	.word	0x00401e71

00402098 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  402098:	b580      	push	{r7, lr}
  40209a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
  40209c:	210a      	movs	r1, #10
  40209e:	4802      	ldr	r0, [pc, #8]	; (4020a8 <PIOA_Handler+0x10>)
  4020a0:	4b02      	ldr	r3, [pc, #8]	; (4020ac <PIOA_Handler+0x14>)
  4020a2:	4798      	blx	r3
}
  4020a4:	bf00      	nop
  4020a6:	bd80      	pop	{r7, pc}
  4020a8:	400e0e00 	.word	0x400e0e00
  4020ac:	00401f45 	.word	0x00401f45

004020b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4020b0:	b580      	push	{r7, lr}
  4020b2:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
  4020b4:	210b      	movs	r1, #11
  4020b6:	4802      	ldr	r0, [pc, #8]	; (4020c0 <PIOB_Handler+0x10>)
  4020b8:	4b02      	ldr	r3, [pc, #8]	; (4020c4 <PIOB_Handler+0x14>)
  4020ba:	4798      	blx	r3
}
  4020bc:	bf00      	nop
  4020be:	bd80      	pop	{r7, pc}
  4020c0:	400e1000 	.word	0x400e1000
  4020c4:	00401f45 	.word	0x00401f45

004020c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4020c8:	b580      	push	{r7, lr}
  4020ca:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
  4020cc:	210c      	movs	r1, #12
  4020ce:	4802      	ldr	r0, [pc, #8]	; (4020d8 <PIOC_Handler+0x10>)
  4020d0:	4b02      	ldr	r3, [pc, #8]	; (4020dc <PIOC_Handler+0x14>)
  4020d2:	4798      	blx	r3
}
  4020d4:	bf00      	nop
  4020d6:	bd80      	pop	{r7, pc}
  4020d8:	400e1200 	.word	0x400e1200
  4020dc:	00401f45 	.word	0x00401f45

004020e0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4020e0:	b580      	push	{r7, lr}
  4020e2:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
  4020e4:	2110      	movs	r1, #16
  4020e6:	4802      	ldr	r0, [pc, #8]	; (4020f0 <PIOD_Handler+0x10>)
  4020e8:	4b02      	ldr	r3, [pc, #8]	; (4020f4 <PIOD_Handler+0x14>)
  4020ea:	4798      	blx	r3
}
  4020ec:	bf00      	nop
  4020ee:	bd80      	pop	{r7, pc}
  4020f0:	400e1400 	.word	0x400e1400
  4020f4:	00401f45 	.word	0x00401f45

004020f8 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4020f8:	b580      	push	{r7, lr}
  4020fa:	af00      	add	r7, sp, #0
	pio_handler_process(PIOE, ID_PIOE);
  4020fc:	2111      	movs	r1, #17
  4020fe:	4802      	ldr	r0, [pc, #8]	; (402108 <PIOE_Handler+0x10>)
  402100:	4b02      	ldr	r3, [pc, #8]	; (40210c <PIOE_Handler+0x14>)
  402102:	4798      	blx	r3
}
  402104:	bf00      	nop
  402106:	bd80      	pop	{r7, pc}
  402108:	400e1600 	.word	0x400e1600
  40210c:	00401f45 	.word	0x00401f45

00402110 <pmc_mck_set_division>:
 * \brief Set the division of the MCK.
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
  402110:	b480      	push	{r7}
  402112:	b083      	sub	sp, #12
  402114:	af00      	add	r7, sp, #0
  402116:	6078      	str	r0, [r7, #4]
	switch (ul_div) {
  402118:	687b      	ldr	r3, [r7, #4]
  40211a:	3b01      	subs	r3, #1
  40211c:	2b03      	cmp	r3, #3
  40211e:	d81a      	bhi.n	402156 <pmc_mck_set_division+0x46>
  402120:	a201      	add	r2, pc, #4	; (adr r2, 402128 <pmc_mck_set_division+0x18>)
  402122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  402126:	bf00      	nop
  402128:	00402139 	.word	0x00402139
  40212c:	0040213f 	.word	0x0040213f
  402130:	00402147 	.word	0x00402147
  402134:	0040214f 	.word	0x0040214f
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402138:	2300      	movs	r3, #0
  40213a:	607b      	str	r3, [r7, #4]
			break;
  40213c:	e00e      	b.n	40215c <pmc_mck_set_division+0x4c>
		case 2:
			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
  40213e:	f44f 7380 	mov.w	r3, #256	; 0x100
  402142:	607b      	str	r3, [r7, #4]
			break;
  402144:	e00a      	b.n	40215c <pmc_mck_set_division+0x4c>
		case 3:
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  402146:	f44f 7340 	mov.w	r3, #768	; 0x300
  40214a:	607b      	str	r3, [r7, #4]
			break;
  40214c:	e006      	b.n	40215c <pmc_mck_set_division+0x4c>
		case 4:
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  40214e:	f44f 7300 	mov.w	r3, #512	; 0x200
  402152:	607b      	str	r3, [r7, #4]
			break;
  402154:	e002      	b.n	40215c <pmc_mck_set_division+0x4c>
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  402156:	2300      	movs	r3, #0
  402158:	607b      	str	r3, [r7, #4]
			break;
  40215a:	bf00      	nop
	}
	PMC->PMC_MCKR =
  40215c:	490a      	ldr	r1, [pc, #40]	; (402188 <pmc_mck_set_division+0x78>)
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40215e:	4b0a      	ldr	r3, [pc, #40]	; (402188 <pmc_mck_set_division+0x78>)
  402160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  402166:	687b      	ldr	r3, [r7, #4]
  402168:	4313      	orrs	r3, r2
	PMC->PMC_MCKR =
  40216a:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40216c:	bf00      	nop
  40216e:	4b06      	ldr	r3, [pc, #24]	; (402188 <pmc_mck_set_division+0x78>)
  402170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402172:	f003 0308 	and.w	r3, r3, #8
  402176:	2b00      	cmp	r3, #0
  402178:	d0f9      	beq.n	40216e <pmc_mck_set_division+0x5e>
}
  40217a:	bf00      	nop
  40217c:	370c      	adds	r7, #12
  40217e:	46bd      	mov	sp, r7
  402180:	f85d 7b04 	ldr.w	r7, [sp], #4
  402184:	4770      	bx	lr
  402186:	bf00      	nop
  402188:	400e0600 	.word	0x400e0600

0040218c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
  40218c:	b480      	push	{r7}
  40218e:	b085      	sub	sp, #20
  402190:	af00      	add	r7, sp, #0
  402192:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  402194:	491d      	ldr	r1, [pc, #116]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  402196:	4b1d      	ldr	r3, [pc, #116]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  402198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40219a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
  40219e:	687b      	ldr	r3, [r7, #4]
  4021a0:	4313      	orrs	r3, r2
  4021a2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4021a8:	60fb      	str	r3, [r7, #12]
  4021aa:	e007      	b.n	4021bc <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4021ac:	68fb      	ldr	r3, [r7, #12]
  4021ae:	2b00      	cmp	r3, #0
  4021b0:	d101      	bne.n	4021b6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
  4021b2:	2301      	movs	r3, #1
  4021b4:	e023      	b.n	4021fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4021b6:	68fb      	ldr	r3, [r7, #12]
  4021b8:	3b01      	subs	r3, #1
  4021ba:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021bc:	4b13      	ldr	r3, [pc, #76]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021c0:	f003 0308 	and.w	r3, r3, #8
  4021c4:	2b00      	cmp	r3, #0
  4021c6:	d0f1      	beq.n	4021ac <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4021c8:	4a10      	ldr	r2, [pc, #64]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021ca:	4b10      	ldr	r3, [pc, #64]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4021ce:	f023 0303 	bic.w	r3, r3, #3
  4021d2:	f043 0302 	orr.w	r3, r3, #2
  4021d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4021dc:	60fb      	str	r3, [r7, #12]
  4021de:	e007      	b.n	4021f0 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4021e0:	68fb      	ldr	r3, [r7, #12]
  4021e2:	2b00      	cmp	r3, #0
  4021e4:	d101      	bne.n	4021ea <pmc_switch_mck_to_pllack+0x5e>
			return 1;
  4021e6:	2301      	movs	r3, #1
  4021e8:	e009      	b.n	4021fe <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
  4021ea:	68fb      	ldr	r3, [r7, #12]
  4021ec:	3b01      	subs	r3, #1
  4021ee:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4021f0:	4b06      	ldr	r3, [pc, #24]	; (40220c <pmc_switch_mck_to_pllack+0x80>)
  4021f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4021f4:	f003 0308 	and.w	r3, r3, #8
  4021f8:	2b00      	cmp	r3, #0
  4021fa:	d0f1      	beq.n	4021e0 <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
  4021fc:	2300      	movs	r3, #0
}
  4021fe:	4618      	mov	r0, r3
  402200:	3714      	adds	r7, #20
  402202:	46bd      	mov	sp, r7
  402204:	f85d 7b04 	ldr.w	r7, [sp], #4
  402208:	4770      	bx	lr
  40220a:	bf00      	nop
  40220c:	400e0600 	.word	0x400e0600

00402210 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
  402210:	b480      	push	{r7}
  402212:	b083      	sub	sp, #12
  402214:	af00      	add	r7, sp, #0
  402216:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
  402218:	687b      	ldr	r3, [r7, #4]
  40221a:	2b01      	cmp	r3, #1
  40221c:	d105      	bne.n	40222a <pmc_switch_sclk_to_32kxtal+0x1a>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
  40221e:	4907      	ldr	r1, [pc, #28]	; (40223c <pmc_switch_sclk_to_32kxtal+0x2c>)
  402220:	4b06      	ldr	r3, [pc, #24]	; (40223c <pmc_switch_sclk_to_32kxtal+0x2c>)
  402222:	689a      	ldr	r2, [r3, #8]
  402224:	4b06      	ldr	r3, [pc, #24]	; (402240 <pmc_switch_sclk_to_32kxtal+0x30>)
  402226:	4313      	orrs	r3, r2
  402228:	608b      	str	r3, [r1, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
  40222a:	4b04      	ldr	r3, [pc, #16]	; (40223c <pmc_switch_sclk_to_32kxtal+0x2c>)
  40222c:	4a05      	ldr	r2, [pc, #20]	; (402244 <pmc_switch_sclk_to_32kxtal+0x34>)
  40222e:	601a      	str	r2, [r3, #0]
}
  402230:	bf00      	nop
  402232:	370c      	adds	r7, #12
  402234:	46bd      	mov	sp, r7
  402236:	f85d 7b04 	ldr.w	r7, [sp], #4
  40223a:	4770      	bx	lr
  40223c:	400e1810 	.word	0x400e1810
  402240:	a5100000 	.word	0xa5100000
  402244:	a5000008 	.word	0xa5000008

00402248 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
  402248:	b480      	push	{r7}
  40224a:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
  40224c:	4b09      	ldr	r3, [pc, #36]	; (402274 <pmc_osc_is_ready_32kxtal+0x2c>)
  40224e:	695b      	ldr	r3, [r3, #20]
  402250:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
  402254:	2b00      	cmp	r3, #0
  402256:	d007      	beq.n	402268 <pmc_osc_is_ready_32kxtal+0x20>
  402258:	4b07      	ldr	r3, [pc, #28]	; (402278 <pmc_osc_is_ready_32kxtal+0x30>)
  40225a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  402260:	2b00      	cmp	r3, #0
  402262:	d001      	beq.n	402268 <pmc_osc_is_ready_32kxtal+0x20>
  402264:	2301      	movs	r3, #1
  402266:	e000      	b.n	40226a <pmc_osc_is_ready_32kxtal+0x22>
  402268:	2300      	movs	r3, #0
}
  40226a:	4618      	mov	r0, r3
  40226c:	46bd      	mov	sp, r7
  40226e:	f85d 7b04 	ldr.w	r7, [sp], #4
  402272:	4770      	bx	lr
  402274:	400e1810 	.word	0x400e1810
  402278:	400e0600 	.word	0x400e0600

0040227c <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
  40227c:	b480      	push	{r7}
  40227e:	b083      	sub	sp, #12
  402280:	af00      	add	r7, sp, #0
  402282:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
  402284:	4915      	ldr	r1, [pc, #84]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  402286:	4b15      	ldr	r3, [pc, #84]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  402288:	6a1a      	ldr	r2, [r3, #32]
  40228a:	4b15      	ldr	r3, [pc, #84]	; (4022e0 <pmc_switch_mainck_to_fastrc+0x64>)
  40228c:	4313      	orrs	r3, r2
  40228e:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  402290:	bf00      	nop
  402292:	4b12      	ldr	r3, [pc, #72]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  402294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  402296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  40229a:	2b00      	cmp	r3, #0
  40229c:	d0f9      	beq.n	402292 <pmc_switch_mainck_to_fastrc+0x16>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  40229e:	490f      	ldr	r1, [pc, #60]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022a0:	4b0e      	ldr	r3, [pc, #56]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022a2:	6a1a      	ldr	r2, [r3, #32]
  4022a4:	4b0f      	ldr	r3, [pc, #60]	; (4022e4 <pmc_switch_mainck_to_fastrc+0x68>)
  4022a6:	4013      	ands	r3, r2
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
  4022a8:	687a      	ldr	r2, [r7, #4]
  4022aa:	4313      	orrs	r3, r2
  4022ac:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
  4022b0:	620b      	str	r3, [r1, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  4022b2:	bf00      	nop
  4022b4:	4b09      	ldr	r3, [pc, #36]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
  4022bc:	2b00      	cmp	r3, #0
  4022be:	d0f9      	beq.n	4022b4 <pmc_switch_mainck_to_fastrc+0x38>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  4022c0:	4906      	ldr	r1, [pc, #24]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022c2:	4b06      	ldr	r3, [pc, #24]	; (4022dc <pmc_switch_mainck_to_fastrc+0x60>)
  4022c4:	6a1a      	ldr	r2, [r3, #32]
  4022c6:	4b08      	ldr	r3, [pc, #32]	; (4022e8 <pmc_switch_mainck_to_fastrc+0x6c>)
  4022c8:	4013      	ands	r3, r2
  4022ca:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  4022ce:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD;
}
  4022d0:	bf00      	nop
  4022d2:	370c      	adds	r7, #12
  4022d4:	46bd      	mov	sp, r7
  4022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4022da:	4770      	bx	lr
  4022dc:	400e0600 	.word	0x400e0600
  4022e0:	00370008 	.word	0x00370008
  4022e4:	ffc8ff8f 	.word	0xffc8ff8f
  4022e8:	fec8ffff 	.word	0xfec8ffff

004022ec <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
  4022ec:	b480      	push	{r7}
  4022ee:	b083      	sub	sp, #12
  4022f0:	af00      	add	r7, sp, #0
  4022f2:	6078      	str	r0, [r7, #4]
  4022f4:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4022f6:	687b      	ldr	r3, [r7, #4]
  4022f8:	2b00      	cmp	r3, #0
  4022fa:	d008      	beq.n	40230e <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4022fc:	4913      	ldr	r1, [pc, #76]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  4022fe:	4b13      	ldr	r3, [pc, #76]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402300:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  402302:	4a13      	ldr	r2, [pc, #76]	; (402350 <pmc_switch_mainck_to_xtal+0x64>)
  402304:	401a      	ands	r2, r3
  402306:	4b13      	ldr	r3, [pc, #76]	; (402354 <pmc_switch_mainck_to_xtal+0x68>)
  402308:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40230a:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
  40230c:	e018      	b.n	402340 <pmc_switch_mainck_to_xtal+0x54>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40230e:	490f      	ldr	r1, [pc, #60]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402310:	4b0e      	ldr	r3, [pc, #56]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402312:	6a1a      	ldr	r2, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  402314:	4b10      	ldr	r3, [pc, #64]	; (402358 <pmc_switch_mainck_to_xtal+0x6c>)
  402316:	4013      	ands	r3, r2
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  402318:	683a      	ldr	r2, [r7, #0]
  40231a:	0212      	lsls	r2, r2, #8
  40231c:	b292      	uxth	r2, r2
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40231e:	431a      	orrs	r2, r3
  402320:	4b0e      	ldr	r3, [pc, #56]	; (40235c <pmc_switch_mainck_to_xtal+0x70>)
  402322:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  402324:	620b      	str	r3, [r1, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  402326:	bf00      	nop
  402328:	4b08      	ldr	r3, [pc, #32]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  40232a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40232c:	f003 0301 	and.w	r3, r3, #1
  402330:	2b00      	cmp	r3, #0
  402332:	d0f9      	beq.n	402328 <pmc_switch_mainck_to_xtal+0x3c>
		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  402334:	4905      	ldr	r1, [pc, #20]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402336:	4b05      	ldr	r3, [pc, #20]	; (40234c <pmc_switch_mainck_to_xtal+0x60>)
  402338:	6a1a      	ldr	r2, [r3, #32]
  40233a:	4b09      	ldr	r3, [pc, #36]	; (402360 <pmc_switch_mainck_to_xtal+0x74>)
  40233c:	4313      	orrs	r3, r2
  40233e:	620b      	str	r3, [r1, #32]
}
  402340:	bf00      	nop
  402342:	370c      	adds	r7, #12
  402344:	46bd      	mov	sp, r7
  402346:	f85d 7b04 	ldr.w	r7, [sp], #4
  40234a:	4770      	bx	lr
  40234c:	400e0600 	.word	0x400e0600
  402350:	fec8fffc 	.word	0xfec8fffc
  402354:	01370002 	.word	0x01370002
  402358:	ffc8fffc 	.word	0xffc8fffc
  40235c:	00370001 	.word	0x00370001
  402360:	01370000 	.word	0x01370000

00402364 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
  402364:	b480      	push	{r7}
  402366:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  402368:	4b04      	ldr	r3, [pc, #16]	; (40237c <pmc_osc_is_ready_mainck+0x18>)
  40236a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  40236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
  402370:	4618      	mov	r0, r3
  402372:	46bd      	mov	sp, r7
  402374:	f85d 7b04 	ldr.w	r7, [sp], #4
  402378:	4770      	bx	lr
  40237a:	bf00      	nop
  40237c:	400e0600 	.word	0x400e0600

00402380 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
  402380:	b480      	push	{r7}
  402382:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  402384:	4b04      	ldr	r3, [pc, #16]	; (402398 <pmc_disable_pllack+0x18>)
  402386:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40238a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
  40238c:	bf00      	nop
  40238e:	46bd      	mov	sp, r7
  402390:	f85d 7b04 	ldr.w	r7, [sp], #4
  402394:	4770      	bx	lr
  402396:	bf00      	nop
  402398:	400e0600 	.word	0x400e0600

0040239c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
  40239c:	b480      	push	{r7}
  40239e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4023a0:	4b04      	ldr	r3, [pc, #16]	; (4023b4 <pmc_is_locked_pllack+0x18>)
  4023a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023a4:	f003 0302 	and.w	r3, r3, #2
}
  4023a8:	4618      	mov	r0, r3
  4023aa:	46bd      	mov	sp, r7
  4023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023b0:	4770      	bx	lr
  4023b2:	bf00      	nop
  4023b4:	400e0600 	.word	0x400e0600

004023b8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
  4023b8:	b480      	push	{r7}
  4023ba:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
  4023bc:	4b04      	ldr	r3, [pc, #16]	; (4023d0 <pmc_is_locked_upll+0x18>)
  4023be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
  4023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
  4023c4:	4618      	mov	r0, r3
  4023c6:	46bd      	mov	sp, r7
  4023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
  4023cc:	4770      	bx	lr
  4023ce:	bf00      	nop
  4023d0:	400e0600 	.word	0x400e0600

004023d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
  4023d4:	b480      	push	{r7}
  4023d6:	b083      	sub	sp, #12
  4023d8:	af00      	add	r7, sp, #0
  4023da:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
  4023dc:	687b      	ldr	r3, [r7, #4]
  4023de:	2b3f      	cmp	r3, #63	; 0x3f
  4023e0:	d901      	bls.n	4023e6 <pmc_enable_periph_clk+0x12>
		return 1;
  4023e2:	2301      	movs	r3, #1
  4023e4:	e02f      	b.n	402446 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
  4023e6:	687b      	ldr	r3, [r7, #4]
  4023e8:	2b1f      	cmp	r3, #31
  4023ea:	d813      	bhi.n	402414 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4023ec:	4b19      	ldr	r3, [pc, #100]	; (402454 <pmc_enable_periph_clk+0x80>)
  4023ee:	699a      	ldr	r2, [r3, #24]
  4023f0:	2101      	movs	r1, #1
  4023f2:	687b      	ldr	r3, [r7, #4]
  4023f4:	fa01 f303 	lsl.w	r3, r1, r3
  4023f8:	401a      	ands	r2, r3
  4023fa:	2101      	movs	r1, #1
  4023fc:	687b      	ldr	r3, [r7, #4]
  4023fe:	fa01 f303 	lsl.w	r3, r1, r3
  402402:	429a      	cmp	r2, r3
  402404:	d01e      	beq.n	402444 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
  402406:	4a13      	ldr	r2, [pc, #76]	; (402454 <pmc_enable_periph_clk+0x80>)
  402408:	2101      	movs	r1, #1
  40240a:	687b      	ldr	r3, [r7, #4]
  40240c:	fa01 f303 	lsl.w	r3, r1, r3
  402410:	6113      	str	r3, [r2, #16]
  402412:	e017      	b.n	402444 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
  402414:	687b      	ldr	r3, [r7, #4]
  402416:	3b20      	subs	r3, #32
  402418:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40241a:	4b0e      	ldr	r3, [pc, #56]	; (402454 <pmc_enable_periph_clk+0x80>)
  40241c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  402420:	2101      	movs	r1, #1
  402422:	687b      	ldr	r3, [r7, #4]
  402424:	fa01 f303 	lsl.w	r3, r1, r3
  402428:	401a      	ands	r2, r3
  40242a:	2101      	movs	r1, #1
  40242c:	687b      	ldr	r3, [r7, #4]
  40242e:	fa01 f303 	lsl.w	r3, r1, r3
  402432:	429a      	cmp	r2, r3
  402434:	d006      	beq.n	402444 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
  402436:	4a07      	ldr	r2, [pc, #28]	; (402454 <pmc_enable_periph_clk+0x80>)
  402438:	2101      	movs	r1, #1
  40243a:	687b      	ldr	r3, [r7, #4]
  40243c:	fa01 f303 	lsl.w	r3, r1, r3
  402440:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
  402444:	2300      	movs	r3, #0
}
  402446:	4618      	mov	r0, r3
  402448:	370c      	adds	r7, #12
  40244a:	46bd      	mov	sp, r7
  40244c:	f85d 7b04 	ldr.w	r7, [sp], #4
  402450:	4770      	bx	lr
  402452:	bf00      	nop
  402454:	400e0600 	.word	0x400e0600

00402458 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
  402458:	b480      	push	{r7}
  40245a:	b083      	sub	sp, #12
  40245c:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  40245e:	f3ef 8310 	mrs	r3, PRIMASK
  402462:	607b      	str	r3, [r7, #4]
  return(result);
  402464:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
  402466:	2b00      	cmp	r3, #0
  402468:	bf0c      	ite	eq
  40246a:	2301      	moveq	r3, #1
  40246c:	2300      	movne	r3, #0
  40246e:	b2db      	uxtb	r3, r3
  402470:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
  402472:	b672      	cpsid	i
  __ASM volatile ("dmb");
  402474:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  402478:	4b04      	ldr	r3, [pc, #16]	; (40248c <cpu_irq_save+0x34>)
  40247a:	2200      	movs	r2, #0
  40247c:	701a      	strb	r2, [r3, #0]
	return flags;
  40247e:	683b      	ldr	r3, [r7, #0]
}
  402480:	4618      	mov	r0, r3
  402482:	370c      	adds	r7, #12
  402484:	46bd      	mov	sp, r7
  402486:	f85d 7b04 	ldr.w	r7, [sp], #4
  40248a:	4770      	bx	lr
  40248c:	20400018 	.word	0x20400018

00402490 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
  402490:	b480      	push	{r7}
  402492:	b083      	sub	sp, #12
  402494:	af00      	add	r7, sp, #0
  402496:	6078      	str	r0, [r7, #4]
	return (flags);
  402498:	687b      	ldr	r3, [r7, #4]
  40249a:	2b00      	cmp	r3, #0
  40249c:	bf14      	ite	ne
  40249e:	2301      	movne	r3, #1
  4024a0:	2300      	moveq	r3, #0
  4024a2:	b2db      	uxtb	r3, r3
}
  4024a4:	4618      	mov	r0, r3
  4024a6:	370c      	adds	r7, #12
  4024a8:	46bd      	mov	sp, r7
  4024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
  4024ae:	4770      	bx	lr

004024b0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
  4024b0:	b580      	push	{r7, lr}
  4024b2:	b082      	sub	sp, #8
  4024b4:	af00      	add	r7, sp, #0
  4024b6:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
  4024b8:	6878      	ldr	r0, [r7, #4]
  4024ba:	4b07      	ldr	r3, [pc, #28]	; (4024d8 <cpu_irq_restore+0x28>)
  4024bc:	4798      	blx	r3
  4024be:	4603      	mov	r3, r0
  4024c0:	2b00      	cmp	r3, #0
  4024c2:	d005      	beq.n	4024d0 <cpu_irq_restore+0x20>
		cpu_irq_enable();
  4024c4:	4b05      	ldr	r3, [pc, #20]	; (4024dc <cpu_irq_restore+0x2c>)
  4024c6:	2201      	movs	r2, #1
  4024c8:	701a      	strb	r2, [r3, #0]
  4024ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4024ce:	b662      	cpsie	i
}
  4024d0:	bf00      	nop
  4024d2:	3708      	adds	r7, #8
  4024d4:	46bd      	mov	sp, r7
  4024d6:	bd80      	pop	{r7, pc}
  4024d8:	00402491 	.word	0x00402491
  4024dc:	20400018 	.word	0x20400018

004024e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
  4024e0:	b580      	push	{r7, lr}
  4024e2:	b084      	sub	sp, #16
  4024e4:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
  4024e6:	4b1e      	ldr	r3, [pc, #120]	; (402560 <Reset_Handler+0x80>)
  4024e8:	60fb      	str	r3, [r7, #12]
        pDest = &_srelocate;
  4024ea:	4b1e      	ldr	r3, [pc, #120]	; (402564 <Reset_Handler+0x84>)
  4024ec:	60bb      	str	r3, [r7, #8]

        if (pSrc != pDest) {
  4024ee:	68fa      	ldr	r2, [r7, #12]
  4024f0:	68bb      	ldr	r3, [r7, #8]
  4024f2:	429a      	cmp	r2, r3
  4024f4:	d00c      	beq.n	402510 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
  4024f6:	e007      	b.n	402508 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
  4024f8:	68bb      	ldr	r3, [r7, #8]
  4024fa:	1d1a      	adds	r2, r3, #4
  4024fc:	60ba      	str	r2, [r7, #8]
  4024fe:	68fa      	ldr	r2, [r7, #12]
  402500:	1d11      	adds	r1, r2, #4
  402502:	60f9      	str	r1, [r7, #12]
  402504:	6812      	ldr	r2, [r2, #0]
  402506:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
  402508:	68bb      	ldr	r3, [r7, #8]
  40250a:	4a17      	ldr	r2, [pc, #92]	; (402568 <Reset_Handler+0x88>)
  40250c:	4293      	cmp	r3, r2
  40250e:	d3f3      	bcc.n	4024f8 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
  402510:	4b16      	ldr	r3, [pc, #88]	; (40256c <Reset_Handler+0x8c>)
  402512:	60bb      	str	r3, [r7, #8]
  402514:	e004      	b.n	402520 <Reset_Handler+0x40>
                *pDest++ = 0;
  402516:	68bb      	ldr	r3, [r7, #8]
  402518:	1d1a      	adds	r2, r3, #4
  40251a:	60ba      	str	r2, [r7, #8]
  40251c:	2200      	movs	r2, #0
  40251e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
  402520:	68bb      	ldr	r3, [r7, #8]
  402522:	4a13      	ldr	r2, [pc, #76]	; (402570 <Reset_Handler+0x90>)
  402524:	4293      	cmp	r3, r2
  402526:	d3f6      	bcc.n	402516 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
  402528:	4b12      	ldr	r3, [pc, #72]	; (402574 <Reset_Handler+0x94>)
  40252a:	60fb      	str	r3, [r7, #12]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40252c:	4a12      	ldr	r2, [pc, #72]	; (402578 <Reset_Handler+0x98>)
  40252e:	68fb      	ldr	r3, [r7, #12]
  402530:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  402534:	6093      	str	r3, [r2, #8]
 * \brief Enable FPU
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
  402536:	4b11      	ldr	r3, [pc, #68]	; (40257c <Reset_Handler+0x9c>)
  402538:	4798      	blx	r3
  40253a:	6078      	str	r0, [r7, #4]
	REG_CPACR |=  (0xFu << 20);
  40253c:	4a10      	ldr	r2, [pc, #64]	; (402580 <Reset_Handler+0xa0>)
  40253e:	4b10      	ldr	r3, [pc, #64]	; (402580 <Reset_Handler+0xa0>)
  402540:	681b      	ldr	r3, [r3, #0]
  402542:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  402546:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  402548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40254c:	f3bf 8f6f 	isb	sy
	__DSB();
	__ISB();
	cpu_irq_restore(flags);
  402550:	6878      	ldr	r0, [r7, #4]
  402552:	4b0c      	ldr	r3, [pc, #48]	; (402584 <Reset_Handler+0xa4>)
  402554:	4798      	blx	r3
#if __FPU_USED
	fpu_enable();
#endif

        /* Initialize the C library */
        __libc_init_array();
  402556:	4b0c      	ldr	r3, [pc, #48]	; (402588 <Reset_Handler+0xa8>)
  402558:	4798      	blx	r3

        /* Branch to main function */
        main();
  40255a:	4b0c      	ldr	r3, [pc, #48]	; (40258c <Reset_Handler+0xac>)
  40255c:	4798      	blx	r3

        /* Infinite loop */
        while (1);
  40255e:	e7fe      	b.n	40255e <Reset_Handler+0x7e>
  402560:	00408884 	.word	0x00408884
  402564:	20400000 	.word	0x20400000
  402568:	204013a8 	.word	0x204013a8
  40256c:	204013a8 	.word	0x204013a8
  402570:	204016a8 	.word	0x204016a8
  402574:	00400000 	.word	0x00400000
  402578:	e000ed00 	.word	0xe000ed00
  40257c:	00402459 	.word	0x00402459
  402580:	e000ed88 	.word	0xe000ed88
  402584:	004024b1 	.word	0x004024b1
  402588:	00403511 	.word	0x00403511
  40258c:	0040315d 	.word	0x0040315d

00402590 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  402590:	b480      	push	{r7}
  402592:	af00      	add	r7, sp, #0
        while (1) {
  402594:	e7fe      	b.n	402594 <Dummy_Handler+0x4>
	...

00402598 <SystemCoreClockUpdate>:

  SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate( void )
{
  402598:	b480      	push	{r7}
  40259a:	af00      	add	r7, sp, #0
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  40259c:	4b52      	ldr	r3, [pc, #328]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  40259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4025a0:	f003 0303 	and.w	r3, r3, #3
  4025a4:	2b01      	cmp	r3, #1
  4025a6:	d014      	beq.n	4025d2 <SystemCoreClockUpdate+0x3a>
  4025a8:	2b01      	cmp	r3, #1
  4025aa:	d302      	bcc.n	4025b2 <SystemCoreClockUpdate+0x1a>
  4025ac:	2b02      	cmp	r3, #2
  4025ae:	d038      	beq.n	402622 <SystemCoreClockUpdate+0x8a>
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
      }
    break;

    default:
    break;
  4025b0:	e07a      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4025b2:	4b4e      	ldr	r3, [pc, #312]	; (4026ec <SystemCoreClockUpdate+0x154>)
  4025b4:	695b      	ldr	r3, [r3, #20]
  4025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  4025ba:	2b00      	cmp	r3, #0
  4025bc:	d004      	beq.n	4025c8 <SystemCoreClockUpdate+0x30>
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4025be:	4b4c      	ldr	r3, [pc, #304]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4025c4:	601a      	str	r2, [r3, #0]
    break;
  4025c6:	e06f      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4025c8:	4b49      	ldr	r3, [pc, #292]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025ca:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
  4025ce:	601a      	str	r2, [r3, #0]
    break;
  4025d0:	e06a      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  4025d2:	4b45      	ldr	r3, [pc, #276]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4025d4:	6a1b      	ldr	r3, [r3, #32]
  4025d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  4025da:	2b00      	cmp	r3, #0
  4025dc:	d003      	beq.n	4025e6 <SystemCoreClockUpdate+0x4e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  4025de:	4b44      	ldr	r3, [pc, #272]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025e0:	4a44      	ldr	r2, [pc, #272]	; (4026f4 <SystemCoreClockUpdate+0x15c>)
  4025e2:	601a      	str	r2, [r3, #0]
    break;
  4025e4:	e060      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4025e6:	4b42      	ldr	r3, [pc, #264]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4025e8:	4a43      	ldr	r2, [pc, #268]	; (4026f8 <SystemCoreClockUpdate+0x160>)
  4025ea:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4025ec:	4b3e      	ldr	r3, [pc, #248]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4025ee:	6a1b      	ldr	r3, [r3, #32]
  4025f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4025f4:	2b10      	cmp	r3, #16
  4025f6:	d004      	beq.n	402602 <SystemCoreClockUpdate+0x6a>
  4025f8:	2b20      	cmp	r3, #32
  4025fa:	d008      	beq.n	40260e <SystemCoreClockUpdate+0x76>
  4025fc:	2b00      	cmp	r3, #0
  4025fe:	d00e      	beq.n	40261e <SystemCoreClockUpdate+0x86>
          break;
  402600:	e00e      	b.n	402620 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 2U;
  402602:	4b3b      	ldr	r3, [pc, #236]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402604:	681b      	ldr	r3, [r3, #0]
  402606:	005b      	lsls	r3, r3, #1
  402608:	4a39      	ldr	r2, [pc, #228]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40260a:	6013      	str	r3, [r2, #0]
          break;
  40260c:	e008      	b.n	402620 <SystemCoreClockUpdate+0x88>
            SystemCoreClock *= 3U;
  40260e:	4b38      	ldr	r3, [pc, #224]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402610:	681a      	ldr	r2, [r3, #0]
  402612:	4613      	mov	r3, r2
  402614:	005b      	lsls	r3, r3, #1
  402616:	4413      	add	r3, r2
  402618:	4a35      	ldr	r2, [pc, #212]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40261a:	6013      	str	r3, [r2, #0]
          break;
  40261c:	e000      	b.n	402620 <SystemCoreClockUpdate+0x88>
          break;
  40261e:	bf00      	nop
    break;
  402620:	e042      	b.n	4026a8 <SystemCoreClockUpdate+0x110>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  402622:	4b31      	ldr	r3, [pc, #196]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  402624:	6a1b      	ldr	r3, [r3, #32]
  402626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
  40262a:	2b00      	cmp	r3, #0
  40262c:	d003      	beq.n	402636 <SystemCoreClockUpdate+0x9e>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  40262e:	4b30      	ldr	r3, [pc, #192]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402630:	4a30      	ldr	r2, [pc, #192]	; (4026f4 <SystemCoreClockUpdate+0x15c>)
  402632:	601a      	str	r2, [r3, #0]
  402634:	e01c      	b.n	402670 <SystemCoreClockUpdate+0xd8>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  402636:	4b2e      	ldr	r3, [pc, #184]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402638:	4a2f      	ldr	r2, [pc, #188]	; (4026f8 <SystemCoreClockUpdate+0x160>)
  40263a:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  40263c:	4b2a      	ldr	r3, [pc, #168]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  40263e:	6a1b      	ldr	r3, [r3, #32]
  402640:	f003 0370 	and.w	r3, r3, #112	; 0x70
  402644:	2b10      	cmp	r3, #16
  402646:	d004      	beq.n	402652 <SystemCoreClockUpdate+0xba>
  402648:	2b20      	cmp	r3, #32
  40264a:	d008      	beq.n	40265e <SystemCoreClockUpdate+0xc6>
  40264c:	2b00      	cmp	r3, #0
  40264e:	d00e      	beq.n	40266e <SystemCoreClockUpdate+0xd6>
          break;
  402650:	e00e      	b.n	402670 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 2U;
  402652:	4b27      	ldr	r3, [pc, #156]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402654:	681b      	ldr	r3, [r3, #0]
  402656:	005b      	lsls	r3, r3, #1
  402658:	4a25      	ldr	r2, [pc, #148]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40265a:	6013      	str	r3, [r2, #0]
          break;
  40265c:	e008      	b.n	402670 <SystemCoreClockUpdate+0xd8>
            SystemCoreClock *= 3U;
  40265e:	4b24      	ldr	r3, [pc, #144]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402660:	681a      	ldr	r2, [r3, #0]
  402662:	4613      	mov	r3, r2
  402664:	005b      	lsls	r3, r3, #1
  402666:	4413      	add	r3, r2
  402668:	4a21      	ldr	r2, [pc, #132]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40266a:	6013      	str	r3, [r2, #0]
          break;
  40266c:	e000      	b.n	402670 <SystemCoreClockUpdate+0xd8>
          break;
  40266e:	bf00      	nop
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  402670:	4b1d      	ldr	r3, [pc, #116]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  402672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  402674:	f003 0303 	and.w	r3, r3, #3
  402678:	2b02      	cmp	r3, #2
  40267a:	d114      	bne.n	4026a6 <SystemCoreClockUpdate+0x10e>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40267c:	4b1a      	ldr	r3, [pc, #104]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  40267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402680:	0c1b      	lsrs	r3, r3, #16
  402682:	f3c3 030a 	ubfx	r3, r3, #0, #11
  402686:	3301      	adds	r3, #1
  402688:	4a19      	ldr	r2, [pc, #100]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40268a:	6812      	ldr	r2, [r2, #0]
  40268c:	fb02 f303 	mul.w	r3, r2, r3
  402690:	4a17      	ldr	r2, [pc, #92]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  402692:	6013      	str	r3, [r2, #0]
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  402694:	4b14      	ldr	r3, [pc, #80]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  402696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  402698:	b2db      	uxtb	r3, r3
  40269a:	4a15      	ldr	r2, [pc, #84]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  40269c:	6812      	ldr	r2, [r2, #0]
  40269e:	fbb2 f3f3 	udiv	r3, r2, r3
  4026a2:	4a13      	ldr	r2, [pc, #76]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026a4:	6013      	str	r3, [r2, #0]
    break;
  4026a6:	bf00      	nop
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4026a8:	4b0f      	ldr	r3, [pc, #60]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4026b0:	2b70      	cmp	r3, #112	; 0x70
  4026b2:	d108      	bne.n	4026c6 <SystemCoreClockUpdate+0x12e>
  {
    SystemCoreClock /= 3U;
  4026b4:	4b0e      	ldr	r3, [pc, #56]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026b6:	681b      	ldr	r3, [r3, #0]
  4026b8:	4a10      	ldr	r2, [pc, #64]	; (4026fc <SystemCoreClockUpdate+0x164>)
  4026ba:	fba2 2303 	umull	r2, r3, r2, r3
  4026be:	085b      	lsrs	r3, r3, #1
  4026c0:	4a0b      	ldr	r2, [pc, #44]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026c2:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  }
}
  4026c4:	e00a      	b.n	4026dc <SystemCoreClockUpdate+0x144>
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4026c6:	4b08      	ldr	r3, [pc, #32]	; (4026e8 <SystemCoreClockUpdate+0x150>)
  4026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4026ca:	091b      	lsrs	r3, r3, #4
  4026cc:	f003 0307 	and.w	r3, r3, #7
  4026d0:	4a07      	ldr	r2, [pc, #28]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026d2:	6812      	ldr	r2, [r2, #0]
  4026d4:	fa22 f303 	lsr.w	r3, r2, r3
  4026d8:	4a05      	ldr	r2, [pc, #20]	; (4026f0 <SystemCoreClockUpdate+0x158>)
  4026da:	6013      	str	r3, [r2, #0]
}
  4026dc:	bf00      	nop
  4026de:	46bd      	mov	sp, r7
  4026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
  4026e4:	4770      	bx	lr
  4026e6:	bf00      	nop
  4026e8:	400e0600 	.word	0x400e0600
  4026ec:	400e1810 	.word	0x400e1810
  4026f0:	2040001c 	.word	0x2040001c
  4026f4:	00b71b00 	.word	0x00b71b00
  4026f8:	003d0900 	.word	0x003d0900
  4026fc:	aaaaaaab 	.word	0xaaaaaaab

00402700 <system_init_flash>:
/**
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  402700:	b480      	push	{r7}
  402702:	b083      	sub	sp, #12
  402704:	af00      	add	r7, sp, #0
  402706:	6078      	str	r0, [r7, #4]
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  402708:	687b      	ldr	r3, [r7, #4]
  40270a:	4a1d      	ldr	r2, [pc, #116]	; (402780 <system_init_flash+0x80>)
  40270c:	4293      	cmp	r3, r2
  40270e:	d804      	bhi.n	40271a <system_init_flash+0x1a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  402710:	4b1c      	ldr	r3, [pc, #112]	; (402784 <system_init_flash+0x84>)
  402712:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  402716:	601a      	str	r2, [r3, #0]
          }
        }
      }
    }
  }
}
  402718:	e02b      	b.n	402772 <system_init_flash+0x72>
    if (ul_clk < CHIP_FREQ_FWS_1)
  40271a:	687b      	ldr	r3, [r7, #4]
  40271c:	4a1a      	ldr	r2, [pc, #104]	; (402788 <system_init_flash+0x88>)
  40271e:	4293      	cmp	r3, r2
  402720:	d803      	bhi.n	40272a <system_init_flash+0x2a>
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  402722:	4b18      	ldr	r3, [pc, #96]	; (402784 <system_init_flash+0x84>)
  402724:	4a19      	ldr	r2, [pc, #100]	; (40278c <system_init_flash+0x8c>)
  402726:	601a      	str	r2, [r3, #0]
}
  402728:	e023      	b.n	402772 <system_init_flash+0x72>
      if (ul_clk < CHIP_FREQ_FWS_2)
  40272a:	687b      	ldr	r3, [r7, #4]
  40272c:	4a18      	ldr	r2, [pc, #96]	; (402790 <system_init_flash+0x90>)
  40272e:	4293      	cmp	r3, r2
  402730:	d803      	bhi.n	40273a <system_init_flash+0x3a>
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  402732:	4b14      	ldr	r3, [pc, #80]	; (402784 <system_init_flash+0x84>)
  402734:	4a17      	ldr	r2, [pc, #92]	; (402794 <system_init_flash+0x94>)
  402736:	601a      	str	r2, [r3, #0]
}
  402738:	e01b      	b.n	402772 <system_init_flash+0x72>
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  40273a:	687b      	ldr	r3, [r7, #4]
  40273c:	4a16      	ldr	r2, [pc, #88]	; (402798 <system_init_flash+0x98>)
  40273e:	4293      	cmp	r3, r2
  402740:	d803      	bhi.n	40274a <system_init_flash+0x4a>
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  402742:	4b10      	ldr	r3, [pc, #64]	; (402784 <system_init_flash+0x84>)
  402744:	4a15      	ldr	r2, [pc, #84]	; (40279c <system_init_flash+0x9c>)
  402746:	601a      	str	r2, [r3, #0]
}
  402748:	e013      	b.n	402772 <system_init_flash+0x72>
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  40274a:	687b      	ldr	r3, [r7, #4]
  40274c:	4a14      	ldr	r2, [pc, #80]	; (4027a0 <system_init_flash+0xa0>)
  40274e:	4293      	cmp	r3, r2
  402750:	d804      	bhi.n	40275c <system_init_flash+0x5c>
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  402752:	4b0c      	ldr	r3, [pc, #48]	; (402784 <system_init_flash+0x84>)
  402754:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  402758:	601a      	str	r2, [r3, #0]
}
  40275a:	e00a      	b.n	402772 <system_init_flash+0x72>
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  40275c:	687b      	ldr	r3, [r7, #4]
  40275e:	4a11      	ldr	r2, [pc, #68]	; (4027a4 <system_init_flash+0xa4>)
  402760:	4293      	cmp	r3, r2
  402762:	d803      	bhi.n	40276c <system_init_flash+0x6c>
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  402764:	4b07      	ldr	r3, [pc, #28]	; (402784 <system_init_flash+0x84>)
  402766:	4a10      	ldr	r2, [pc, #64]	; (4027a8 <system_init_flash+0xa8>)
  402768:	601a      	str	r2, [r3, #0]
}
  40276a:	e002      	b.n	402772 <system_init_flash+0x72>
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  40276c:	4b05      	ldr	r3, [pc, #20]	; (402784 <system_init_flash+0x84>)
  40276e:	4a0f      	ldr	r2, [pc, #60]	; (4027ac <system_init_flash+0xac>)
  402770:	601a      	str	r2, [r3, #0]
}
  402772:	bf00      	nop
  402774:	370c      	adds	r7, #12
  402776:	46bd      	mov	sp, r7
  402778:	f85d 7b04 	ldr.w	r7, [sp], #4
  40277c:	4770      	bx	lr
  40277e:	bf00      	nop
  402780:	015ef3bf 	.word	0x015ef3bf
  402784:	400e0c00 	.word	0x400e0c00
  402788:	02bde77f 	.word	0x02bde77f
  40278c:	04000100 	.word	0x04000100
  402790:	041cdb3f 	.word	0x041cdb3f
  402794:	04000200 	.word	0x04000200
  402798:	057bceff 	.word	0x057bceff
  40279c:	04000300 	.word	0x04000300
  4027a0:	06dac2bf 	.word	0x06dac2bf
  4027a4:	0839b67f 	.word	0x0839b67f
  4027a8:	04000500 	.word	0x04000500
  4027ac:	04000600 	.word	0x04000600

004027b0 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
  4027b0:	b480      	push	{r7}
  4027b2:	b085      	sub	sp, #20
  4027b4:	af00      	add	r7, sp, #0
  4027b6:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
  4027b8:	4b10      	ldr	r3, [pc, #64]	; (4027fc <_sbrk+0x4c>)
  4027ba:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
  4027bc:	4b10      	ldr	r3, [pc, #64]	; (402800 <_sbrk+0x50>)
  4027be:	681b      	ldr	r3, [r3, #0]
  4027c0:	2b00      	cmp	r3, #0
  4027c2:	d102      	bne.n	4027ca <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
  4027c4:	4b0e      	ldr	r3, [pc, #56]	; (402800 <_sbrk+0x50>)
  4027c6:	4a0f      	ldr	r2, [pc, #60]	; (402804 <_sbrk+0x54>)
  4027c8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
  4027ca:	4b0d      	ldr	r3, [pc, #52]	; (402800 <_sbrk+0x50>)
  4027cc:	681b      	ldr	r3, [r3, #0]
  4027ce:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
  4027d0:	68ba      	ldr	r2, [r7, #8]
  4027d2:	687b      	ldr	r3, [r7, #4]
  4027d4:	441a      	add	r2, r3
  4027d6:	68fb      	ldr	r3, [r7, #12]
  4027d8:	429a      	cmp	r2, r3
  4027da:	dd02      	ble.n	4027e2 <_sbrk+0x32>
		return (caddr_t) -1;	
  4027dc:	f04f 33ff 	mov.w	r3, #4294967295
  4027e0:	e006      	b.n	4027f0 <_sbrk+0x40>
	}

	heap += incr;
  4027e2:	4b07      	ldr	r3, [pc, #28]	; (402800 <_sbrk+0x50>)
  4027e4:	681a      	ldr	r2, [r3, #0]
  4027e6:	687b      	ldr	r3, [r7, #4]
  4027e8:	4413      	add	r3, r2
  4027ea:	4a05      	ldr	r2, [pc, #20]	; (402800 <_sbrk+0x50>)
  4027ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
  4027ee:	68bb      	ldr	r3, [r7, #8]
}
  4027f0:	4618      	mov	r0, r3
  4027f2:	3714      	adds	r7, #20
  4027f4:	46bd      	mov	sp, r7
  4027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
  4027fa:	4770      	bx	lr
  4027fc:	2045fffc 	.word	0x2045fffc
  402800:	2040163c 	.word	0x2040163c
  402804:	204038a8 	.word	0x204038a8

00402808 <NVIC_EnableIRQ>:
{
  402808:	b480      	push	{r7}
  40280a:	b083      	sub	sp, #12
  40280c:	af00      	add	r7, sp, #0
  40280e:	4603      	mov	r3, r0
  402810:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  402812:	4909      	ldr	r1, [pc, #36]	; (402838 <NVIC_EnableIRQ+0x30>)
  402814:	f997 3007 	ldrsb.w	r3, [r7, #7]
  402818:	095b      	lsrs	r3, r3, #5
  40281a:	79fa      	ldrb	r2, [r7, #7]
  40281c:	f002 021f 	and.w	r2, r2, #31
  402820:	2001      	movs	r0, #1
  402822:	fa00 f202 	lsl.w	r2, r0, r2
  402826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
  40282a:	bf00      	nop
  40282c:	370c      	adds	r7, #12
  40282e:	46bd      	mov	sp, r7
  402830:	f85d 7b04 	ldr.w	r7, [sp], #4
  402834:	4770      	bx	lr
  402836:	bf00      	nop
  402838:	e000e100 	.word	0xe000e100

0040283c <NVIC_SetPriority>:
{
  40283c:	b480      	push	{r7}
  40283e:	b083      	sub	sp, #12
  402840:	af00      	add	r7, sp, #0
  402842:	4603      	mov	r3, r0
  402844:	6039      	str	r1, [r7, #0]
  402846:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
  402848:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40284c:	2b00      	cmp	r3, #0
  40284e:	da0b      	bge.n	402868 <NVIC_SetPriority+0x2c>
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  402850:	490d      	ldr	r1, [pc, #52]	; (402888 <NVIC_SetPriority+0x4c>)
  402852:	79fb      	ldrb	r3, [r7, #7]
  402854:	f003 030f 	and.w	r3, r3, #15
  402858:	3b04      	subs	r3, #4
  40285a:	683a      	ldr	r2, [r7, #0]
  40285c:	b2d2      	uxtb	r2, r2
  40285e:	0152      	lsls	r2, r2, #5
  402860:	b2d2      	uxtb	r2, r2
  402862:	440b      	add	r3, r1
  402864:	761a      	strb	r2, [r3, #24]
}
  402866:	e009      	b.n	40287c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  402868:	4908      	ldr	r1, [pc, #32]	; (40288c <NVIC_SetPriority+0x50>)
  40286a:	f997 3007 	ldrsb.w	r3, [r7, #7]
  40286e:	683a      	ldr	r2, [r7, #0]
  402870:	b2d2      	uxtb	r2, r2
  402872:	0152      	lsls	r2, r2, #5
  402874:	b2d2      	uxtb	r2, r2
  402876:	440b      	add	r3, r1
  402878:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
  40287c:	bf00      	nop
  40287e:	370c      	adds	r7, #12
  402880:	46bd      	mov	sp, r7
  402882:	f85d 7b04 	ldr.w	r7, [sp], #4
  402886:	4770      	bx	lr
  402888:	e000ed00 	.word	0xe000ed00
  40288c:	e000e100 	.word	0xe000e100

00402890 <osc_get_rate>:
{
  402890:	b480      	push	{r7}
  402892:	b083      	sub	sp, #12
  402894:	af00      	add	r7, sp, #0
  402896:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
  402898:	687b      	ldr	r3, [r7, #4]
  40289a:	2b07      	cmp	r3, #7
  40289c:	d825      	bhi.n	4028ea <osc_get_rate+0x5a>
  40289e:	a201      	add	r2, pc, #4	; (adr r2, 4028a4 <osc_get_rate+0x14>)
  4028a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  4028a4:	004028c5 	.word	0x004028c5
  4028a8:	004028cb 	.word	0x004028cb
  4028ac:	004028d1 	.word	0x004028d1
  4028b0:	004028d7 	.word	0x004028d7
  4028b4:	004028db 	.word	0x004028db
  4028b8:	004028df 	.word	0x004028df
  4028bc:	004028e3 	.word	0x004028e3
  4028c0:	004028e7 	.word	0x004028e7
		return OSC_SLCK_32K_RC_HZ;
  4028c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
  4028c8:	e010      	b.n	4028ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_XTAL;
  4028ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028ce:	e00d      	b.n	4028ec <osc_get_rate+0x5c>
		return BOARD_FREQ_SLCK_BYPASS;
  4028d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  4028d4:	e00a      	b.n	4028ec <osc_get_rate+0x5c>
		return OSC_MAINCK_4M_RC_HZ;
  4028d6:	4b08      	ldr	r3, [pc, #32]	; (4028f8 <osc_get_rate+0x68>)
  4028d8:	e008      	b.n	4028ec <osc_get_rate+0x5c>
		return OSC_MAINCK_8M_RC_HZ;
  4028da:	4b08      	ldr	r3, [pc, #32]	; (4028fc <osc_get_rate+0x6c>)
  4028dc:	e006      	b.n	4028ec <osc_get_rate+0x5c>
		return OSC_MAINCK_12M_RC_HZ;
  4028de:	4b08      	ldr	r3, [pc, #32]	; (402900 <osc_get_rate+0x70>)
  4028e0:	e004      	b.n	4028ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_XTAL;
  4028e2:	4b07      	ldr	r3, [pc, #28]	; (402900 <osc_get_rate+0x70>)
  4028e4:	e002      	b.n	4028ec <osc_get_rate+0x5c>
		return BOARD_FREQ_MAINCK_BYPASS;
  4028e6:	4b06      	ldr	r3, [pc, #24]	; (402900 <osc_get_rate+0x70>)
  4028e8:	e000      	b.n	4028ec <osc_get_rate+0x5c>
	return 0;
  4028ea:	2300      	movs	r3, #0
}
  4028ec:	4618      	mov	r0, r3
  4028ee:	370c      	adds	r7, #12
  4028f0:	46bd      	mov	sp, r7
  4028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
  4028f6:	4770      	bx	lr
  4028f8:	003d0900 	.word	0x003d0900
  4028fc:	007a1200 	.word	0x007a1200
  402900:	00b71b00 	.word	0x00b71b00

00402904 <sysclk_get_main_hz>:
{
  402904:	b580      	push	{r7, lr}
  402906:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
  402908:	2006      	movs	r0, #6
  40290a:	4b05      	ldr	r3, [pc, #20]	; (402920 <sysclk_get_main_hz+0x1c>)
  40290c:	4798      	blx	r3
  40290e:	4602      	mov	r2, r0
  402910:	4613      	mov	r3, r2
  402912:	009b      	lsls	r3, r3, #2
  402914:	4413      	add	r3, r2
  402916:	009a      	lsls	r2, r3, #2
  402918:	4413      	add	r3, r2
}
  40291a:	4618      	mov	r0, r3
  40291c:	bd80      	pop	{r7, pc}
  40291e:	bf00      	nop
  402920:	00402891 	.word	0x00402891

00402924 <sysclk_get_cpu_hz>:
{
  402924:	b580      	push	{r7, lr}
  402926:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
  402928:	4b02      	ldr	r3, [pc, #8]	; (402934 <sysclk_get_cpu_hz+0x10>)
  40292a:	4798      	blx	r3
  40292c:	4603      	mov	r3, r0
}
  40292e:	4618      	mov	r0, r3
  402930:	bd80      	pop	{r7, pc}
  402932:	bf00      	nop
  402934:	00402905 	.word	0x00402905

00402938 <turnOnLED>:
void writeLCD(void);

/************************************************************************/
/* interrupcoes                                                         */
/************************************************************************/
void turnOnLED(component led){
  402938:	b590      	push	{r4, r7, lr}
  40293a:	b085      	sub	sp, #20
  40293c:	af00      	add	r7, sp, #0
  40293e:	463c      	mov	r4, r7
  402940:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_clear(led.pio, led.mask);
  402944:	683b      	ldr	r3, [r7, #0]
  402946:	68fa      	ldr	r2, [r7, #12]
  402948:	4611      	mov	r1, r2
  40294a:	4618      	mov	r0, r3
  40294c:	4b02      	ldr	r3, [pc, #8]	; (402958 <turnOnLED+0x20>)
  40294e:	4798      	blx	r3
}
  402950:	bf00      	nop
  402952:	3714      	adds	r7, #20
  402954:	46bd      	mov	sp, r7
  402956:	bd90      	pop	{r4, r7, pc}
  402958:	00401b95 	.word	0x00401b95

0040295c <turnOffLED>:

void turnOffLED(component led){
  40295c:	b590      	push	{r4, r7, lr}
  40295e:	b085      	sub	sp, #20
  402960:	af00      	add	r7, sp, #0
  402962:	463c      	mov	r4, r7
  402964:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	pio_set(led.pio, led.mask);
  402968:	683b      	ldr	r3, [r7, #0]
  40296a:	68fa      	ldr	r2, [r7, #12]
  40296c:	4611      	mov	r1, r2
  40296e:	4618      	mov	r0, r3
  402970:	4b02      	ldr	r3, [pc, #8]	; (40297c <turnOffLED+0x20>)
  402972:	4798      	blx	r3
}
  402974:	bf00      	nop
  402976:	3714      	adds	r7, #20
  402978:	46bd      	mov	sp, r7
  40297a:	bd90      	pop	{r4, r7, pc}
  40297c:	00401b79 	.word	0x00401b79

00402980 <writeLCD>:

void writeLCD(void){
  402980:	b590      	push	{r4, r7, lr}
  402982:	b0a1      	sub	sp, #132	; 0x84
  402984:	af00      	add	r7, sp, #0
	char string[128];
	if (play){
  402986:	4b0f      	ldr	r3, [pc, #60]	; (4029c4 <writeLCD+0x44>)
  402988:	681b      	ldr	r3, [r3, #0]
  40298a:	2b00      	cmp	r3, #0
  40298c:	d008      	beq.n	4029a0 <writeLCD+0x20>
		sprintf(string, "Musica: %d", musicIndex + 1);
  40298e:	4b0e      	ldr	r3, [pc, #56]	; (4029c8 <writeLCD+0x48>)
  402990:	681b      	ldr	r3, [r3, #0]
  402992:	1c5a      	adds	r2, r3, #1
  402994:	463b      	mov	r3, r7
  402996:	490d      	ldr	r1, [pc, #52]	; (4029cc <writeLCD+0x4c>)
  402998:	4618      	mov	r0, r3
  40299a:	4b0d      	ldr	r3, [pc, #52]	; (4029d0 <writeLCD+0x50>)
  40299c:	4798      	blx	r3
  40299e:	e007      	b.n	4029b0 <writeLCD+0x30>
	} else {
		sprintf(string, "Pause     ");
  4029a0:	463b      	mov	r3, r7
  4029a2:	4a0c      	ldr	r2, [pc, #48]	; (4029d4 <writeLCD+0x54>)
  4029a4:	ca07      	ldmia	r2, {r0, r1, r2}
  4029a6:	c303      	stmia	r3!, {r0, r1}
  4029a8:	801a      	strh	r2, [r3, #0]
  4029aa:	3302      	adds	r3, #2
  4029ac:	0c12      	lsrs	r2, r2, #16
  4029ae:	701a      	strb	r2, [r3, #0]
	}
	gfx_mono_draw_string(string, 0,16, &sysfont);
  4029b0:	4638      	mov	r0, r7
  4029b2:	4b09      	ldr	r3, [pc, #36]	; (4029d8 <writeLCD+0x58>)
  4029b4:	2210      	movs	r2, #16
  4029b6:	2100      	movs	r1, #0
  4029b8:	4c08      	ldr	r4, [pc, #32]	; (4029dc <writeLCD+0x5c>)
  4029ba:	47a0      	blx	r4
}
  4029bc:	bf00      	nop
  4029be:	3784      	adds	r7, #132	; 0x84
  4029c0:	46bd      	mov	sp, r7
  4029c2:	bd90      	pop	{r4, r7, pc}
  4029c4:	20401678 	.word	0x20401678
  4029c8:	2040167c 	.word	0x2040167c
  4029cc:	0040856c 	.word	0x0040856c
  4029d0:	004035fd 	.word	0x004035fd
  4029d4:	00408578 	.word	0x00408578
  4029d8:	2040000c 	.word	0x2040000c
  4029dc:	0040084d 	.word	0x0040084d

004029e0 <prevButtonFunction>:

void prevButtonFunction(void) {
  4029e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4029e4:	af00      	add	r7, sp, #0
	changeMusic(0);
  4029e6:	2000      	movs	r0, #0
  4029e8:	4b21      	ldr	r3, [pc, #132]	; (402a70 <prevButtonFunction+0x90>)
  4029ea:	4798      	blx	r3
	writeLCD();
  4029ec:	4b21      	ldr	r3, [pc, #132]	; (402a74 <prevButtonFunction+0x94>)
  4029ee:	4798      	blx	r3
	turnOnLED(led1);
  4029f0:	4b21      	ldr	r3, [pc, #132]	; (402a78 <prevButtonFunction+0x98>)
  4029f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4029f4:	4c21      	ldr	r4, [pc, #132]	; (402a7c <prevButtonFunction+0x9c>)
  4029f6:	47a0      	blx	r4
	delay_ms(200);
  4029f8:	4b21      	ldr	r3, [pc, #132]	; (402a80 <prevButtonFunction+0xa0>)
  4029fa:	4798      	blx	r3
  4029fc:	4603      	mov	r3, r0
  4029fe:	4619      	mov	r1, r3
  402a00:	f04f 0200 	mov.w	r2, #0
  402a04:	460b      	mov	r3, r1
  402a06:	4614      	mov	r4, r2
  402a08:	18db      	adds	r3, r3, r3
  402a0a:	eb44 0404 	adc.w	r4, r4, r4
  402a0e:	185b      	adds	r3, r3, r1
  402a10:	eb44 0402 	adc.w	r4, r4, r2
  402a14:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  402a18:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  402a1c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  402a20:	4643      	mov	r3, r8
  402a22:	464c      	mov	r4, r9
  402a24:	185b      	adds	r3, r3, r1
  402a26:	eb44 0402 	adc.w	r4, r4, r2
  402a2a:	00e6      	lsls	r6, r4, #3
  402a2c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  402a30:	00dd      	lsls	r5, r3, #3
  402a32:	462b      	mov	r3, r5
  402a34:	4634      	mov	r4, r6
  402a36:	4619      	mov	r1, r3
  402a38:	4622      	mov	r2, r4
  402a3a:	f241 732b 	movw	r3, #5931	; 0x172b
  402a3e:	f04f 0400 	mov.w	r4, #0
  402a42:	18cd      	adds	r5, r1, r3
  402a44:	eb42 0604 	adc.w	r6, r2, r4
  402a48:	4628      	mov	r0, r5
  402a4a:	4631      	mov	r1, r6
  402a4c:	4c0d      	ldr	r4, [pc, #52]	; (402a84 <prevButtonFunction+0xa4>)
  402a4e:	f241 722c 	movw	r2, #5932	; 0x172c
  402a52:	f04f 0300 	mov.w	r3, #0
  402a56:	47a0      	blx	r4
  402a58:	4603      	mov	r3, r0
  402a5a:	460c      	mov	r4, r1
  402a5c:	4618      	mov	r0, r3
  402a5e:	4b0a      	ldr	r3, [pc, #40]	; (402a88 <prevButtonFunction+0xa8>)
  402a60:	4798      	blx	r3
	turnOffLED(led1);
  402a62:	4b05      	ldr	r3, [pc, #20]	; (402a78 <prevButtonFunction+0x98>)
  402a64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402a66:	4c09      	ldr	r4, [pc, #36]	; (402a8c <prevButtonFunction+0xac>)
  402a68:	47a0      	blx	r4
}
  402a6a:	bf00      	nop
  402a6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402a70:	00402c01 	.word	0x00402c01
  402a74:	00402981 	.word	0x00402981
  402a78:	20400988 	.word	0x20400988
  402a7c:	00402939 	.word	0x00402939
  402a80:	00402925 	.word	0x00402925
  402a84:	00403201 	.word	0x00403201
  402a88:	20400001 	.word	0x20400001
  402a8c:	0040295d 	.word	0x0040295d

00402a90 <playButtonFunction>:

void playButtonFunction(void) {
  402a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402a94:	af00      	add	r7, sp, #0
	play = !play;
  402a96:	4b26      	ldr	r3, [pc, #152]	; (402b30 <playButtonFunction+0xa0>)
  402a98:	681b      	ldr	r3, [r3, #0]
  402a9a:	2b00      	cmp	r3, #0
  402a9c:	bf0c      	ite	eq
  402a9e:	2301      	moveq	r3, #1
  402aa0:	2300      	movne	r3, #0
  402aa2:	b2db      	uxtb	r3, r3
  402aa4:	461a      	mov	r2, r3
  402aa6:	4b22      	ldr	r3, [pc, #136]	; (402b30 <playButtonFunction+0xa0>)
  402aa8:	601a      	str	r2, [r3, #0]
	writeLCD();
  402aaa:	4b22      	ldr	r3, [pc, #136]	; (402b34 <playButtonFunction+0xa4>)
  402aac:	4798      	blx	r3
	turnOnLED(led2);
  402aae:	4b22      	ldr	r3, [pc, #136]	; (402b38 <playButtonFunction+0xa8>)
  402ab0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402ab2:	4c22      	ldr	r4, [pc, #136]	; (402b3c <playButtonFunction+0xac>)
  402ab4:	47a0      	blx	r4
	delay_ms(200);
  402ab6:	4b22      	ldr	r3, [pc, #136]	; (402b40 <playButtonFunction+0xb0>)
  402ab8:	4798      	blx	r3
  402aba:	4603      	mov	r3, r0
  402abc:	4619      	mov	r1, r3
  402abe:	f04f 0200 	mov.w	r2, #0
  402ac2:	460b      	mov	r3, r1
  402ac4:	4614      	mov	r4, r2
  402ac6:	18db      	adds	r3, r3, r3
  402ac8:	eb44 0404 	adc.w	r4, r4, r4
  402acc:	185b      	adds	r3, r3, r1
  402ace:	eb44 0402 	adc.w	r4, r4, r2
  402ad2:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  402ad6:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  402ada:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  402ade:	4643      	mov	r3, r8
  402ae0:	464c      	mov	r4, r9
  402ae2:	185b      	adds	r3, r3, r1
  402ae4:	eb44 0402 	adc.w	r4, r4, r2
  402ae8:	00e6      	lsls	r6, r4, #3
  402aea:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  402aee:	00dd      	lsls	r5, r3, #3
  402af0:	462b      	mov	r3, r5
  402af2:	4634      	mov	r4, r6
  402af4:	4619      	mov	r1, r3
  402af6:	4622      	mov	r2, r4
  402af8:	f241 732b 	movw	r3, #5931	; 0x172b
  402afc:	f04f 0400 	mov.w	r4, #0
  402b00:	18cd      	adds	r5, r1, r3
  402b02:	eb42 0604 	adc.w	r6, r2, r4
  402b06:	4628      	mov	r0, r5
  402b08:	4631      	mov	r1, r6
  402b0a:	4c0e      	ldr	r4, [pc, #56]	; (402b44 <playButtonFunction+0xb4>)
  402b0c:	f241 722c 	movw	r2, #5932	; 0x172c
  402b10:	f04f 0300 	mov.w	r3, #0
  402b14:	47a0      	blx	r4
  402b16:	4603      	mov	r3, r0
  402b18:	460c      	mov	r4, r1
  402b1a:	4618      	mov	r0, r3
  402b1c:	4b0a      	ldr	r3, [pc, #40]	; (402b48 <playButtonFunction+0xb8>)
  402b1e:	4798      	blx	r3
	turnOffLED(led2);
  402b20:	4b05      	ldr	r3, [pc, #20]	; (402b38 <playButtonFunction+0xa8>)
  402b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402b24:	4c09      	ldr	r4, [pc, #36]	; (402b4c <playButtonFunction+0xbc>)
  402b26:	47a0      	blx	r4
}
  402b28:	bf00      	nop
  402b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402b2e:	bf00      	nop
  402b30:	20401678 	.word	0x20401678
  402b34:	00402981 	.word	0x00402981
  402b38:	20400998 	.word	0x20400998
  402b3c:	00402939 	.word	0x00402939
  402b40:	00402925 	.word	0x00402925
  402b44:	00403201 	.word	0x00403201
  402b48:	20400001 	.word	0x20400001
  402b4c:	0040295d 	.word	0x0040295d

00402b50 <nextButtonFunction>:

void nextButtonFunction(void) {
  402b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  402b54:	af00      	add	r7, sp, #0
	changeMusic(1);
  402b56:	2001      	movs	r0, #1
  402b58:	4b21      	ldr	r3, [pc, #132]	; (402be0 <nextButtonFunction+0x90>)
  402b5a:	4798      	blx	r3
	writeLCD();
  402b5c:	4b21      	ldr	r3, [pc, #132]	; (402be4 <nextButtonFunction+0x94>)
  402b5e:	4798      	blx	r3
	turnOnLED(led3);
  402b60:	4b21      	ldr	r3, [pc, #132]	; (402be8 <nextButtonFunction+0x98>)
  402b62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402b64:	4c21      	ldr	r4, [pc, #132]	; (402bec <nextButtonFunction+0x9c>)
  402b66:	47a0      	blx	r4
	delay_ms(200);
  402b68:	4b21      	ldr	r3, [pc, #132]	; (402bf0 <nextButtonFunction+0xa0>)
  402b6a:	4798      	blx	r3
  402b6c:	4603      	mov	r3, r0
  402b6e:	4619      	mov	r1, r3
  402b70:	f04f 0200 	mov.w	r2, #0
  402b74:	460b      	mov	r3, r1
  402b76:	4614      	mov	r4, r2
  402b78:	18db      	adds	r3, r3, r3
  402b7a:	eb44 0404 	adc.w	r4, r4, r4
  402b7e:	185b      	adds	r3, r3, r1
  402b80:	eb44 0402 	adc.w	r4, r4, r2
  402b84:	ea4f 09c4 	mov.w	r9, r4, lsl #3
  402b88:	ea49 7953 	orr.w	r9, r9, r3, lsr #29
  402b8c:	ea4f 08c3 	mov.w	r8, r3, lsl #3
  402b90:	4643      	mov	r3, r8
  402b92:	464c      	mov	r4, r9
  402b94:	185b      	adds	r3, r3, r1
  402b96:	eb44 0402 	adc.w	r4, r4, r2
  402b9a:	00e6      	lsls	r6, r4, #3
  402b9c:	ea46 7653 	orr.w	r6, r6, r3, lsr #29
  402ba0:	00dd      	lsls	r5, r3, #3
  402ba2:	462b      	mov	r3, r5
  402ba4:	4634      	mov	r4, r6
  402ba6:	4619      	mov	r1, r3
  402ba8:	4622      	mov	r2, r4
  402baa:	f241 732b 	movw	r3, #5931	; 0x172b
  402bae:	f04f 0400 	mov.w	r4, #0
  402bb2:	18cd      	adds	r5, r1, r3
  402bb4:	eb42 0604 	adc.w	r6, r2, r4
  402bb8:	4628      	mov	r0, r5
  402bba:	4631      	mov	r1, r6
  402bbc:	4c0d      	ldr	r4, [pc, #52]	; (402bf4 <nextButtonFunction+0xa4>)
  402bbe:	f241 722c 	movw	r2, #5932	; 0x172c
  402bc2:	f04f 0300 	mov.w	r3, #0
  402bc6:	47a0      	blx	r4
  402bc8:	4603      	mov	r3, r0
  402bca:	460c      	mov	r4, r1
  402bcc:	4618      	mov	r0, r3
  402bce:	4b0a      	ldr	r3, [pc, #40]	; (402bf8 <nextButtonFunction+0xa8>)
  402bd0:	4798      	blx	r3
	turnOffLED(led3);
  402bd2:	4b05      	ldr	r3, [pc, #20]	; (402be8 <nextButtonFunction+0x98>)
  402bd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402bd6:	4c09      	ldr	r4, [pc, #36]	; (402bfc <nextButtonFunction+0xac>)
  402bd8:	47a0      	blx	r4
}
  402bda:	bf00      	nop
  402bdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402be0:	00402c01 	.word	0x00402c01
  402be4:	00402981 	.word	0x00402981
  402be8:	204009a8 	.word	0x204009a8
  402bec:	00402939 	.word	0x00402939
  402bf0:	00402925 	.word	0x00402925
  402bf4:	00403201 	.word	0x00403201
  402bf8:	20400001 	.word	0x20400001
  402bfc:	0040295d 	.word	0x0040295d

00402c00 <changeMusic>:

void changeMusic(int next){
  402c00:	b480      	push	{r7}
  402c02:	b083      	sub	sp, #12
  402c04:	af00      	add	r7, sp, #0
  402c06:	6078      	str	r0, [r7, #4]
	musicNote = 0;
  402c08:	4b13      	ldr	r3, [pc, #76]	; (402c58 <changeMusic+0x58>)
  402c0a:	2200      	movs	r2, #0
  402c0c:	601a      	str	r2, [r3, #0]
	if (next){
  402c0e:	687b      	ldr	r3, [r7, #4]
  402c10:	2b00      	cmp	r3, #0
  402c12:	d00d      	beq.n	402c30 <changeMusic+0x30>
		if (musicIndex == 2){
  402c14:	4b11      	ldr	r3, [pc, #68]	; (402c5c <changeMusic+0x5c>)
  402c16:	681b      	ldr	r3, [r3, #0]
  402c18:	2b02      	cmp	r3, #2
  402c1a:	d103      	bne.n	402c24 <changeMusic+0x24>
			musicIndex = 0;
  402c1c:	4b0f      	ldr	r3, [pc, #60]	; (402c5c <changeMusic+0x5c>)
  402c1e:	2200      	movs	r2, #0
  402c20:	601a      	str	r2, [r3, #0]
			musicIndex = 2;
			} else {
			musicIndex -= 1;
		}
	}
}
  402c22:	e012      	b.n	402c4a <changeMusic+0x4a>
			musicIndex += 1;
  402c24:	4b0d      	ldr	r3, [pc, #52]	; (402c5c <changeMusic+0x5c>)
  402c26:	681b      	ldr	r3, [r3, #0]
  402c28:	3301      	adds	r3, #1
  402c2a:	4a0c      	ldr	r2, [pc, #48]	; (402c5c <changeMusic+0x5c>)
  402c2c:	6013      	str	r3, [r2, #0]
}
  402c2e:	e00c      	b.n	402c4a <changeMusic+0x4a>
		if (musicIndex == 0){
  402c30:	4b0a      	ldr	r3, [pc, #40]	; (402c5c <changeMusic+0x5c>)
  402c32:	681b      	ldr	r3, [r3, #0]
  402c34:	2b00      	cmp	r3, #0
  402c36:	d103      	bne.n	402c40 <changeMusic+0x40>
			musicIndex = 2;
  402c38:	4b08      	ldr	r3, [pc, #32]	; (402c5c <changeMusic+0x5c>)
  402c3a:	2202      	movs	r2, #2
  402c3c:	601a      	str	r2, [r3, #0]
}
  402c3e:	e004      	b.n	402c4a <changeMusic+0x4a>
			musicIndex -= 1;
  402c40:	4b06      	ldr	r3, [pc, #24]	; (402c5c <changeMusic+0x5c>)
  402c42:	681b      	ldr	r3, [r3, #0]
  402c44:	3b01      	subs	r3, #1
  402c46:	4a05      	ldr	r2, [pc, #20]	; (402c5c <changeMusic+0x5c>)
  402c48:	6013      	str	r3, [r2, #0]
}
  402c4a:	bf00      	nop
  402c4c:	370c      	adds	r7, #12
  402c4e:	46bd      	mov	sp, r7
  402c50:	f85d 7b04 	ldr.w	r7, [sp], #4
  402c54:	4770      	bx	lr
  402c56:	bf00      	nop
  402c58:	20401674 	.word	0x20401674
  402c5c:	2040167c 	.word	0x2040167c

00402c60 <enebleAllPeriph>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/
void enebleAllPeriph(int periphIdsList[], int size){
  402c60:	b580      	push	{r7, lr}
  402c62:	b084      	sub	sp, #16
  402c64:	af00      	add	r7, sp, #0
  402c66:	6078      	str	r0, [r7, #4]
  402c68:	6039      	str	r1, [r7, #0]
	for (int i = 0; i <size; i++)
  402c6a:	2300      	movs	r3, #0
  402c6c:	60fb      	str	r3, [r7, #12]
  402c6e:	e00a      	b.n	402c86 <enebleAllPeriph+0x26>
	{
		pmc_enable_periph_clk(periphIdsList[i]);
  402c70:	68fb      	ldr	r3, [r7, #12]
  402c72:	009b      	lsls	r3, r3, #2
  402c74:	687a      	ldr	r2, [r7, #4]
  402c76:	4413      	add	r3, r2
  402c78:	681b      	ldr	r3, [r3, #0]
  402c7a:	4618      	mov	r0, r3
  402c7c:	4b06      	ldr	r3, [pc, #24]	; (402c98 <enebleAllPeriph+0x38>)
  402c7e:	4798      	blx	r3
	for (int i = 0; i <size; i++)
  402c80:	68fb      	ldr	r3, [r7, #12]
  402c82:	3301      	adds	r3, #1
  402c84:	60fb      	str	r3, [r7, #12]
  402c86:	68fa      	ldr	r2, [r7, #12]
  402c88:	683b      	ldr	r3, [r7, #0]
  402c8a:	429a      	cmp	r2, r3
  402c8c:	dbf0      	blt.n	402c70 <enebleAllPeriph+0x10>
	}
}
  402c8e:	bf00      	nop
  402c90:	3710      	adds	r7, #16
  402c92:	46bd      	mov	sp, r7
  402c94:	bd80      	pop	{r7, pc}
  402c96:	bf00      	nop
  402c98:	004023d5 	.word	0x004023d5

00402c9c <configureLeds>:


void configureLeds(component leds[], int size){
  402c9c:	b590      	push	{r4, r7, lr}
  402c9e:	b089      	sub	sp, #36	; 0x24
  402ca0:	af00      	add	r7, sp, #0
  402ca2:	6078      	str	r0, [r7, #4]
  402ca4:	6039      	str	r1, [r7, #0]

	for (int i = 0; i < size; i++)
  402ca6:	2300      	movs	r3, #0
  402ca8:	61fb      	str	r3, [r7, #28]
  402caa:	e013      	b.n	402cd4 <configureLeds+0x38>
	{
		component led = leds[i];
  402cac:	69fb      	ldr	r3, [r7, #28]
  402cae:	011b      	lsls	r3, r3, #4
  402cb0:	687a      	ldr	r2, [r7, #4]
  402cb2:	4413      	add	r3, r2
  402cb4:	f107 040c 	add.w	r4, r7, #12
  402cb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402cba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		pio_configure(led.pio, PIO_OUTPUT_1, led.mask, PIO_DEFAULT);
  402cbe:	68f8      	ldr	r0, [r7, #12]
  402cc0:	69bb      	ldr	r3, [r7, #24]
  402cc2:	461a      	mov	r2, r3
  402cc4:	2300      	movs	r3, #0
  402cc6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  402cca:	4c06      	ldr	r4, [pc, #24]	; (402ce4 <configureLeds+0x48>)
  402ccc:	47a0      	blx	r4
	for (int i = 0; i < size; i++)
  402cce:	69fb      	ldr	r3, [r7, #28]
  402cd0:	3301      	adds	r3, #1
  402cd2:	61fb      	str	r3, [r7, #28]
  402cd4:	69fa      	ldr	r2, [r7, #28]
  402cd6:	683b      	ldr	r3, [r7, #0]
  402cd8:	429a      	cmp	r2, r3
  402cda:	dbe7      	blt.n	402cac <configureLeds+0x10>
	}
}
  402cdc:	bf00      	nop
  402cde:	3724      	adds	r7, #36	; 0x24
  402ce0:	46bd      	mov	sp, r7
  402ce2:	bd90      	pop	{r4, r7, pc}
  402ce4:	00401da5 	.word	0x00401da5

00402ce8 <configureButtons>:

void configureButtons(component buttons[], int size){
  402ce8:	b590      	push	{r4, r7, lr}
  402cea:	b08d      	sub	sp, #52	; 0x34
  402cec:	af02      	add	r7, sp, #8
  402cee:	6078      	str	r0, [r7, #4]
  402cf0:	6039      	str	r1, [r7, #0]
	voidFunction buttonsFunctions[3] = {
  402cf2:	4a23      	ldr	r2, [pc, #140]	; (402d80 <configureButtons+0x98>)
  402cf4:	f107 0318 	add.w	r3, r7, #24
  402cf8:	ca07      	ldmia	r2, {r0, r1, r2}
  402cfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		prevButtonFunction,
		playButtonFunction,
		nextButtonFunction
	};
	for (int i = 0; i < size; i++)
  402cfe:	2300      	movs	r3, #0
  402d00:	627b      	str	r3, [r7, #36]	; 0x24
  402d02:	e034      	b.n	402d6e <configureButtons+0x86>
	{
		component button = buttons[i];
  402d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d06:	011b      	lsls	r3, r3, #4
  402d08:	687a      	ldr	r2, [r7, #4]
  402d0a:	4413      	add	r3, r2
  402d0c:	f107 0408 	add.w	r4, r7, #8
  402d10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  402d12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		pio_configure(button.pio, PIO_INPUT, button.mask, PIO_PULLUP | PIO_DEBOUNCE );
  402d16:	68b8      	ldr	r0, [r7, #8]
  402d18:	697b      	ldr	r3, [r7, #20]
  402d1a:	461a      	mov	r2, r3
  402d1c:	2309      	movs	r3, #9
  402d1e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  402d22:	4c18      	ldr	r4, [pc, #96]	; (402d84 <configureButtons+0x9c>)
  402d24:	47a0      	blx	r4
		// Configura interrupção no pino referente ao botao e associa
		// função de callback caso uma interrupção for gerada
		pio_handler_set(
  402d26:	68b8      	ldr	r0, [r7, #8]
			button.pio,
			button.pio_id,
  402d28:	68fb      	ldr	r3, [r7, #12]
		pio_handler_set(
  402d2a:	4619      	mov	r1, r3
			button.mask,
  402d2c:	697b      	ldr	r3, [r7, #20]
		pio_handler_set(
  402d2e:	461a      	mov	r2, r3
			PIO_IT_FALL_EDGE,
			buttonsFunctions[i]
  402d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d32:	009b      	lsls	r3, r3, #2
  402d34:	f107 0428 	add.w	r4, r7, #40	; 0x28
  402d38:	4423      	add	r3, r4
  402d3a:	f853 3c10 	ldr.w	r3, [r3, #-16]
		pio_handler_set(
  402d3e:	9300      	str	r3, [sp, #0]
  402d40:	2350      	movs	r3, #80	; 0x50
  402d42:	4c11      	ldr	r4, [pc, #68]	; (402d88 <configureButtons+0xa0>)
  402d44:	47a0      	blx	r4
		);
		// Ativa interrupção
		pio_enable_interrupt(button.pio, button.mask);
  402d46:	68bb      	ldr	r3, [r7, #8]
  402d48:	697a      	ldr	r2, [r7, #20]
  402d4a:	4611      	mov	r1, r2
  402d4c:	4618      	mov	r0, r3
  402d4e:	4b0f      	ldr	r3, [pc, #60]	; (402d8c <configureButtons+0xa4>)
  402d50:	4798      	blx	r3
			
		// Configura NVIC para receber interrupcoes do PIO do botao
		// com prioridade i (quanto mais próximo de 0 maior)
		NVIC_EnableIRQ(button.pio_id);
  402d52:	68fb      	ldr	r3, [r7, #12]
  402d54:	b25b      	sxtb	r3, r3
  402d56:	4618      	mov	r0, r3
  402d58:	4b0d      	ldr	r3, [pc, #52]	; (402d90 <configureButtons+0xa8>)
  402d5a:	4798      	blx	r3
		NVIC_SetPriority(button.pio_id, 4); // Prioridade 4
  402d5c:	68fb      	ldr	r3, [r7, #12]
  402d5e:	b25b      	sxtb	r3, r3
  402d60:	2104      	movs	r1, #4
  402d62:	4618      	mov	r0, r3
  402d64:	4b0b      	ldr	r3, [pc, #44]	; (402d94 <configureButtons+0xac>)
  402d66:	4798      	blx	r3
	for (int i = 0; i < size; i++)
  402d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  402d6a:	3301      	adds	r3, #1
  402d6c:	627b      	str	r3, [r7, #36]	; 0x24
  402d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
  402d70:	683b      	ldr	r3, [r7, #0]
  402d72:	429a      	cmp	r2, r3
  402d74:	dbc6      	blt.n	402d04 <configureButtons+0x1c>
	}
}
  402d76:	bf00      	nop
  402d78:	372c      	adds	r7, #44	; 0x2c
  402d7a:	46bd      	mov	sp, r7
  402d7c:	bd90      	pop	{r4, r7, pc}
  402d7e:	bf00      	nop
  402d80:	00408584 	.word	0x00408584
  402d84:	00401da5 	.word	0x00401da5
  402d88:	00401ff9 	.word	0x00401ff9
  402d8c:	00401edd 	.word	0x00401edd
  402d90:	00402809 	.word	0x00402809
  402d94:	0040283d 	.word	0x0040283d

00402d98 <configureBuzzer>:

void configureBuzzer(void){
  402d98:	b590      	push	{r4, r7, lr}
  402d9a:	b083      	sub	sp, #12
  402d9c:	af02      	add	r7, sp, #8
	pio_set_output(buzzer.pio,buzzer.mask,0,0,0);
  402d9e:	4b0c      	ldr	r3, [pc, #48]	; (402dd0 <configureBuzzer+0x38>)
  402da0:	6818      	ldr	r0, [r3, #0]
  402da2:	4b0b      	ldr	r3, [pc, #44]	; (402dd0 <configureBuzzer+0x38>)
  402da4:	68db      	ldr	r3, [r3, #12]
  402da6:	4619      	mov	r1, r3
  402da8:	2300      	movs	r3, #0
  402daa:	9300      	str	r3, [sp, #0]
  402dac:	2300      	movs	r3, #0
  402dae:	2200      	movs	r2, #0
  402db0:	4c08      	ldr	r4, [pc, #32]	; (402dd4 <configureBuzzer+0x3c>)
  402db2:	47a0      	blx	r4
	pio_configure(buzzer.pio, PIO_OUTPUT_0, buzzer.mask, PIO_DEFAULT);
  402db4:	4b06      	ldr	r3, [pc, #24]	; (402dd0 <configureBuzzer+0x38>)
  402db6:	6818      	ldr	r0, [r3, #0]
  402db8:	4b05      	ldr	r3, [pc, #20]	; (402dd0 <configureBuzzer+0x38>)
  402dba:	68db      	ldr	r3, [r3, #12]
  402dbc:	461a      	mov	r2, r3
  402dbe:	2300      	movs	r3, #0
  402dc0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  402dc4:	4c04      	ldr	r4, [pc, #16]	; (402dd8 <configureBuzzer+0x40>)
  402dc6:	47a0      	blx	r4

}
  402dc8:	bf00      	nop
  402dca:	3704      	adds	r7, #4
  402dcc:	46bd      	mov	sp, r7
  402dce:	bd90      	pop	{r4, r7, pc}
  402dd0:	204009e8 	.word	0x204009e8
  402dd4:	00401d41 	.word	0x00401d41
  402dd8:	00401da5 	.word	0x00401da5

00402ddc <playMusic>:

int playMusic(music atualMusic){
  402ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
  402dde:	b089      	sub	sp, #36	; 0x24
  402de0:	af00      	add	r7, sp, #0
  402de2:	463c      	mov	r4, r7
  402de4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int atualMusicIndex = musicIndex;
  402de8:	4b91      	ldr	r3, [pc, #580]	; (403030 <playMusic+0x254>)
  402dea:	681b      	ldr	r3, [r3, #0]
  402dec:	61bb      	str	r3, [r7, #24]
	while (musicNote < atualMusic.size && play) {
  402dee:	e106      	b.n	402ffe <playMusic+0x222>
		int wait = atualMusic.duration[musicNote] * atualMusic.songspeed;
  402df0:	687a      	ldr	r2, [r7, #4]
  402df2:	4b90      	ldr	r3, [pc, #576]	; (403034 <playMusic+0x258>)
  402df4:	681b      	ldr	r3, [r3, #0]
  402df6:	009b      	lsls	r3, r3, #2
  402df8:	4413      	add	r3, r2
  402dfa:	681b      	ldr	r3, [r3, #0]
  402dfc:	ee07 3a90 	vmov	s15, r3
  402e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  402e04:	edd7 7a02 	vldr	s15, [r7, #8]
  402e08:	ee67 7a27 	vmul.f32	s15, s14, s15
  402e0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  402e10:	ee17 3a90 	vmov	r3, s15
  402e14:	617b      	str	r3, [r7, #20]
		int frequency = atualMusic.melody[musicNote];
  402e16:	683a      	ldr	r2, [r7, #0]
  402e18:	4b86      	ldr	r3, [pc, #536]	; (403034 <playMusic+0x258>)
  402e1a:	681b      	ldr	r3, [r3, #0]
  402e1c:	009b      	lsls	r3, r3, #2
  402e1e:	4413      	add	r3, r2
  402e20:	681b      	ldr	r3, [r3, #0]
  402e22:	613b      	str	r3, [r7, #16]
		for(int step = 0; step < wait; step++){
  402e24:	2300      	movs	r3, #0
  402e26:	61fb      	str	r3, [r7, #28]
  402e28:	e096      	b.n	402f58 <playMusic+0x17c>
			pio_set(BUZZER_PIO,BUZZER_PIO_IDX_MASK);
  402e2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402e2e:	4882      	ldr	r0, [pc, #520]	; (403038 <playMusic+0x25c>)
  402e30:	4b82      	ldr	r3, [pc, #520]	; (40303c <playMusic+0x260>)
  402e32:	4798      	blx	r3
			delay_us(1000000/frequency/2);
  402e34:	4a82      	ldr	r2, [pc, #520]	; (403040 <playMusic+0x264>)
  402e36:	693b      	ldr	r3, [r7, #16]
  402e38:	fb92 f3f3 	sdiv	r3, r2, r3
  402e3c:	2b00      	cmp	r3, #0
  402e3e:	d027      	beq.n	402e90 <playMusic+0xb4>
  402e40:	4a7f      	ldr	r2, [pc, #508]	; (403040 <playMusic+0x264>)
  402e42:	693b      	ldr	r3, [r7, #16]
  402e44:	fb92 f3f3 	sdiv	r3, r2, r3
  402e48:	461d      	mov	r5, r3
  402e4a:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402e4e:	4b7d      	ldr	r3, [pc, #500]	; (403044 <playMusic+0x268>)
  402e50:	4798      	blx	r3
  402e52:	4603      	mov	r3, r0
  402e54:	f04f 0400 	mov.w	r4, #0
  402e58:	fb03 f106 	mul.w	r1, r3, r6
  402e5c:	fb05 f204 	mul.w	r2, r5, r4
  402e60:	440a      	add	r2, r1
  402e62:	fba5 3403 	umull	r3, r4, r5, r3
  402e66:	4422      	add	r2, r4
  402e68:	4614      	mov	r4, r2
  402e6a:	4977      	ldr	r1, [pc, #476]	; (403048 <playMusic+0x26c>)
  402e6c:	f04f 0200 	mov.w	r2, #0
  402e70:	185d      	adds	r5, r3, r1
  402e72:	eb44 0602 	adc.w	r6, r4, r2
  402e76:	4628      	mov	r0, r5
  402e78:	4631      	mov	r1, r6
  402e7a:	4c74      	ldr	r4, [pc, #464]	; (40304c <playMusic+0x270>)
  402e7c:	4a74      	ldr	r2, [pc, #464]	; (403050 <playMusic+0x274>)
  402e7e:	f04f 0300 	mov.w	r3, #0
  402e82:	47a0      	blx	r4
  402e84:	4603      	mov	r3, r0
  402e86:	460c      	mov	r4, r1
  402e88:	4618      	mov	r0, r3
  402e8a:	4b72      	ldr	r3, [pc, #456]	; (403054 <playMusic+0x278>)
  402e8c:	4798      	blx	r3
  402e8e:	e016      	b.n	402ebe <playMusic+0xe2>
  402e90:	4b6c      	ldr	r3, [pc, #432]	; (403044 <playMusic+0x268>)
  402e92:	4798      	blx	r3
  402e94:	4603      	mov	r3, r0
  402e96:	f04f 0400 	mov.w	r4, #0
  402e9a:	496b      	ldr	r1, [pc, #428]	; (403048 <playMusic+0x26c>)
  402e9c:	f04f 0200 	mov.w	r2, #0
  402ea0:	185d      	adds	r5, r3, r1
  402ea2:	eb44 0602 	adc.w	r6, r4, r2
  402ea6:	4628      	mov	r0, r5
  402ea8:	4631      	mov	r1, r6
  402eaa:	4c68      	ldr	r4, [pc, #416]	; (40304c <playMusic+0x270>)
  402eac:	4a68      	ldr	r2, [pc, #416]	; (403050 <playMusic+0x274>)
  402eae:	f04f 0300 	mov.w	r3, #0
  402eb2:	47a0      	blx	r4
  402eb4:	4603      	mov	r3, r0
  402eb6:	460c      	mov	r4, r1
  402eb8:	4618      	mov	r0, r3
  402eba:	4b66      	ldr	r3, [pc, #408]	; (403054 <playMusic+0x278>)
  402ebc:	4798      	blx	r3
			pio_clear(BUZZER_PIO,BUZZER_PIO_IDX_MASK);
  402ebe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  402ec2:	485d      	ldr	r0, [pc, #372]	; (403038 <playMusic+0x25c>)
  402ec4:	4b64      	ldr	r3, [pc, #400]	; (403058 <playMusic+0x27c>)
  402ec6:	4798      	blx	r3
			delay_us(1000000/frequency/2);
  402ec8:	4a5d      	ldr	r2, [pc, #372]	; (403040 <playMusic+0x264>)
  402eca:	693b      	ldr	r3, [r7, #16]
  402ecc:	fb92 f3f3 	sdiv	r3, r2, r3
  402ed0:	2b00      	cmp	r3, #0
  402ed2:	d027      	beq.n	402f24 <playMusic+0x148>
  402ed4:	4a5a      	ldr	r2, [pc, #360]	; (403040 <playMusic+0x264>)
  402ed6:	693b      	ldr	r3, [r7, #16]
  402ed8:	fb92 f3f3 	sdiv	r3, r2, r3
  402edc:	461d      	mov	r5, r3
  402ede:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402ee2:	4b58      	ldr	r3, [pc, #352]	; (403044 <playMusic+0x268>)
  402ee4:	4798      	blx	r3
  402ee6:	4603      	mov	r3, r0
  402ee8:	f04f 0400 	mov.w	r4, #0
  402eec:	fb03 f106 	mul.w	r1, r3, r6
  402ef0:	fb05 f204 	mul.w	r2, r5, r4
  402ef4:	440a      	add	r2, r1
  402ef6:	fba5 3403 	umull	r3, r4, r5, r3
  402efa:	4422      	add	r2, r4
  402efc:	4614      	mov	r4, r2
  402efe:	4952      	ldr	r1, [pc, #328]	; (403048 <playMusic+0x26c>)
  402f00:	f04f 0200 	mov.w	r2, #0
  402f04:	185d      	adds	r5, r3, r1
  402f06:	eb44 0602 	adc.w	r6, r4, r2
  402f0a:	4628      	mov	r0, r5
  402f0c:	4631      	mov	r1, r6
  402f0e:	4c4f      	ldr	r4, [pc, #316]	; (40304c <playMusic+0x270>)
  402f10:	4a4f      	ldr	r2, [pc, #316]	; (403050 <playMusic+0x274>)
  402f12:	f04f 0300 	mov.w	r3, #0
  402f16:	47a0      	blx	r4
  402f18:	4603      	mov	r3, r0
  402f1a:	460c      	mov	r4, r1
  402f1c:	4618      	mov	r0, r3
  402f1e:	4b4d      	ldr	r3, [pc, #308]	; (403054 <playMusic+0x278>)
  402f20:	4798      	blx	r3
  402f22:	e016      	b.n	402f52 <playMusic+0x176>
  402f24:	4b47      	ldr	r3, [pc, #284]	; (403044 <playMusic+0x268>)
  402f26:	4798      	blx	r3
  402f28:	4603      	mov	r3, r0
  402f2a:	f04f 0400 	mov.w	r4, #0
  402f2e:	4946      	ldr	r1, [pc, #280]	; (403048 <playMusic+0x26c>)
  402f30:	f04f 0200 	mov.w	r2, #0
  402f34:	185d      	adds	r5, r3, r1
  402f36:	eb44 0602 	adc.w	r6, r4, r2
  402f3a:	4628      	mov	r0, r5
  402f3c:	4631      	mov	r1, r6
  402f3e:	4c43      	ldr	r4, [pc, #268]	; (40304c <playMusic+0x270>)
  402f40:	4a43      	ldr	r2, [pc, #268]	; (403050 <playMusic+0x274>)
  402f42:	f04f 0300 	mov.w	r3, #0
  402f46:	47a0      	blx	r4
  402f48:	4603      	mov	r3, r0
  402f4a:	460c      	mov	r4, r1
  402f4c:	4618      	mov	r0, r3
  402f4e:	4b41      	ldr	r3, [pc, #260]	; (403054 <playMusic+0x278>)
  402f50:	4798      	blx	r3
		for(int step = 0; step < wait; step++){
  402f52:	69fb      	ldr	r3, [r7, #28]
  402f54:	3301      	adds	r3, #1
  402f56:	61fb      	str	r3, [r7, #28]
  402f58:	69fa      	ldr	r2, [r7, #28]
  402f5a:	697b      	ldr	r3, [r7, #20]
  402f5c:	429a      	cmp	r2, r3
  402f5e:	f6ff af64 	blt.w	402e2a <playMusic+0x4e>
		}
		delay_us(wait);
  402f62:	697b      	ldr	r3, [r7, #20]
  402f64:	2b00      	cmp	r3, #0
  402f66:	d024      	beq.n	402fb2 <playMusic+0x1d6>
  402f68:	697b      	ldr	r3, [r7, #20]
  402f6a:	461d      	mov	r5, r3
  402f6c:	ea4f 76e5 	mov.w	r6, r5, asr #31
  402f70:	4b34      	ldr	r3, [pc, #208]	; (403044 <playMusic+0x268>)
  402f72:	4798      	blx	r3
  402f74:	4603      	mov	r3, r0
  402f76:	f04f 0400 	mov.w	r4, #0
  402f7a:	fb03 f106 	mul.w	r1, r3, r6
  402f7e:	fb05 f204 	mul.w	r2, r5, r4
  402f82:	440a      	add	r2, r1
  402f84:	fba5 3403 	umull	r3, r4, r5, r3
  402f88:	4422      	add	r2, r4
  402f8a:	4614      	mov	r4, r2
  402f8c:	492e      	ldr	r1, [pc, #184]	; (403048 <playMusic+0x26c>)
  402f8e:	f04f 0200 	mov.w	r2, #0
  402f92:	185d      	adds	r5, r3, r1
  402f94:	eb44 0602 	adc.w	r6, r4, r2
  402f98:	4628      	mov	r0, r5
  402f9a:	4631      	mov	r1, r6
  402f9c:	4c2b      	ldr	r4, [pc, #172]	; (40304c <playMusic+0x270>)
  402f9e:	4a2c      	ldr	r2, [pc, #176]	; (403050 <playMusic+0x274>)
  402fa0:	f04f 0300 	mov.w	r3, #0
  402fa4:	47a0      	blx	r4
  402fa6:	4603      	mov	r3, r0
  402fa8:	460c      	mov	r4, r1
  402faa:	4618      	mov	r0, r3
  402fac:	4b29      	ldr	r3, [pc, #164]	; (403054 <playMusic+0x278>)
  402fae:	4798      	blx	r3
  402fb0:	e016      	b.n	402fe0 <playMusic+0x204>
  402fb2:	4b24      	ldr	r3, [pc, #144]	; (403044 <playMusic+0x268>)
  402fb4:	4798      	blx	r3
  402fb6:	4603      	mov	r3, r0
  402fb8:	f04f 0400 	mov.w	r4, #0
  402fbc:	4922      	ldr	r1, [pc, #136]	; (403048 <playMusic+0x26c>)
  402fbe:	f04f 0200 	mov.w	r2, #0
  402fc2:	185d      	adds	r5, r3, r1
  402fc4:	eb44 0602 	adc.w	r6, r4, r2
  402fc8:	4628      	mov	r0, r5
  402fca:	4631      	mov	r1, r6
  402fcc:	4c1f      	ldr	r4, [pc, #124]	; (40304c <playMusic+0x270>)
  402fce:	4a20      	ldr	r2, [pc, #128]	; (403050 <playMusic+0x274>)
  402fd0:	f04f 0300 	mov.w	r3, #0
  402fd4:	47a0      	blx	r4
  402fd6:	4603      	mov	r3, r0
  402fd8:	460c      	mov	r4, r1
  402fda:	4618      	mov	r0, r3
  402fdc:	4b1d      	ldr	r3, [pc, #116]	; (403054 <playMusic+0x278>)
  402fde:	4798      	blx	r3
		if (atualMusicIndex != musicIndex)
  402fe0:	4b13      	ldr	r3, [pc, #76]	; (403030 <playMusic+0x254>)
  402fe2:	681b      	ldr	r3, [r3, #0]
  402fe4:	69ba      	ldr	r2, [r7, #24]
  402fe6:	429a      	cmp	r2, r3
  402fe8:	d004      	beq.n	402ff4 <playMusic+0x218>
		{
			musicNote = 0;
  402fea:	4b12      	ldr	r3, [pc, #72]	; (403034 <playMusic+0x258>)
  402fec:	2200      	movs	r2, #0
  402fee:	601a      	str	r2, [r3, #0]
			return 0;
  402ff0:	2300      	movs	r3, #0
  402ff2:	e018      	b.n	403026 <playMusic+0x24a>
		} else {
			musicNote += 1;
  402ff4:	4b0f      	ldr	r3, [pc, #60]	; (403034 <playMusic+0x258>)
  402ff6:	681b      	ldr	r3, [r3, #0]
  402ff8:	3301      	adds	r3, #1
  402ffa:	4a0e      	ldr	r2, [pc, #56]	; (403034 <playMusic+0x258>)
  402ffc:	6013      	str	r3, [r2, #0]
	while (musicNote < atualMusic.size && play) {
  402ffe:	68fa      	ldr	r2, [r7, #12]
  403000:	4b0c      	ldr	r3, [pc, #48]	; (403034 <playMusic+0x258>)
  403002:	681b      	ldr	r3, [r3, #0]
  403004:	429a      	cmp	r2, r3
  403006:	dd04      	ble.n	403012 <playMusic+0x236>
  403008:	4b14      	ldr	r3, [pc, #80]	; (40305c <playMusic+0x280>)
  40300a:	681b      	ldr	r3, [r3, #0]
  40300c:	2b00      	cmp	r3, #0
  40300e:	f47f aeef 	bne.w	402df0 <playMusic+0x14>
		}

	}
	if (play) {
  403012:	4b12      	ldr	r3, [pc, #72]	; (40305c <playMusic+0x280>)
  403014:	681b      	ldr	r3, [r3, #0]
  403016:	2b00      	cmp	r3, #0
  403018:	d004      	beq.n	403024 <playMusic+0x248>
		changeMusic(1);
  40301a:	2001      	movs	r0, #1
  40301c:	4b10      	ldr	r3, [pc, #64]	; (403060 <playMusic+0x284>)
  40301e:	4798      	blx	r3
		writeLCD();
  403020:	4b10      	ldr	r3, [pc, #64]	; (403064 <playMusic+0x288>)
  403022:	4798      	blx	r3
	}

	return 0;
  403024:	2300      	movs	r3, #0
}
  403026:	4618      	mov	r0, r3
  403028:	3724      	adds	r7, #36	; 0x24
  40302a:	46bd      	mov	sp, r7
  40302c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40302e:	bf00      	nop
  403030:	2040167c 	.word	0x2040167c
  403034:	20401674 	.word	0x20401674
  403038:	400e1200 	.word	0x400e1200
  40303c:	00401b79 	.word	0x00401b79
  403040:	0007a120 	.word	0x0007a120
  403044:	00402925 	.word	0x00402925
  403048:	005a83df 	.word	0x005a83df
  40304c:	00403201 	.word	0x00403201
  403050:	005a83e0 	.word	0x005a83e0
  403054:	20400001 	.word	0x20400001
  403058:	00401b95 	.word	0x00401b95
  40305c:	20401678 	.word	0x20401678
  403060:	00402c01 	.word	0x00402c01
  403064:	00402981 	.word	0x00402981

00403068 <init>:

// Função de inicialização do uC
void init(void){
  403068:	b590      	push	{r4, r7, lr}
  40306a:	b09d      	sub	sp, #116	; 0x74
  40306c:	af00      	add	r7, sp, #0
	board_init();
  40306e:	4b29      	ldr	r3, [pc, #164]	; (403114 <init+0xac>)
  403070:	4798      	blx	r3
	// Initialize the board clock
	sysclk_init();
  403072:	4b29      	ldr	r3, [pc, #164]	; (403118 <init+0xb0>)
  403074:	4798      	blx	r3
	
	// Desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  403076:	4b29      	ldr	r3, [pc, #164]	; (40311c <init+0xb4>)
  403078:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  40307c:	605a      	str	r2, [r3, #4]
	
	int periphIdsList[4] = {
  40307e:	4b28      	ldr	r3, [pc, #160]	; (403120 <init+0xb8>)
  403080:	f107 0460 	add.w	r4, r7, #96	; 0x60
  403084:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403086:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		ID_PIOA,
		ID_PIOB,
		ID_PIOC,
		ID_PIOD
	};
	enebleAllPeriph(periphIdsList, 4);
  40308a:	f107 0360 	add.w	r3, r7, #96	; 0x60
  40308e:	2104      	movs	r1, #4
  403090:	4618      	mov	r0, r3
  403092:	4b24      	ldr	r3, [pc, #144]	; (403124 <init+0xbc>)
  403094:	4798      	blx	r3
	
	
	components myBoardComponents = {
  403096:	4b24      	ldr	r3, [pc, #144]	; (403128 <init+0xc0>)
  403098:	463c      	mov	r4, r7
  40309a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40309c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4030a0:	4b22      	ldr	r3, [pc, #136]	; (40312c <init+0xc4>)
  4030a2:	f107 0410 	add.w	r4, r7, #16
  4030a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4030a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4030ac:	4b20      	ldr	r3, [pc, #128]	; (403130 <init+0xc8>)
  4030ae:	f107 0420 	add.w	r4, r7, #32
  4030b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4030b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4030b8:	4b1e      	ldr	r3, [pc, #120]	; (403134 <init+0xcc>)
  4030ba:	f107 0430 	add.w	r4, r7, #48	; 0x30
  4030be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4030c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4030c4:	4b1c      	ldr	r3, [pc, #112]	; (403138 <init+0xd0>)
  4030c6:	f107 0440 	add.w	r4, r7, #64	; 0x40
  4030ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4030cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4030d0:	4b1a      	ldr	r3, [pc, #104]	; (40313c <init+0xd4>)
  4030d2:	f107 0450 	add.w	r4, r7, #80	; 0x50
  4030d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4030d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		},
	};
	
	
	//Configura os LEDs
	configureLeds(myBoardComponents.leds, 3);
  4030dc:	463b      	mov	r3, r7
  4030de:	3330      	adds	r3, #48	; 0x30
  4030e0:	2103      	movs	r1, #3
  4030e2:	4618      	mov	r0, r3
  4030e4:	4b16      	ldr	r3, [pc, #88]	; (403140 <init+0xd8>)
  4030e6:	4798      	blx	r3

	//Configura os botões
	configureButtons(myBoardComponents.buttons, 3);
  4030e8:	463b      	mov	r3, r7
  4030ea:	2103      	movs	r1, #3
  4030ec:	4618      	mov	r0, r3
  4030ee:	4b15      	ldr	r3, [pc, #84]	; (403144 <init+0xdc>)
  4030f0:	4798      	blx	r3
	
	//Configura o buzzer
	configureBuzzer();
  4030f2:	4b15      	ldr	r3, [pc, #84]	; (403148 <init+0xe0>)
  4030f4:	4798      	blx	r3

	play = 0;
  4030f6:	4b15      	ldr	r3, [pc, #84]	; (40314c <init+0xe4>)
  4030f8:	2200      	movs	r2, #0
  4030fa:	601a      	str	r2, [r3, #0]
	musicIndex = 0;
  4030fc:	4b14      	ldr	r3, [pc, #80]	; (403150 <init+0xe8>)
  4030fe:	2200      	movs	r2, #0
  403100:	601a      	str	r2, [r3, #0]
	musicNote = 0;
  403102:	4b14      	ldr	r3, [pc, #80]	; (403154 <init+0xec>)
  403104:	2200      	movs	r2, #0
  403106:	601a      	str	r2, [r3, #0]

	delay_init();
	//Init OLED Screen
	gfx_mono_ssd1306_init();
  403108:	4b13      	ldr	r3, [pc, #76]	; (403158 <init+0xf0>)
  40310a:	4798      	blx	r3
}
  40310c:	bf00      	nop
  40310e:	3774      	adds	r7, #116	; 0x74
  403110:	46bd      	mov	sp, r7
  403112:	bd90      	pop	{r4, r7, pc}
  403114:	00401ac9 	.word	0x00401ac9
  403118:	00401605 	.word	0x00401605
  40311c:	400e1850 	.word	0x400e1850
  403120:	00408590 	.word	0x00408590
  403124:	00402c61 	.word	0x00402c61
  403128:	204009b8 	.word	0x204009b8
  40312c:	204009c8 	.word	0x204009c8
  403130:	204009d8 	.word	0x204009d8
  403134:	20400988 	.word	0x20400988
  403138:	20400998 	.word	0x20400998
  40313c:	204009a8 	.word	0x204009a8
  403140:	00402c9d 	.word	0x00402c9d
  403144:	00402ce9 	.word	0x00402ce9
  403148:	00402d99 	.word	0x00402d99
  40314c:	20401678 	.word	0x20401678
  403150:	2040167c 	.word	0x2040167c
  403154:	20401674 	.word	0x20401674
  403158:	00400951 	.word	0x00400951

0040315c <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/
int main (void) {
  40315c:	b590      	push	{r4, r7, lr}
  40315e:	b099      	sub	sp, #100	; 0x64
  403160:	af00      	add	r7, sp, #0
	init();
  403162:	4b1f      	ldr	r3, [pc, #124]	; (4031e0 <main+0x84>)
  403164:	4798      	blx	r3
	play = 1;
  403166:	4b1f      	ldr	r3, [pc, #124]	; (4031e4 <main+0x88>)
  403168:	2201      	movs	r2, #1
  40316a:	601a      	str	r2, [r3, #0]
	musicIndex = 1;
  40316c:	4b1e      	ldr	r3, [pc, #120]	; (4031e8 <main+0x8c>)
  40316e:	2201      	movs	r2, #1
  403170:	601a      	str	r2, [r3, #0]
	writeLCD();
  403172:	4b1e      	ldr	r3, [pc, #120]	; (4031ec <main+0x90>)
  403174:	4798      	blx	r3
	
	music music1 = {
  403176:	4b1e      	ldr	r3, [pc, #120]	; (4031f0 <main+0x94>)
  403178:	f107 0450 	add.w	r4, r7, #80	; 0x50
  40317c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40317e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  &duration1,
	  1.5,
	  203
	};

	music music2 = {
  403182:	4b1c      	ldr	r3, [pc, #112]	; (4031f4 <main+0x98>)
  403184:	f107 0440 	add.w	r4, r7, #64	; 0x40
  403188:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  40318a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  &duration2,
	  1,
	  20
	};

	music music3 = {
  40318e:	4b1a      	ldr	r3, [pc, #104]	; (4031f8 <main+0x9c>)
  403190:	f107 0430 	add.w	r4, r7, #48	; 0x30
  403194:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  403196:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  &duration3,
	  50,
	  78
	};

	music musics[3] = {
  40319a:	463c      	mov	r4, r7
  40319c:	f107 0350 	add.w	r3, r7, #80	; 0x50
  4031a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4031a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4031a6:	f107 0410 	add.w	r4, r7, #16
  4031aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
  4031ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4031b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  4031b4:	f107 0420 	add.w	r4, r7, #32
  4031b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
  4031bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4031be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		music2,
		music3
	};
	
	while(1) {
		if (play) {
  4031c2:	4b08      	ldr	r3, [pc, #32]	; (4031e4 <main+0x88>)
  4031c4:	681b      	ldr	r3, [r3, #0]
  4031c6:	2b00      	cmp	r3, #0
  4031c8:	d0fb      	beq.n	4031c2 <main+0x66>
			playMusic(musics[musicIndex]);
  4031ca:	4b07      	ldr	r3, [pc, #28]	; (4031e8 <main+0x8c>)
  4031cc:	681b      	ldr	r3, [r3, #0]
  4031ce:	011b      	lsls	r3, r3, #4
  4031d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
  4031d4:	4413      	add	r3, r2
  4031d6:	3b60      	subs	r3, #96	; 0x60
  4031d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
  4031da:	4c08      	ldr	r4, [pc, #32]	; (4031fc <main+0xa0>)
  4031dc:	47a0      	blx	r4
		if (play) {
  4031de:	e7f0      	b.n	4031c2 <main+0x66>
  4031e0:	00403069 	.word	0x00403069
  4031e4:	20401678 	.word	0x20401678
  4031e8:	2040167c 	.word	0x2040167c
  4031ec:	00402981 	.word	0x00402981
  4031f0:	004085a0 	.word	0x004085a0
  4031f4:	004085b0 	.word	0x004085b0
  4031f8:	004085c0 	.word	0x004085c0
  4031fc:	00402ddd 	.word	0x00402ddd

00403200 <__aeabi_uldivmod>:
  403200:	b953      	cbnz	r3, 403218 <__aeabi_uldivmod+0x18>
  403202:	b94a      	cbnz	r2, 403218 <__aeabi_uldivmod+0x18>
  403204:	2900      	cmp	r1, #0
  403206:	bf08      	it	eq
  403208:	2800      	cmpeq	r0, #0
  40320a:	bf1c      	itt	ne
  40320c:	f04f 31ff 	movne.w	r1, #4294967295
  403210:	f04f 30ff 	movne.w	r0, #4294967295
  403214:	f000 b97a 	b.w	40350c <__aeabi_idiv0>
  403218:	f1ad 0c08 	sub.w	ip, sp, #8
  40321c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  403220:	f000 f806 	bl	403230 <__udivmoddi4>
  403224:	f8dd e004 	ldr.w	lr, [sp, #4]
  403228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  40322c:	b004      	add	sp, #16
  40322e:	4770      	bx	lr

00403230 <__udivmoddi4>:
  403230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403234:	468c      	mov	ip, r1
  403236:	460d      	mov	r5, r1
  403238:	4604      	mov	r4, r0
  40323a:	9e08      	ldr	r6, [sp, #32]
  40323c:	2b00      	cmp	r3, #0
  40323e:	d151      	bne.n	4032e4 <__udivmoddi4+0xb4>
  403240:	428a      	cmp	r2, r1
  403242:	4617      	mov	r7, r2
  403244:	d96d      	bls.n	403322 <__udivmoddi4+0xf2>
  403246:	fab2 fe82 	clz	lr, r2
  40324a:	f1be 0f00 	cmp.w	lr, #0
  40324e:	d00b      	beq.n	403268 <__udivmoddi4+0x38>
  403250:	f1ce 0c20 	rsb	ip, lr, #32
  403254:	fa01 f50e 	lsl.w	r5, r1, lr
  403258:	fa20 fc0c 	lsr.w	ip, r0, ip
  40325c:	fa02 f70e 	lsl.w	r7, r2, lr
  403260:	ea4c 0c05 	orr.w	ip, ip, r5
  403264:	fa00 f40e 	lsl.w	r4, r0, lr
  403268:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  40326c:	0c25      	lsrs	r5, r4, #16
  40326e:	fbbc f8fa 	udiv	r8, ip, sl
  403272:	fa1f f987 	uxth.w	r9, r7
  403276:	fb0a cc18 	mls	ip, sl, r8, ip
  40327a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40327e:	fb08 f309 	mul.w	r3, r8, r9
  403282:	42ab      	cmp	r3, r5
  403284:	d90a      	bls.n	40329c <__udivmoddi4+0x6c>
  403286:	19ed      	adds	r5, r5, r7
  403288:	f108 32ff 	add.w	r2, r8, #4294967295
  40328c:	f080 8123 	bcs.w	4034d6 <__udivmoddi4+0x2a6>
  403290:	42ab      	cmp	r3, r5
  403292:	f240 8120 	bls.w	4034d6 <__udivmoddi4+0x2a6>
  403296:	f1a8 0802 	sub.w	r8, r8, #2
  40329a:	443d      	add	r5, r7
  40329c:	1aed      	subs	r5, r5, r3
  40329e:	b2a4      	uxth	r4, r4
  4032a0:	fbb5 f0fa 	udiv	r0, r5, sl
  4032a4:	fb0a 5510 	mls	r5, sl, r0, r5
  4032a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4032ac:	fb00 f909 	mul.w	r9, r0, r9
  4032b0:	45a1      	cmp	r9, r4
  4032b2:	d909      	bls.n	4032c8 <__udivmoddi4+0x98>
  4032b4:	19e4      	adds	r4, r4, r7
  4032b6:	f100 33ff 	add.w	r3, r0, #4294967295
  4032ba:	f080 810a 	bcs.w	4034d2 <__udivmoddi4+0x2a2>
  4032be:	45a1      	cmp	r9, r4
  4032c0:	f240 8107 	bls.w	4034d2 <__udivmoddi4+0x2a2>
  4032c4:	3802      	subs	r0, #2
  4032c6:	443c      	add	r4, r7
  4032c8:	eba4 0409 	sub.w	r4, r4, r9
  4032cc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4032d0:	2100      	movs	r1, #0
  4032d2:	2e00      	cmp	r6, #0
  4032d4:	d061      	beq.n	40339a <__udivmoddi4+0x16a>
  4032d6:	fa24 f40e 	lsr.w	r4, r4, lr
  4032da:	2300      	movs	r3, #0
  4032dc:	6034      	str	r4, [r6, #0]
  4032de:	6073      	str	r3, [r6, #4]
  4032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032e4:	428b      	cmp	r3, r1
  4032e6:	d907      	bls.n	4032f8 <__udivmoddi4+0xc8>
  4032e8:	2e00      	cmp	r6, #0
  4032ea:	d054      	beq.n	403396 <__udivmoddi4+0x166>
  4032ec:	2100      	movs	r1, #0
  4032ee:	e886 0021 	stmia.w	r6, {r0, r5}
  4032f2:	4608      	mov	r0, r1
  4032f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4032f8:	fab3 f183 	clz	r1, r3
  4032fc:	2900      	cmp	r1, #0
  4032fe:	f040 808e 	bne.w	40341e <__udivmoddi4+0x1ee>
  403302:	42ab      	cmp	r3, r5
  403304:	d302      	bcc.n	40330c <__udivmoddi4+0xdc>
  403306:	4282      	cmp	r2, r0
  403308:	f200 80fa 	bhi.w	403500 <__udivmoddi4+0x2d0>
  40330c:	1a84      	subs	r4, r0, r2
  40330e:	eb65 0503 	sbc.w	r5, r5, r3
  403312:	2001      	movs	r0, #1
  403314:	46ac      	mov	ip, r5
  403316:	2e00      	cmp	r6, #0
  403318:	d03f      	beq.n	40339a <__udivmoddi4+0x16a>
  40331a:	e886 1010 	stmia.w	r6, {r4, ip}
  40331e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403322:	b912      	cbnz	r2, 40332a <__udivmoddi4+0xfa>
  403324:	2701      	movs	r7, #1
  403326:	fbb7 f7f2 	udiv	r7, r7, r2
  40332a:	fab7 fe87 	clz	lr, r7
  40332e:	f1be 0f00 	cmp.w	lr, #0
  403332:	d134      	bne.n	40339e <__udivmoddi4+0x16e>
  403334:	1beb      	subs	r3, r5, r7
  403336:	0c3a      	lsrs	r2, r7, #16
  403338:	fa1f fc87 	uxth.w	ip, r7
  40333c:	2101      	movs	r1, #1
  40333e:	fbb3 f8f2 	udiv	r8, r3, r2
  403342:	0c25      	lsrs	r5, r4, #16
  403344:	fb02 3318 	mls	r3, r2, r8, r3
  403348:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  40334c:	fb0c f308 	mul.w	r3, ip, r8
  403350:	42ab      	cmp	r3, r5
  403352:	d907      	bls.n	403364 <__udivmoddi4+0x134>
  403354:	19ed      	adds	r5, r5, r7
  403356:	f108 30ff 	add.w	r0, r8, #4294967295
  40335a:	d202      	bcs.n	403362 <__udivmoddi4+0x132>
  40335c:	42ab      	cmp	r3, r5
  40335e:	f200 80d1 	bhi.w	403504 <__udivmoddi4+0x2d4>
  403362:	4680      	mov	r8, r0
  403364:	1aed      	subs	r5, r5, r3
  403366:	b2a3      	uxth	r3, r4
  403368:	fbb5 f0f2 	udiv	r0, r5, r2
  40336c:	fb02 5510 	mls	r5, r2, r0, r5
  403370:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  403374:	fb0c fc00 	mul.w	ip, ip, r0
  403378:	45a4      	cmp	ip, r4
  40337a:	d907      	bls.n	40338c <__udivmoddi4+0x15c>
  40337c:	19e4      	adds	r4, r4, r7
  40337e:	f100 33ff 	add.w	r3, r0, #4294967295
  403382:	d202      	bcs.n	40338a <__udivmoddi4+0x15a>
  403384:	45a4      	cmp	ip, r4
  403386:	f200 80b8 	bhi.w	4034fa <__udivmoddi4+0x2ca>
  40338a:	4618      	mov	r0, r3
  40338c:	eba4 040c 	sub.w	r4, r4, ip
  403390:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  403394:	e79d      	b.n	4032d2 <__udivmoddi4+0xa2>
  403396:	4631      	mov	r1, r6
  403398:	4630      	mov	r0, r6
  40339a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40339e:	f1ce 0420 	rsb	r4, lr, #32
  4033a2:	fa05 f30e 	lsl.w	r3, r5, lr
  4033a6:	fa07 f70e 	lsl.w	r7, r7, lr
  4033aa:	fa20 f804 	lsr.w	r8, r0, r4
  4033ae:	0c3a      	lsrs	r2, r7, #16
  4033b0:	fa25 f404 	lsr.w	r4, r5, r4
  4033b4:	ea48 0803 	orr.w	r8, r8, r3
  4033b8:	fbb4 f1f2 	udiv	r1, r4, r2
  4033bc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4033c0:	fb02 4411 	mls	r4, r2, r1, r4
  4033c4:	fa1f fc87 	uxth.w	ip, r7
  4033c8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4033cc:	fb01 f30c 	mul.w	r3, r1, ip
  4033d0:	42ab      	cmp	r3, r5
  4033d2:	fa00 f40e 	lsl.w	r4, r0, lr
  4033d6:	d909      	bls.n	4033ec <__udivmoddi4+0x1bc>
  4033d8:	19ed      	adds	r5, r5, r7
  4033da:	f101 30ff 	add.w	r0, r1, #4294967295
  4033de:	f080 808a 	bcs.w	4034f6 <__udivmoddi4+0x2c6>
  4033e2:	42ab      	cmp	r3, r5
  4033e4:	f240 8087 	bls.w	4034f6 <__udivmoddi4+0x2c6>
  4033e8:	3902      	subs	r1, #2
  4033ea:	443d      	add	r5, r7
  4033ec:	1aeb      	subs	r3, r5, r3
  4033ee:	fa1f f588 	uxth.w	r5, r8
  4033f2:	fbb3 f0f2 	udiv	r0, r3, r2
  4033f6:	fb02 3310 	mls	r3, r2, r0, r3
  4033fa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4033fe:	fb00 f30c 	mul.w	r3, r0, ip
  403402:	42ab      	cmp	r3, r5
  403404:	d907      	bls.n	403416 <__udivmoddi4+0x1e6>
  403406:	19ed      	adds	r5, r5, r7
  403408:	f100 38ff 	add.w	r8, r0, #4294967295
  40340c:	d26f      	bcs.n	4034ee <__udivmoddi4+0x2be>
  40340e:	42ab      	cmp	r3, r5
  403410:	d96d      	bls.n	4034ee <__udivmoddi4+0x2be>
  403412:	3802      	subs	r0, #2
  403414:	443d      	add	r5, r7
  403416:	1aeb      	subs	r3, r5, r3
  403418:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  40341c:	e78f      	b.n	40333e <__udivmoddi4+0x10e>
  40341e:	f1c1 0720 	rsb	r7, r1, #32
  403422:	fa22 f807 	lsr.w	r8, r2, r7
  403426:	408b      	lsls	r3, r1
  403428:	fa05 f401 	lsl.w	r4, r5, r1
  40342c:	ea48 0303 	orr.w	r3, r8, r3
  403430:	fa20 fe07 	lsr.w	lr, r0, r7
  403434:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  403438:	40fd      	lsrs	r5, r7
  40343a:	ea4e 0e04 	orr.w	lr, lr, r4
  40343e:	fbb5 f9fc 	udiv	r9, r5, ip
  403442:	ea4f 441e 	mov.w	r4, lr, lsr #16
  403446:	fb0c 5519 	mls	r5, ip, r9, r5
  40344a:	fa1f f883 	uxth.w	r8, r3
  40344e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  403452:	fb09 f408 	mul.w	r4, r9, r8
  403456:	42ac      	cmp	r4, r5
  403458:	fa02 f201 	lsl.w	r2, r2, r1
  40345c:	fa00 fa01 	lsl.w	sl, r0, r1
  403460:	d908      	bls.n	403474 <__udivmoddi4+0x244>
  403462:	18ed      	adds	r5, r5, r3
  403464:	f109 30ff 	add.w	r0, r9, #4294967295
  403468:	d243      	bcs.n	4034f2 <__udivmoddi4+0x2c2>
  40346a:	42ac      	cmp	r4, r5
  40346c:	d941      	bls.n	4034f2 <__udivmoddi4+0x2c2>
  40346e:	f1a9 0902 	sub.w	r9, r9, #2
  403472:	441d      	add	r5, r3
  403474:	1b2d      	subs	r5, r5, r4
  403476:	fa1f fe8e 	uxth.w	lr, lr
  40347a:	fbb5 f0fc 	udiv	r0, r5, ip
  40347e:	fb0c 5510 	mls	r5, ip, r0, r5
  403482:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  403486:	fb00 f808 	mul.w	r8, r0, r8
  40348a:	45a0      	cmp	r8, r4
  40348c:	d907      	bls.n	40349e <__udivmoddi4+0x26e>
  40348e:	18e4      	adds	r4, r4, r3
  403490:	f100 35ff 	add.w	r5, r0, #4294967295
  403494:	d229      	bcs.n	4034ea <__udivmoddi4+0x2ba>
  403496:	45a0      	cmp	r8, r4
  403498:	d927      	bls.n	4034ea <__udivmoddi4+0x2ba>
  40349a:	3802      	subs	r0, #2
  40349c:	441c      	add	r4, r3
  40349e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  4034a2:	eba4 0408 	sub.w	r4, r4, r8
  4034a6:	fba0 8902 	umull	r8, r9, r0, r2
  4034aa:	454c      	cmp	r4, r9
  4034ac:	46c6      	mov	lr, r8
  4034ae:	464d      	mov	r5, r9
  4034b0:	d315      	bcc.n	4034de <__udivmoddi4+0x2ae>
  4034b2:	d012      	beq.n	4034da <__udivmoddi4+0x2aa>
  4034b4:	b156      	cbz	r6, 4034cc <__udivmoddi4+0x29c>
  4034b6:	ebba 030e 	subs.w	r3, sl, lr
  4034ba:	eb64 0405 	sbc.w	r4, r4, r5
  4034be:	fa04 f707 	lsl.w	r7, r4, r7
  4034c2:	40cb      	lsrs	r3, r1
  4034c4:	431f      	orrs	r7, r3
  4034c6:	40cc      	lsrs	r4, r1
  4034c8:	6037      	str	r7, [r6, #0]
  4034ca:	6074      	str	r4, [r6, #4]
  4034cc:	2100      	movs	r1, #0
  4034ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4034d2:	4618      	mov	r0, r3
  4034d4:	e6f8      	b.n	4032c8 <__udivmoddi4+0x98>
  4034d6:	4690      	mov	r8, r2
  4034d8:	e6e0      	b.n	40329c <__udivmoddi4+0x6c>
  4034da:	45c2      	cmp	sl, r8
  4034dc:	d2ea      	bcs.n	4034b4 <__udivmoddi4+0x284>
  4034de:	ebb8 0e02 	subs.w	lr, r8, r2
  4034e2:	eb69 0503 	sbc.w	r5, r9, r3
  4034e6:	3801      	subs	r0, #1
  4034e8:	e7e4      	b.n	4034b4 <__udivmoddi4+0x284>
  4034ea:	4628      	mov	r0, r5
  4034ec:	e7d7      	b.n	40349e <__udivmoddi4+0x26e>
  4034ee:	4640      	mov	r0, r8
  4034f0:	e791      	b.n	403416 <__udivmoddi4+0x1e6>
  4034f2:	4681      	mov	r9, r0
  4034f4:	e7be      	b.n	403474 <__udivmoddi4+0x244>
  4034f6:	4601      	mov	r1, r0
  4034f8:	e778      	b.n	4033ec <__udivmoddi4+0x1bc>
  4034fa:	3802      	subs	r0, #2
  4034fc:	443c      	add	r4, r7
  4034fe:	e745      	b.n	40338c <__udivmoddi4+0x15c>
  403500:	4608      	mov	r0, r1
  403502:	e708      	b.n	403316 <__udivmoddi4+0xe6>
  403504:	f1a8 0802 	sub.w	r8, r8, #2
  403508:	443d      	add	r5, r7
  40350a:	e72b      	b.n	403364 <__udivmoddi4+0x134>

0040350c <__aeabi_idiv0>:
  40350c:	4770      	bx	lr
  40350e:	bf00      	nop

00403510 <__libc_init_array>:
  403510:	b570      	push	{r4, r5, r6, lr}
  403512:	4e0f      	ldr	r6, [pc, #60]	; (403550 <__libc_init_array+0x40>)
  403514:	4d0f      	ldr	r5, [pc, #60]	; (403554 <__libc_init_array+0x44>)
  403516:	1b76      	subs	r6, r6, r5
  403518:	10b6      	asrs	r6, r6, #2
  40351a:	bf18      	it	ne
  40351c:	2400      	movne	r4, #0
  40351e:	d005      	beq.n	40352c <__libc_init_array+0x1c>
  403520:	3401      	adds	r4, #1
  403522:	f855 3b04 	ldr.w	r3, [r5], #4
  403526:	4798      	blx	r3
  403528:	42a6      	cmp	r6, r4
  40352a:	d1f9      	bne.n	403520 <__libc_init_array+0x10>
  40352c:	4e0a      	ldr	r6, [pc, #40]	; (403558 <__libc_init_array+0x48>)
  40352e:	4d0b      	ldr	r5, [pc, #44]	; (40355c <__libc_init_array+0x4c>)
  403530:	1b76      	subs	r6, r6, r5
  403532:	f005 f991 	bl	408858 <_init>
  403536:	10b6      	asrs	r6, r6, #2
  403538:	bf18      	it	ne
  40353a:	2400      	movne	r4, #0
  40353c:	d006      	beq.n	40354c <__libc_init_array+0x3c>
  40353e:	3401      	adds	r4, #1
  403540:	f855 3b04 	ldr.w	r3, [r5], #4
  403544:	4798      	blx	r3
  403546:	42a6      	cmp	r6, r4
  403548:	d1f9      	bne.n	40353e <__libc_init_array+0x2e>
  40354a:	bd70      	pop	{r4, r5, r6, pc}
  40354c:	bd70      	pop	{r4, r5, r6, pc}
  40354e:	bf00      	nop
  403550:	00408864 	.word	0x00408864
  403554:	00408864 	.word	0x00408864
  403558:	0040886c 	.word	0x0040886c
  40355c:	00408864 	.word	0x00408864

00403560 <memset>:
  403560:	b470      	push	{r4, r5, r6}
  403562:	0786      	lsls	r6, r0, #30
  403564:	d046      	beq.n	4035f4 <memset+0x94>
  403566:	1e54      	subs	r4, r2, #1
  403568:	2a00      	cmp	r2, #0
  40356a:	d041      	beq.n	4035f0 <memset+0x90>
  40356c:	b2ca      	uxtb	r2, r1
  40356e:	4603      	mov	r3, r0
  403570:	e002      	b.n	403578 <memset+0x18>
  403572:	f114 34ff 	adds.w	r4, r4, #4294967295
  403576:	d33b      	bcc.n	4035f0 <memset+0x90>
  403578:	f803 2b01 	strb.w	r2, [r3], #1
  40357c:	079d      	lsls	r5, r3, #30
  40357e:	d1f8      	bne.n	403572 <memset+0x12>
  403580:	2c03      	cmp	r4, #3
  403582:	d92e      	bls.n	4035e2 <memset+0x82>
  403584:	b2cd      	uxtb	r5, r1
  403586:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  40358a:	2c0f      	cmp	r4, #15
  40358c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  403590:	d919      	bls.n	4035c6 <memset+0x66>
  403592:	f103 0210 	add.w	r2, r3, #16
  403596:	4626      	mov	r6, r4
  403598:	3e10      	subs	r6, #16
  40359a:	2e0f      	cmp	r6, #15
  40359c:	f842 5c10 	str.w	r5, [r2, #-16]
  4035a0:	f842 5c0c 	str.w	r5, [r2, #-12]
  4035a4:	f842 5c08 	str.w	r5, [r2, #-8]
  4035a8:	f842 5c04 	str.w	r5, [r2, #-4]
  4035ac:	f102 0210 	add.w	r2, r2, #16
  4035b0:	d8f2      	bhi.n	403598 <memset+0x38>
  4035b2:	f1a4 0210 	sub.w	r2, r4, #16
  4035b6:	f022 020f 	bic.w	r2, r2, #15
  4035ba:	f004 040f 	and.w	r4, r4, #15
  4035be:	3210      	adds	r2, #16
  4035c0:	2c03      	cmp	r4, #3
  4035c2:	4413      	add	r3, r2
  4035c4:	d90d      	bls.n	4035e2 <memset+0x82>
  4035c6:	461e      	mov	r6, r3
  4035c8:	4622      	mov	r2, r4
  4035ca:	3a04      	subs	r2, #4
  4035cc:	2a03      	cmp	r2, #3
  4035ce:	f846 5b04 	str.w	r5, [r6], #4
  4035d2:	d8fa      	bhi.n	4035ca <memset+0x6a>
  4035d4:	1f22      	subs	r2, r4, #4
  4035d6:	f022 0203 	bic.w	r2, r2, #3
  4035da:	3204      	adds	r2, #4
  4035dc:	4413      	add	r3, r2
  4035de:	f004 0403 	and.w	r4, r4, #3
  4035e2:	b12c      	cbz	r4, 4035f0 <memset+0x90>
  4035e4:	b2c9      	uxtb	r1, r1
  4035e6:	441c      	add	r4, r3
  4035e8:	f803 1b01 	strb.w	r1, [r3], #1
  4035ec:	429c      	cmp	r4, r3
  4035ee:	d1fb      	bne.n	4035e8 <memset+0x88>
  4035f0:	bc70      	pop	{r4, r5, r6}
  4035f2:	4770      	bx	lr
  4035f4:	4614      	mov	r4, r2
  4035f6:	4603      	mov	r3, r0
  4035f8:	e7c2      	b.n	403580 <memset+0x20>
  4035fa:	bf00      	nop

004035fc <sprintf>:
  4035fc:	b40e      	push	{r1, r2, r3}
  4035fe:	b5f0      	push	{r4, r5, r6, r7, lr}
  403600:	b09c      	sub	sp, #112	; 0x70
  403602:	ab21      	add	r3, sp, #132	; 0x84
  403604:	490f      	ldr	r1, [pc, #60]	; (403644 <sprintf+0x48>)
  403606:	f853 2b04 	ldr.w	r2, [r3], #4
  40360a:	9301      	str	r3, [sp, #4]
  40360c:	4605      	mov	r5, r0
  40360e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
  403612:	6808      	ldr	r0, [r1, #0]
  403614:	9502      	str	r5, [sp, #8]
  403616:	f44f 7702 	mov.w	r7, #520	; 0x208
  40361a:	f64f 76ff 	movw	r6, #65535	; 0xffff
  40361e:	a902      	add	r1, sp, #8
  403620:	9506      	str	r5, [sp, #24]
  403622:	f8ad 7014 	strh.w	r7, [sp, #20]
  403626:	9404      	str	r4, [sp, #16]
  403628:	9407      	str	r4, [sp, #28]
  40362a:	f8ad 6016 	strh.w	r6, [sp, #22]
  40362e:	f000 f80b 	bl	403648 <_svfprintf_r>
  403632:	9b02      	ldr	r3, [sp, #8]
  403634:	2200      	movs	r2, #0
  403636:	701a      	strb	r2, [r3, #0]
  403638:	b01c      	add	sp, #112	; 0x70
  40363a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  40363e:	b003      	add	sp, #12
  403640:	4770      	bx	lr
  403642:	bf00      	nop
  403644:	204009f8 	.word	0x204009f8

00403648 <_svfprintf_r>:
  403648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40364c:	b0c3      	sub	sp, #268	; 0x10c
  40364e:	460c      	mov	r4, r1
  403650:	910b      	str	r1, [sp, #44]	; 0x2c
  403652:	4692      	mov	sl, r2
  403654:	930f      	str	r3, [sp, #60]	; 0x3c
  403656:	900c      	str	r0, [sp, #48]	; 0x30
  403658:	f002 fa0e 	bl	405a78 <_localeconv_r>
  40365c:	6803      	ldr	r3, [r0, #0]
  40365e:	931a      	str	r3, [sp, #104]	; 0x68
  403660:	4618      	mov	r0, r3
  403662:	f003 f8ed 	bl	406840 <strlen>
  403666:	89a3      	ldrh	r3, [r4, #12]
  403668:	9019      	str	r0, [sp, #100]	; 0x64
  40366a:	0619      	lsls	r1, r3, #24
  40366c:	d503      	bpl.n	403676 <_svfprintf_r+0x2e>
  40366e:	6923      	ldr	r3, [r4, #16]
  403670:	2b00      	cmp	r3, #0
  403672:	f001 8003 	beq.w	40467c <_svfprintf_r+0x1034>
  403676:	2300      	movs	r3, #0
  403678:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
  40367c:	9313      	str	r3, [sp, #76]	; 0x4c
  40367e:	9315      	str	r3, [sp, #84]	; 0x54
  403680:	9314      	str	r3, [sp, #80]	; 0x50
  403682:	9327      	str	r3, [sp, #156]	; 0x9c
  403684:	9326      	str	r3, [sp, #152]	; 0x98
  403686:	9318      	str	r3, [sp, #96]	; 0x60
  403688:	931b      	str	r3, [sp, #108]	; 0x6c
  40368a:	9309      	str	r3, [sp, #36]	; 0x24
  40368c:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
  403690:	46c8      	mov	r8, r9
  403692:	9316      	str	r3, [sp, #88]	; 0x58
  403694:	9317      	str	r3, [sp, #92]	; 0x5c
  403696:	f89a 3000 	ldrb.w	r3, [sl]
  40369a:	4654      	mov	r4, sl
  40369c:	b1e3      	cbz	r3, 4036d8 <_svfprintf_r+0x90>
  40369e:	2b25      	cmp	r3, #37	; 0x25
  4036a0:	d102      	bne.n	4036a8 <_svfprintf_r+0x60>
  4036a2:	e019      	b.n	4036d8 <_svfprintf_r+0x90>
  4036a4:	2b25      	cmp	r3, #37	; 0x25
  4036a6:	d003      	beq.n	4036b0 <_svfprintf_r+0x68>
  4036a8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  4036ac:	2b00      	cmp	r3, #0
  4036ae:	d1f9      	bne.n	4036a4 <_svfprintf_r+0x5c>
  4036b0:	eba4 050a 	sub.w	r5, r4, sl
  4036b4:	b185      	cbz	r5, 4036d8 <_svfprintf_r+0x90>
  4036b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4036b8:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4036ba:	f8c8 a000 	str.w	sl, [r8]
  4036be:	3301      	adds	r3, #1
  4036c0:	442a      	add	r2, r5
  4036c2:	2b07      	cmp	r3, #7
  4036c4:	f8c8 5004 	str.w	r5, [r8, #4]
  4036c8:	9227      	str	r2, [sp, #156]	; 0x9c
  4036ca:	9326      	str	r3, [sp, #152]	; 0x98
  4036cc:	dc7f      	bgt.n	4037ce <_svfprintf_r+0x186>
  4036ce:	f108 0808 	add.w	r8, r8, #8
  4036d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4036d4:	442b      	add	r3, r5
  4036d6:	9309      	str	r3, [sp, #36]	; 0x24
  4036d8:	7823      	ldrb	r3, [r4, #0]
  4036da:	2b00      	cmp	r3, #0
  4036dc:	d07f      	beq.n	4037de <_svfprintf_r+0x196>
  4036de:	2300      	movs	r3, #0
  4036e0:	461a      	mov	r2, r3
  4036e2:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  4036e6:	4619      	mov	r1, r3
  4036e8:	930d      	str	r3, [sp, #52]	; 0x34
  4036ea:	469b      	mov	fp, r3
  4036ec:	f04f 30ff 	mov.w	r0, #4294967295
  4036f0:	7863      	ldrb	r3, [r4, #1]
  4036f2:	900a      	str	r0, [sp, #40]	; 0x28
  4036f4:	f104 0a01 	add.w	sl, r4, #1
  4036f8:	f10a 0a01 	add.w	sl, sl, #1
  4036fc:	f1a3 0020 	sub.w	r0, r3, #32
  403700:	2858      	cmp	r0, #88	; 0x58
  403702:	f200 83c1 	bhi.w	403e88 <_svfprintf_r+0x840>
  403706:	e8df f010 	tbh	[pc, r0, lsl #1]
  40370a:	0238      	.short	0x0238
  40370c:	03bf03bf 	.word	0x03bf03bf
  403710:	03bf0240 	.word	0x03bf0240
  403714:	03bf03bf 	.word	0x03bf03bf
  403718:	03bf03bf 	.word	0x03bf03bf
  40371c:	024503bf 	.word	0x024503bf
  403720:	03bf0203 	.word	0x03bf0203
  403724:	026b005d 	.word	0x026b005d
  403728:	028603bf 	.word	0x028603bf
  40372c:	039d039d 	.word	0x039d039d
  403730:	039d039d 	.word	0x039d039d
  403734:	039d039d 	.word	0x039d039d
  403738:	039d039d 	.word	0x039d039d
  40373c:	03bf039d 	.word	0x03bf039d
  403740:	03bf03bf 	.word	0x03bf03bf
  403744:	03bf03bf 	.word	0x03bf03bf
  403748:	03bf03bf 	.word	0x03bf03bf
  40374c:	03bf03bf 	.word	0x03bf03bf
  403750:	033703bf 	.word	0x033703bf
  403754:	03bf0357 	.word	0x03bf0357
  403758:	03bf0357 	.word	0x03bf0357
  40375c:	03bf03bf 	.word	0x03bf03bf
  403760:	039803bf 	.word	0x039803bf
  403764:	03bf03bf 	.word	0x03bf03bf
  403768:	03bf03ad 	.word	0x03bf03ad
  40376c:	03bf03bf 	.word	0x03bf03bf
  403770:	03bf03bf 	.word	0x03bf03bf
  403774:	03bf0259 	.word	0x03bf0259
  403778:	031e03bf 	.word	0x031e03bf
  40377c:	03bf03bf 	.word	0x03bf03bf
  403780:	03bf03bf 	.word	0x03bf03bf
  403784:	03bf03bf 	.word	0x03bf03bf
  403788:	03bf03bf 	.word	0x03bf03bf
  40378c:	03bf03bf 	.word	0x03bf03bf
  403790:	02db02c6 	.word	0x02db02c6
  403794:	03570357 	.word	0x03570357
  403798:	028b0357 	.word	0x028b0357
  40379c:	03bf02db 	.word	0x03bf02db
  4037a0:	029003bf 	.word	0x029003bf
  4037a4:	029d03bf 	.word	0x029d03bf
  4037a8:	02b401cc 	.word	0x02b401cc
  4037ac:	03bf0208 	.word	0x03bf0208
  4037b0:	03bf01e1 	.word	0x03bf01e1
  4037b4:	03bf007e 	.word	0x03bf007e
  4037b8:	020d03bf 	.word	0x020d03bf
  4037bc:	980d      	ldr	r0, [sp, #52]	; 0x34
  4037be:	930f      	str	r3, [sp, #60]	; 0x3c
  4037c0:	4240      	negs	r0, r0
  4037c2:	900d      	str	r0, [sp, #52]	; 0x34
  4037c4:	f04b 0b04 	orr.w	fp, fp, #4
  4037c8:	f89a 3000 	ldrb.w	r3, [sl]
  4037cc:	e794      	b.n	4036f8 <_svfprintf_r+0xb0>
  4037ce:	aa25      	add	r2, sp, #148	; 0x94
  4037d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037d4:	f003 f8a2 	bl	40691c <__ssprint_r>
  4037d8:	b940      	cbnz	r0, 4037ec <_svfprintf_r+0x1a4>
  4037da:	46c8      	mov	r8, r9
  4037dc:	e779      	b.n	4036d2 <_svfprintf_r+0x8a>
  4037de:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  4037e0:	b123      	cbz	r3, 4037ec <_svfprintf_r+0x1a4>
  4037e2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4037e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4037e6:	aa25      	add	r2, sp, #148	; 0x94
  4037e8:	f003 f898 	bl	40691c <__ssprint_r>
  4037ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  4037ee:	899b      	ldrh	r3, [r3, #12]
  4037f0:	f013 0f40 	tst.w	r3, #64	; 0x40
  4037f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4037f6:	bf18      	it	ne
  4037f8:	f04f 33ff 	movne.w	r3, #4294967295
  4037fc:	9309      	str	r3, [sp, #36]	; 0x24
  4037fe:	9809      	ldr	r0, [sp, #36]	; 0x24
  403800:	b043      	add	sp, #268	; 0x10c
  403802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  403806:	f01b 0f20 	tst.w	fp, #32
  40380a:	9311      	str	r3, [sp, #68]	; 0x44
  40380c:	f040 81dd 	bne.w	403bca <_svfprintf_r+0x582>
  403810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403812:	f01b 0f10 	tst.w	fp, #16
  403816:	4613      	mov	r3, r2
  403818:	f040 856e 	bne.w	4042f8 <_svfprintf_r+0xcb0>
  40381c:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403820:	f000 856a 	beq.w	4042f8 <_svfprintf_r+0xcb0>
  403824:	8814      	ldrh	r4, [r2, #0]
  403826:	3204      	adds	r2, #4
  403828:	2500      	movs	r5, #0
  40382a:	2301      	movs	r3, #1
  40382c:	920f      	str	r2, [sp, #60]	; 0x3c
  40382e:	2700      	movs	r7, #0
  403830:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403834:	990a      	ldr	r1, [sp, #40]	; 0x28
  403836:	1c4a      	adds	r2, r1, #1
  403838:	f000 8265 	beq.w	403d06 <_svfprintf_r+0x6be>
  40383c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
  403840:	9207      	str	r2, [sp, #28]
  403842:	ea54 0205 	orrs.w	r2, r4, r5
  403846:	f040 8264 	bne.w	403d12 <_svfprintf_r+0x6ca>
  40384a:	2900      	cmp	r1, #0
  40384c:	f040 843c 	bne.w	4040c8 <_svfprintf_r+0xa80>
  403850:	2b00      	cmp	r3, #0
  403852:	f040 84d7 	bne.w	404204 <_svfprintf_r+0xbbc>
  403856:	f01b 0301 	ands.w	r3, fp, #1
  40385a:	930e      	str	r3, [sp, #56]	; 0x38
  40385c:	f000 8604 	beq.w	404468 <_svfprintf_r+0xe20>
  403860:	ae42      	add	r6, sp, #264	; 0x108
  403862:	2330      	movs	r3, #48	; 0x30
  403864:	f806 3d41 	strb.w	r3, [r6, #-65]!
  403868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40386a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40386c:	4293      	cmp	r3, r2
  40386e:	bfb8      	it	lt
  403870:	4613      	movlt	r3, r2
  403872:	9308      	str	r3, [sp, #32]
  403874:	2300      	movs	r3, #0
  403876:	9312      	str	r3, [sp, #72]	; 0x48
  403878:	b117      	cbz	r7, 403880 <_svfprintf_r+0x238>
  40387a:	9b08      	ldr	r3, [sp, #32]
  40387c:	3301      	adds	r3, #1
  40387e:	9308      	str	r3, [sp, #32]
  403880:	9b07      	ldr	r3, [sp, #28]
  403882:	f013 0302 	ands.w	r3, r3, #2
  403886:	9310      	str	r3, [sp, #64]	; 0x40
  403888:	d002      	beq.n	403890 <_svfprintf_r+0x248>
  40388a:	9b08      	ldr	r3, [sp, #32]
  40388c:	3302      	adds	r3, #2
  40388e:	9308      	str	r3, [sp, #32]
  403890:	9b07      	ldr	r3, [sp, #28]
  403892:	f013 0584 	ands.w	r5, r3, #132	; 0x84
  403896:	f040 830e 	bne.w	403eb6 <_svfprintf_r+0x86e>
  40389a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40389c:	9a08      	ldr	r2, [sp, #32]
  40389e:	eba3 0b02 	sub.w	fp, r3, r2
  4038a2:	f1bb 0f00 	cmp.w	fp, #0
  4038a6:	f340 8306 	ble.w	403eb6 <_svfprintf_r+0x86e>
  4038aa:	f1bb 0f10 	cmp.w	fp, #16
  4038ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4038b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4038b2:	dd29      	ble.n	403908 <_svfprintf_r+0x2c0>
  4038b4:	4643      	mov	r3, r8
  4038b6:	4621      	mov	r1, r4
  4038b8:	46a8      	mov	r8, r5
  4038ba:	2710      	movs	r7, #16
  4038bc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4038be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4038c0:	e006      	b.n	4038d0 <_svfprintf_r+0x288>
  4038c2:	f1ab 0b10 	sub.w	fp, fp, #16
  4038c6:	f1bb 0f10 	cmp.w	fp, #16
  4038ca:	f103 0308 	add.w	r3, r3, #8
  4038ce:	dd18      	ble.n	403902 <_svfprintf_r+0x2ba>
  4038d0:	3201      	adds	r2, #1
  4038d2:	48b7      	ldr	r0, [pc, #732]	; (403bb0 <_svfprintf_r+0x568>)
  4038d4:	9226      	str	r2, [sp, #152]	; 0x98
  4038d6:	3110      	adds	r1, #16
  4038d8:	2a07      	cmp	r2, #7
  4038da:	9127      	str	r1, [sp, #156]	; 0x9c
  4038dc:	e883 0081 	stmia.w	r3, {r0, r7}
  4038e0:	ddef      	ble.n	4038c2 <_svfprintf_r+0x27a>
  4038e2:	aa25      	add	r2, sp, #148	; 0x94
  4038e4:	4629      	mov	r1, r5
  4038e6:	4620      	mov	r0, r4
  4038e8:	f003 f818 	bl	40691c <__ssprint_r>
  4038ec:	2800      	cmp	r0, #0
  4038ee:	f47f af7d 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4038f2:	f1ab 0b10 	sub.w	fp, fp, #16
  4038f6:	f1bb 0f10 	cmp.w	fp, #16
  4038fa:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4038fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
  4038fe:	464b      	mov	r3, r9
  403900:	dce6      	bgt.n	4038d0 <_svfprintf_r+0x288>
  403902:	4645      	mov	r5, r8
  403904:	460c      	mov	r4, r1
  403906:	4698      	mov	r8, r3
  403908:	3201      	adds	r2, #1
  40390a:	4ba9      	ldr	r3, [pc, #676]	; (403bb0 <_svfprintf_r+0x568>)
  40390c:	9226      	str	r2, [sp, #152]	; 0x98
  40390e:	445c      	add	r4, fp
  403910:	2a07      	cmp	r2, #7
  403912:	9427      	str	r4, [sp, #156]	; 0x9c
  403914:	e888 0808 	stmia.w	r8, {r3, fp}
  403918:	f300 8498 	bgt.w	40424c <_svfprintf_r+0xc04>
  40391c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403920:	f108 0808 	add.w	r8, r8, #8
  403924:	b177      	cbz	r7, 403944 <_svfprintf_r+0x2fc>
  403926:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403928:	3301      	adds	r3, #1
  40392a:	3401      	adds	r4, #1
  40392c:	f10d 0177 	add.w	r1, sp, #119	; 0x77
  403930:	2201      	movs	r2, #1
  403932:	2b07      	cmp	r3, #7
  403934:	9427      	str	r4, [sp, #156]	; 0x9c
  403936:	9326      	str	r3, [sp, #152]	; 0x98
  403938:	e888 0006 	stmia.w	r8, {r1, r2}
  40393c:	f300 83db 	bgt.w	4040f6 <_svfprintf_r+0xaae>
  403940:	f108 0808 	add.w	r8, r8, #8
  403944:	9b10      	ldr	r3, [sp, #64]	; 0x40
  403946:	b16b      	cbz	r3, 403964 <_svfprintf_r+0x31c>
  403948:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40394a:	3301      	adds	r3, #1
  40394c:	3402      	adds	r4, #2
  40394e:	a91e      	add	r1, sp, #120	; 0x78
  403950:	2202      	movs	r2, #2
  403952:	2b07      	cmp	r3, #7
  403954:	9427      	str	r4, [sp, #156]	; 0x9c
  403956:	9326      	str	r3, [sp, #152]	; 0x98
  403958:	e888 0006 	stmia.w	r8, {r1, r2}
  40395c:	f300 83d6 	bgt.w	40410c <_svfprintf_r+0xac4>
  403960:	f108 0808 	add.w	r8, r8, #8
  403964:	2d80      	cmp	r5, #128	; 0x80
  403966:	f000 8315 	beq.w	403f94 <_svfprintf_r+0x94c>
  40396a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40396c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  40396e:	1a9f      	subs	r7, r3, r2
  403970:	2f00      	cmp	r7, #0
  403972:	dd36      	ble.n	4039e2 <_svfprintf_r+0x39a>
  403974:	2f10      	cmp	r7, #16
  403976:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403978:	4d8e      	ldr	r5, [pc, #568]	; (403bb4 <_svfprintf_r+0x56c>)
  40397a:	dd27      	ble.n	4039cc <_svfprintf_r+0x384>
  40397c:	4642      	mov	r2, r8
  40397e:	4621      	mov	r1, r4
  403980:	46b0      	mov	r8, r6
  403982:	f04f 0b10 	mov.w	fp, #16
  403986:	462e      	mov	r6, r5
  403988:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40398a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  40398c:	e004      	b.n	403998 <_svfprintf_r+0x350>
  40398e:	3f10      	subs	r7, #16
  403990:	2f10      	cmp	r7, #16
  403992:	f102 0208 	add.w	r2, r2, #8
  403996:	dd15      	ble.n	4039c4 <_svfprintf_r+0x37c>
  403998:	3301      	adds	r3, #1
  40399a:	3110      	adds	r1, #16
  40399c:	2b07      	cmp	r3, #7
  40399e:	9127      	str	r1, [sp, #156]	; 0x9c
  4039a0:	9326      	str	r3, [sp, #152]	; 0x98
  4039a2:	e882 0840 	stmia.w	r2, {r6, fp}
  4039a6:	ddf2      	ble.n	40398e <_svfprintf_r+0x346>
  4039a8:	aa25      	add	r2, sp, #148	; 0x94
  4039aa:	4629      	mov	r1, r5
  4039ac:	4620      	mov	r0, r4
  4039ae:	f002 ffb5 	bl	40691c <__ssprint_r>
  4039b2:	2800      	cmp	r0, #0
  4039b4:	f47f af1a 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4039b8:	3f10      	subs	r7, #16
  4039ba:	2f10      	cmp	r7, #16
  4039bc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4039be:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039c0:	464a      	mov	r2, r9
  4039c2:	dce9      	bgt.n	403998 <_svfprintf_r+0x350>
  4039c4:	4635      	mov	r5, r6
  4039c6:	460c      	mov	r4, r1
  4039c8:	4646      	mov	r6, r8
  4039ca:	4690      	mov	r8, r2
  4039cc:	3301      	adds	r3, #1
  4039ce:	443c      	add	r4, r7
  4039d0:	2b07      	cmp	r3, #7
  4039d2:	9427      	str	r4, [sp, #156]	; 0x9c
  4039d4:	9326      	str	r3, [sp, #152]	; 0x98
  4039d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4039da:	f300 8381 	bgt.w	4040e0 <_svfprintf_r+0xa98>
  4039de:	f108 0808 	add.w	r8, r8, #8
  4039e2:	9b07      	ldr	r3, [sp, #28]
  4039e4:	05df      	lsls	r7, r3, #23
  4039e6:	f100 8268 	bmi.w	403eba <_svfprintf_r+0x872>
  4039ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4039ec:	990e      	ldr	r1, [sp, #56]	; 0x38
  4039ee:	f8c8 6000 	str.w	r6, [r8]
  4039f2:	3301      	adds	r3, #1
  4039f4:	440c      	add	r4, r1
  4039f6:	2b07      	cmp	r3, #7
  4039f8:	9427      	str	r4, [sp, #156]	; 0x9c
  4039fa:	f8c8 1004 	str.w	r1, [r8, #4]
  4039fe:	9326      	str	r3, [sp, #152]	; 0x98
  403a00:	f300 834d 	bgt.w	40409e <_svfprintf_r+0xa56>
  403a04:	f108 0808 	add.w	r8, r8, #8
  403a08:	9b07      	ldr	r3, [sp, #28]
  403a0a:	075b      	lsls	r3, r3, #29
  403a0c:	d53a      	bpl.n	403a84 <_svfprintf_r+0x43c>
  403a0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403a10:	9a08      	ldr	r2, [sp, #32]
  403a12:	1a9d      	subs	r5, r3, r2
  403a14:	2d00      	cmp	r5, #0
  403a16:	dd35      	ble.n	403a84 <_svfprintf_r+0x43c>
  403a18:	2d10      	cmp	r5, #16
  403a1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a1c:	dd20      	ble.n	403a60 <_svfprintf_r+0x418>
  403a1e:	2610      	movs	r6, #16
  403a20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  403a22:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
  403a26:	e004      	b.n	403a32 <_svfprintf_r+0x3ea>
  403a28:	3d10      	subs	r5, #16
  403a2a:	2d10      	cmp	r5, #16
  403a2c:	f108 0808 	add.w	r8, r8, #8
  403a30:	dd16      	ble.n	403a60 <_svfprintf_r+0x418>
  403a32:	3301      	adds	r3, #1
  403a34:	4a5e      	ldr	r2, [pc, #376]	; (403bb0 <_svfprintf_r+0x568>)
  403a36:	9326      	str	r3, [sp, #152]	; 0x98
  403a38:	3410      	adds	r4, #16
  403a3a:	2b07      	cmp	r3, #7
  403a3c:	9427      	str	r4, [sp, #156]	; 0x9c
  403a3e:	e888 0044 	stmia.w	r8, {r2, r6}
  403a42:	ddf1      	ble.n	403a28 <_svfprintf_r+0x3e0>
  403a44:	aa25      	add	r2, sp, #148	; 0x94
  403a46:	4659      	mov	r1, fp
  403a48:	4638      	mov	r0, r7
  403a4a:	f002 ff67 	bl	40691c <__ssprint_r>
  403a4e:	2800      	cmp	r0, #0
  403a50:	f47f aecc 	bne.w	4037ec <_svfprintf_r+0x1a4>
  403a54:	3d10      	subs	r5, #16
  403a56:	2d10      	cmp	r5, #16
  403a58:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403a5a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403a5c:	46c8      	mov	r8, r9
  403a5e:	dce8      	bgt.n	403a32 <_svfprintf_r+0x3ea>
  403a60:	3301      	adds	r3, #1
  403a62:	4a53      	ldr	r2, [pc, #332]	; (403bb0 <_svfprintf_r+0x568>)
  403a64:	9326      	str	r3, [sp, #152]	; 0x98
  403a66:	442c      	add	r4, r5
  403a68:	2b07      	cmp	r3, #7
  403a6a:	9427      	str	r4, [sp, #156]	; 0x9c
  403a6c:	e888 0024 	stmia.w	r8, {r2, r5}
  403a70:	dd08      	ble.n	403a84 <_svfprintf_r+0x43c>
  403a72:	aa25      	add	r2, sp, #148	; 0x94
  403a74:	990b      	ldr	r1, [sp, #44]	; 0x2c
  403a76:	980c      	ldr	r0, [sp, #48]	; 0x30
  403a78:	f002 ff50 	bl	40691c <__ssprint_r>
  403a7c:	2800      	cmp	r0, #0
  403a7e:	f47f aeb5 	bne.w	4037ec <_svfprintf_r+0x1a4>
  403a82:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
  403a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  403a88:	9908      	ldr	r1, [sp, #32]
  403a8a:	428a      	cmp	r2, r1
  403a8c:	bfac      	ite	ge
  403a8e:	189b      	addge	r3, r3, r2
  403a90:	185b      	addlt	r3, r3, r1
  403a92:	9309      	str	r3, [sp, #36]	; 0x24
  403a94:	2c00      	cmp	r4, #0
  403a96:	f040 830d 	bne.w	4040b4 <_svfprintf_r+0xa6c>
  403a9a:	2300      	movs	r3, #0
  403a9c:	9326      	str	r3, [sp, #152]	; 0x98
  403a9e:	46c8      	mov	r8, r9
  403aa0:	e5f9      	b.n	403696 <_svfprintf_r+0x4e>
  403aa2:	9311      	str	r3, [sp, #68]	; 0x44
  403aa4:	f01b 0320 	ands.w	r3, fp, #32
  403aa8:	f040 81e3 	bne.w	403e72 <_svfprintf_r+0x82a>
  403aac:	f01b 0210 	ands.w	r2, fp, #16
  403ab0:	f040 842e 	bne.w	404310 <_svfprintf_r+0xcc8>
  403ab4:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
  403ab8:	f000 842a 	beq.w	404310 <_svfprintf_r+0xcc8>
  403abc:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403abe:	4613      	mov	r3, r2
  403ac0:	460a      	mov	r2, r1
  403ac2:	3204      	adds	r2, #4
  403ac4:	880c      	ldrh	r4, [r1, #0]
  403ac6:	920f      	str	r2, [sp, #60]	; 0x3c
  403ac8:	2500      	movs	r5, #0
  403aca:	e6b0      	b.n	40382e <_svfprintf_r+0x1e6>
  403acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403ace:	9311      	str	r3, [sp, #68]	; 0x44
  403ad0:	6816      	ldr	r6, [r2, #0]
  403ad2:	2400      	movs	r4, #0
  403ad4:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
  403ad8:	1d15      	adds	r5, r2, #4
  403ada:	2e00      	cmp	r6, #0
  403adc:	f000 86a7 	beq.w	40482e <_svfprintf_r+0x11e6>
  403ae0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  403ae2:	1c53      	adds	r3, r2, #1
  403ae4:	f000 8609 	beq.w	4046fa <_svfprintf_r+0x10b2>
  403ae8:	4621      	mov	r1, r4
  403aea:	4630      	mov	r0, r6
  403aec:	f002 fa88 	bl	406000 <memchr>
  403af0:	2800      	cmp	r0, #0
  403af2:	f000 86e1 	beq.w	4048b8 <_svfprintf_r+0x1270>
  403af6:	1b83      	subs	r3, r0, r6
  403af8:	930e      	str	r3, [sp, #56]	; 0x38
  403afa:	940a      	str	r4, [sp, #40]	; 0x28
  403afc:	950f      	str	r5, [sp, #60]	; 0x3c
  403afe:	f8cd b01c 	str.w	fp, [sp, #28]
  403b02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  403b06:	9308      	str	r3, [sp, #32]
  403b08:	9412      	str	r4, [sp, #72]	; 0x48
  403b0a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403b0e:	e6b3      	b.n	403878 <_svfprintf_r+0x230>
  403b10:	f89a 3000 	ldrb.w	r3, [sl]
  403b14:	2201      	movs	r2, #1
  403b16:	212b      	movs	r1, #43	; 0x2b
  403b18:	e5ee      	b.n	4036f8 <_svfprintf_r+0xb0>
  403b1a:	f04b 0b20 	orr.w	fp, fp, #32
  403b1e:	f89a 3000 	ldrb.w	r3, [sl]
  403b22:	e5e9      	b.n	4036f8 <_svfprintf_r+0xb0>
  403b24:	9311      	str	r3, [sp, #68]	; 0x44
  403b26:	2a00      	cmp	r2, #0
  403b28:	f040 8795 	bne.w	404a56 <_svfprintf_r+0x140e>
  403b2c:	4b22      	ldr	r3, [pc, #136]	; (403bb8 <_svfprintf_r+0x570>)
  403b2e:	9318      	str	r3, [sp, #96]	; 0x60
  403b30:	f01b 0f20 	tst.w	fp, #32
  403b34:	f040 8111 	bne.w	403d5a <_svfprintf_r+0x712>
  403b38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403b3a:	f01b 0f10 	tst.w	fp, #16
  403b3e:	4613      	mov	r3, r2
  403b40:	f040 83e1 	bne.w	404306 <_svfprintf_r+0xcbe>
  403b44:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403b48:	f000 83dd 	beq.w	404306 <_svfprintf_r+0xcbe>
  403b4c:	3304      	adds	r3, #4
  403b4e:	8814      	ldrh	r4, [r2, #0]
  403b50:	930f      	str	r3, [sp, #60]	; 0x3c
  403b52:	2500      	movs	r5, #0
  403b54:	f01b 0f01 	tst.w	fp, #1
  403b58:	f000 810c 	beq.w	403d74 <_svfprintf_r+0x72c>
  403b5c:	ea54 0305 	orrs.w	r3, r4, r5
  403b60:	f000 8108 	beq.w	403d74 <_svfprintf_r+0x72c>
  403b64:	2330      	movs	r3, #48	; 0x30
  403b66:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
  403b6a:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
  403b6e:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
  403b72:	f04b 0b02 	orr.w	fp, fp, #2
  403b76:	2302      	movs	r3, #2
  403b78:	e659      	b.n	40382e <_svfprintf_r+0x1e6>
  403b7a:	f89a 3000 	ldrb.w	r3, [sl]
  403b7e:	2900      	cmp	r1, #0
  403b80:	f47f adba 	bne.w	4036f8 <_svfprintf_r+0xb0>
  403b84:	2201      	movs	r2, #1
  403b86:	2120      	movs	r1, #32
  403b88:	e5b6      	b.n	4036f8 <_svfprintf_r+0xb0>
  403b8a:	f04b 0b01 	orr.w	fp, fp, #1
  403b8e:	f89a 3000 	ldrb.w	r3, [sl]
  403b92:	e5b1      	b.n	4036f8 <_svfprintf_r+0xb0>
  403b94:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
  403b96:	6823      	ldr	r3, [r4, #0]
  403b98:	930d      	str	r3, [sp, #52]	; 0x34
  403b9a:	4618      	mov	r0, r3
  403b9c:	2800      	cmp	r0, #0
  403b9e:	4623      	mov	r3, r4
  403ba0:	f103 0304 	add.w	r3, r3, #4
  403ba4:	f6ff ae0a 	blt.w	4037bc <_svfprintf_r+0x174>
  403ba8:	930f      	str	r3, [sp, #60]	; 0x3c
  403baa:	f89a 3000 	ldrb.w	r3, [sl]
  403bae:	e5a3      	b.n	4036f8 <_svfprintf_r+0xb0>
  403bb0:	00408618 	.word	0x00408618
  403bb4:	00408628 	.word	0x00408628
  403bb8:	004085f8 	.word	0x004085f8
  403bbc:	f04b 0b10 	orr.w	fp, fp, #16
  403bc0:	f01b 0f20 	tst.w	fp, #32
  403bc4:	9311      	str	r3, [sp, #68]	; 0x44
  403bc6:	f43f ae23 	beq.w	403810 <_svfprintf_r+0x1c8>
  403bca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403bcc:	3507      	adds	r5, #7
  403bce:	f025 0307 	bic.w	r3, r5, #7
  403bd2:	f103 0208 	add.w	r2, r3, #8
  403bd6:	e9d3 4500 	ldrd	r4, r5, [r3]
  403bda:	920f      	str	r2, [sp, #60]	; 0x3c
  403bdc:	2301      	movs	r3, #1
  403bde:	e626      	b.n	40382e <_svfprintf_r+0x1e6>
  403be0:	f89a 3000 	ldrb.w	r3, [sl]
  403be4:	2b2a      	cmp	r3, #42	; 0x2a
  403be6:	f10a 0401 	add.w	r4, sl, #1
  403bea:	f000 8727 	beq.w	404a3c <_svfprintf_r+0x13f4>
  403bee:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403bf2:	2809      	cmp	r0, #9
  403bf4:	46a2      	mov	sl, r4
  403bf6:	f200 86ad 	bhi.w	404954 <_svfprintf_r+0x130c>
  403bfa:	2300      	movs	r3, #0
  403bfc:	461c      	mov	r4, r3
  403bfe:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403c02:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403c06:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403c0a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403c0e:	2809      	cmp	r0, #9
  403c10:	d9f5      	bls.n	403bfe <_svfprintf_r+0x5b6>
  403c12:	940a      	str	r4, [sp, #40]	; 0x28
  403c14:	e572      	b.n	4036fc <_svfprintf_r+0xb4>
  403c16:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
  403c1a:	f89a 3000 	ldrb.w	r3, [sl]
  403c1e:	e56b      	b.n	4036f8 <_svfprintf_r+0xb0>
  403c20:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
  403c24:	f89a 3000 	ldrb.w	r3, [sl]
  403c28:	e566      	b.n	4036f8 <_svfprintf_r+0xb0>
  403c2a:	f89a 3000 	ldrb.w	r3, [sl]
  403c2e:	2b6c      	cmp	r3, #108	; 0x6c
  403c30:	bf03      	ittte	eq
  403c32:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
  403c36:	f04b 0b20 	orreq.w	fp, fp, #32
  403c3a:	f10a 0a01 	addeq.w	sl, sl, #1
  403c3e:	f04b 0b10 	orrne.w	fp, fp, #16
  403c42:	e559      	b.n	4036f8 <_svfprintf_r+0xb0>
  403c44:	2a00      	cmp	r2, #0
  403c46:	f040 8711 	bne.w	404a6c <_svfprintf_r+0x1424>
  403c4a:	f01b 0f20 	tst.w	fp, #32
  403c4e:	f040 84f9 	bne.w	404644 <_svfprintf_r+0xffc>
  403c52:	f01b 0f10 	tst.w	fp, #16
  403c56:	f040 84ac 	bne.w	4045b2 <_svfprintf_r+0xf6a>
  403c5a:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403c5e:	f000 84a8 	beq.w	4045b2 <_svfprintf_r+0xf6a>
  403c62:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  403c64:	6813      	ldr	r3, [r2, #0]
  403c66:	3204      	adds	r2, #4
  403c68:	920f      	str	r2, [sp, #60]	; 0x3c
  403c6a:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
  403c6e:	801a      	strh	r2, [r3, #0]
  403c70:	e511      	b.n	403696 <_svfprintf_r+0x4e>
  403c72:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c74:	4bb3      	ldr	r3, [pc, #716]	; (403f44 <_svfprintf_r+0x8fc>)
  403c76:	680c      	ldr	r4, [r1, #0]
  403c78:	9318      	str	r3, [sp, #96]	; 0x60
  403c7a:	2230      	movs	r2, #48	; 0x30
  403c7c:	2378      	movs	r3, #120	; 0x78
  403c7e:	3104      	adds	r1, #4
  403c80:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
  403c84:	9311      	str	r3, [sp, #68]	; 0x44
  403c86:	f04b 0b02 	orr.w	fp, fp, #2
  403c8a:	910f      	str	r1, [sp, #60]	; 0x3c
  403c8c:	2500      	movs	r5, #0
  403c8e:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
  403c92:	2302      	movs	r3, #2
  403c94:	e5cb      	b.n	40382e <_svfprintf_r+0x1e6>
  403c96:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403c98:	9311      	str	r3, [sp, #68]	; 0x44
  403c9a:	680a      	ldr	r2, [r1, #0]
  403c9c:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403ca0:	2300      	movs	r3, #0
  403ca2:	460a      	mov	r2, r1
  403ca4:	461f      	mov	r7, r3
  403ca6:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403caa:	3204      	adds	r2, #4
  403cac:	2301      	movs	r3, #1
  403cae:	9308      	str	r3, [sp, #32]
  403cb0:	f8cd b01c 	str.w	fp, [sp, #28]
  403cb4:	970a      	str	r7, [sp, #40]	; 0x28
  403cb6:	9712      	str	r7, [sp, #72]	; 0x48
  403cb8:	920f      	str	r2, [sp, #60]	; 0x3c
  403cba:	930e      	str	r3, [sp, #56]	; 0x38
  403cbc:	ae28      	add	r6, sp, #160	; 0xa0
  403cbe:	e5df      	b.n	403880 <_svfprintf_r+0x238>
  403cc0:	9311      	str	r3, [sp, #68]	; 0x44
  403cc2:	2a00      	cmp	r2, #0
  403cc4:	f040 86ea 	bne.w	404a9c <_svfprintf_r+0x1454>
  403cc8:	f01b 0f20 	tst.w	fp, #32
  403ccc:	d15d      	bne.n	403d8a <_svfprintf_r+0x742>
  403cce:	f01b 0f10 	tst.w	fp, #16
  403cd2:	f040 8308 	bne.w	4042e6 <_svfprintf_r+0xc9e>
  403cd6:	f01b 0f40 	tst.w	fp, #64	; 0x40
  403cda:	f000 8304 	beq.w	4042e6 <_svfprintf_r+0xc9e>
  403cde:	990f      	ldr	r1, [sp, #60]	; 0x3c
  403ce0:	f9b1 4000 	ldrsh.w	r4, [r1]
  403ce4:	3104      	adds	r1, #4
  403ce6:	17e5      	asrs	r5, r4, #31
  403ce8:	4622      	mov	r2, r4
  403cea:	462b      	mov	r3, r5
  403cec:	910f      	str	r1, [sp, #60]	; 0x3c
  403cee:	2a00      	cmp	r2, #0
  403cf0:	f173 0300 	sbcs.w	r3, r3, #0
  403cf4:	db58      	blt.n	403da8 <_svfprintf_r+0x760>
  403cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
  403cf8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403cfc:	1c4a      	adds	r2, r1, #1
  403cfe:	f04f 0301 	mov.w	r3, #1
  403d02:	f47f ad9b 	bne.w	40383c <_svfprintf_r+0x1f4>
  403d06:	ea54 0205 	orrs.w	r2, r4, r5
  403d0a:	f000 81df 	beq.w	4040cc <_svfprintf_r+0xa84>
  403d0e:	f8cd b01c 	str.w	fp, [sp, #28]
  403d12:	2b01      	cmp	r3, #1
  403d14:	f000 827b 	beq.w	40420e <_svfprintf_r+0xbc6>
  403d18:	2b02      	cmp	r3, #2
  403d1a:	f040 8206 	bne.w	40412a <_svfprintf_r+0xae2>
  403d1e:	9818      	ldr	r0, [sp, #96]	; 0x60
  403d20:	464e      	mov	r6, r9
  403d22:	0923      	lsrs	r3, r4, #4
  403d24:	f004 010f 	and.w	r1, r4, #15
  403d28:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
  403d2c:	092a      	lsrs	r2, r5, #4
  403d2e:	461c      	mov	r4, r3
  403d30:	4615      	mov	r5, r2
  403d32:	5c43      	ldrb	r3, [r0, r1]
  403d34:	f806 3d01 	strb.w	r3, [r6, #-1]!
  403d38:	ea54 0305 	orrs.w	r3, r4, r5
  403d3c:	d1f1      	bne.n	403d22 <_svfprintf_r+0x6da>
  403d3e:	eba9 0306 	sub.w	r3, r9, r6
  403d42:	930e      	str	r3, [sp, #56]	; 0x38
  403d44:	e590      	b.n	403868 <_svfprintf_r+0x220>
  403d46:	9311      	str	r3, [sp, #68]	; 0x44
  403d48:	2a00      	cmp	r2, #0
  403d4a:	f040 86a3 	bne.w	404a94 <_svfprintf_r+0x144c>
  403d4e:	4b7e      	ldr	r3, [pc, #504]	; (403f48 <_svfprintf_r+0x900>)
  403d50:	9318      	str	r3, [sp, #96]	; 0x60
  403d52:	f01b 0f20 	tst.w	fp, #32
  403d56:	f43f aeef 	beq.w	403b38 <_svfprintf_r+0x4f0>
  403d5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d5c:	3507      	adds	r5, #7
  403d5e:	f025 0307 	bic.w	r3, r5, #7
  403d62:	f103 0208 	add.w	r2, r3, #8
  403d66:	f01b 0f01 	tst.w	fp, #1
  403d6a:	920f      	str	r2, [sp, #60]	; 0x3c
  403d6c:	e9d3 4500 	ldrd	r4, r5, [r3]
  403d70:	f47f aef4 	bne.w	403b5c <_svfprintf_r+0x514>
  403d74:	2302      	movs	r3, #2
  403d76:	e55a      	b.n	40382e <_svfprintf_r+0x1e6>
  403d78:	9311      	str	r3, [sp, #68]	; 0x44
  403d7a:	2a00      	cmp	r2, #0
  403d7c:	f040 8686 	bne.w	404a8c <_svfprintf_r+0x1444>
  403d80:	f04b 0b10 	orr.w	fp, fp, #16
  403d84:	f01b 0f20 	tst.w	fp, #32
  403d88:	d0a1      	beq.n	403cce <_svfprintf_r+0x686>
  403d8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403d8c:	3507      	adds	r5, #7
  403d8e:	f025 0507 	bic.w	r5, r5, #7
  403d92:	e9d5 2300 	ldrd	r2, r3, [r5]
  403d96:	2a00      	cmp	r2, #0
  403d98:	f105 0108 	add.w	r1, r5, #8
  403d9c:	461d      	mov	r5, r3
  403d9e:	f173 0300 	sbcs.w	r3, r3, #0
  403da2:	910f      	str	r1, [sp, #60]	; 0x3c
  403da4:	4614      	mov	r4, r2
  403da6:	daa6      	bge.n	403cf6 <_svfprintf_r+0x6ae>
  403da8:	272d      	movs	r7, #45	; 0x2d
  403daa:	4264      	negs	r4, r4
  403dac:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
  403db0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  403db4:	2301      	movs	r3, #1
  403db6:	e53d      	b.n	403834 <_svfprintf_r+0x1ec>
  403db8:	9311      	str	r3, [sp, #68]	; 0x44
  403dba:	2a00      	cmp	r2, #0
  403dbc:	f040 8662 	bne.w	404a84 <_svfprintf_r+0x143c>
  403dc0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403dc2:	3507      	adds	r5, #7
  403dc4:	f025 0307 	bic.w	r3, r5, #7
  403dc8:	f103 0208 	add.w	r2, r3, #8
  403dcc:	920f      	str	r2, [sp, #60]	; 0x3c
  403dce:	681a      	ldr	r2, [r3, #0]
  403dd0:	9215      	str	r2, [sp, #84]	; 0x54
  403dd2:	685b      	ldr	r3, [r3, #4]
  403dd4:	9314      	str	r3, [sp, #80]	; 0x50
  403dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  403dd8:	9d15      	ldr	r5, [sp, #84]	; 0x54
  403dda:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
  403dde:	4628      	mov	r0, r5
  403de0:	4621      	mov	r1, r4
  403de2:	f04f 32ff 	mov.w	r2, #4294967295
  403de6:	4b59      	ldr	r3, [pc, #356]	; (403f4c <_svfprintf_r+0x904>)
  403de8:	f003 fe5e 	bl	407aa8 <__aeabi_dcmpun>
  403dec:	2800      	cmp	r0, #0
  403dee:	f040 834a 	bne.w	404486 <_svfprintf_r+0xe3e>
  403df2:	4628      	mov	r0, r5
  403df4:	4621      	mov	r1, r4
  403df6:	f04f 32ff 	mov.w	r2, #4294967295
  403dfa:	4b54      	ldr	r3, [pc, #336]	; (403f4c <_svfprintf_r+0x904>)
  403dfc:	f003 fe36 	bl	407a6c <__aeabi_dcmple>
  403e00:	2800      	cmp	r0, #0
  403e02:	f040 8340 	bne.w	404486 <_svfprintf_r+0xe3e>
  403e06:	a815      	add	r0, sp, #84	; 0x54
  403e08:	c80d      	ldmia	r0, {r0, r2, r3}
  403e0a:	9914      	ldr	r1, [sp, #80]	; 0x50
  403e0c:	f003 fe24 	bl	407a58 <__aeabi_dcmplt>
  403e10:	2800      	cmp	r0, #0
  403e12:	f040 8530 	bne.w	404876 <_svfprintf_r+0x122e>
  403e16:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  403e1a:	4e4d      	ldr	r6, [pc, #308]	; (403f50 <_svfprintf_r+0x908>)
  403e1c:	4b4d      	ldr	r3, [pc, #308]	; (403f54 <_svfprintf_r+0x90c>)
  403e1e:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
  403e22:	9007      	str	r0, [sp, #28]
  403e24:	9811      	ldr	r0, [sp, #68]	; 0x44
  403e26:	2203      	movs	r2, #3
  403e28:	2100      	movs	r1, #0
  403e2a:	9208      	str	r2, [sp, #32]
  403e2c:	910a      	str	r1, [sp, #40]	; 0x28
  403e2e:	2847      	cmp	r0, #71	; 0x47
  403e30:	bfd8      	it	le
  403e32:	461e      	movle	r6, r3
  403e34:	920e      	str	r2, [sp, #56]	; 0x38
  403e36:	9112      	str	r1, [sp, #72]	; 0x48
  403e38:	e51e      	b.n	403878 <_svfprintf_r+0x230>
  403e3a:	f04b 0b08 	orr.w	fp, fp, #8
  403e3e:	f89a 3000 	ldrb.w	r3, [sl]
  403e42:	e459      	b.n	4036f8 <_svfprintf_r+0xb0>
  403e44:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403e48:	2300      	movs	r3, #0
  403e4a:	461c      	mov	r4, r3
  403e4c:	f81a 3b01 	ldrb.w	r3, [sl], #1
  403e50:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  403e54:	eb00 0444 	add.w	r4, r0, r4, lsl #1
  403e58:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
  403e5c:	2809      	cmp	r0, #9
  403e5e:	d9f5      	bls.n	403e4c <_svfprintf_r+0x804>
  403e60:	940d      	str	r4, [sp, #52]	; 0x34
  403e62:	e44b      	b.n	4036fc <_svfprintf_r+0xb4>
  403e64:	f04b 0b10 	orr.w	fp, fp, #16
  403e68:	9311      	str	r3, [sp, #68]	; 0x44
  403e6a:	f01b 0320 	ands.w	r3, fp, #32
  403e6e:	f43f ae1d 	beq.w	403aac <_svfprintf_r+0x464>
  403e72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  403e74:	3507      	adds	r5, #7
  403e76:	f025 0307 	bic.w	r3, r5, #7
  403e7a:	f103 0208 	add.w	r2, r3, #8
  403e7e:	e9d3 4500 	ldrd	r4, r5, [r3]
  403e82:	920f      	str	r2, [sp, #60]	; 0x3c
  403e84:	2300      	movs	r3, #0
  403e86:	e4d2      	b.n	40382e <_svfprintf_r+0x1e6>
  403e88:	9311      	str	r3, [sp, #68]	; 0x44
  403e8a:	2a00      	cmp	r2, #0
  403e8c:	f040 85e7 	bne.w	404a5e <_svfprintf_r+0x1416>
  403e90:	9a11      	ldr	r2, [sp, #68]	; 0x44
  403e92:	2a00      	cmp	r2, #0
  403e94:	f43f aca3 	beq.w	4037de <_svfprintf_r+0x196>
  403e98:	2300      	movs	r3, #0
  403e9a:	2101      	movs	r1, #1
  403e9c:	461f      	mov	r7, r3
  403e9e:	9108      	str	r1, [sp, #32]
  403ea0:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
  403ea4:	f8cd b01c 	str.w	fp, [sp, #28]
  403ea8:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
  403eac:	930a      	str	r3, [sp, #40]	; 0x28
  403eae:	9312      	str	r3, [sp, #72]	; 0x48
  403eb0:	910e      	str	r1, [sp, #56]	; 0x38
  403eb2:	ae28      	add	r6, sp, #160	; 0xa0
  403eb4:	e4e4      	b.n	403880 <_svfprintf_r+0x238>
  403eb6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403eb8:	e534      	b.n	403924 <_svfprintf_r+0x2dc>
  403eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
  403ebc:	2b65      	cmp	r3, #101	; 0x65
  403ebe:	f340 80a7 	ble.w	404010 <_svfprintf_r+0x9c8>
  403ec2:	a815      	add	r0, sp, #84	; 0x54
  403ec4:	c80d      	ldmia	r0, {r0, r2, r3}
  403ec6:	9914      	ldr	r1, [sp, #80]	; 0x50
  403ec8:	f003 fdbc 	bl	407a44 <__aeabi_dcmpeq>
  403ecc:	2800      	cmp	r0, #0
  403ece:	f000 8150 	beq.w	404172 <_svfprintf_r+0xb2a>
  403ed2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403ed4:	4a20      	ldr	r2, [pc, #128]	; (403f58 <_svfprintf_r+0x910>)
  403ed6:	f8c8 2000 	str.w	r2, [r8]
  403eda:	3301      	adds	r3, #1
  403edc:	3401      	adds	r4, #1
  403ede:	2201      	movs	r2, #1
  403ee0:	2b07      	cmp	r3, #7
  403ee2:	9427      	str	r4, [sp, #156]	; 0x9c
  403ee4:	9326      	str	r3, [sp, #152]	; 0x98
  403ee6:	f8c8 2004 	str.w	r2, [r8, #4]
  403eea:	f300 836a 	bgt.w	4045c2 <_svfprintf_r+0xf7a>
  403eee:	f108 0808 	add.w	r8, r8, #8
  403ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  403ef4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  403ef6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  403ef8:	4293      	cmp	r3, r2
  403efa:	db03      	blt.n	403f04 <_svfprintf_r+0x8bc>
  403efc:	9b07      	ldr	r3, [sp, #28]
  403efe:	07dd      	lsls	r5, r3, #31
  403f00:	f57f ad82 	bpl.w	403a08 <_svfprintf_r+0x3c0>
  403f04:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f06:	9919      	ldr	r1, [sp, #100]	; 0x64
  403f08:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  403f0a:	f8c8 2000 	str.w	r2, [r8]
  403f0e:	3301      	adds	r3, #1
  403f10:	440c      	add	r4, r1
  403f12:	2b07      	cmp	r3, #7
  403f14:	f8c8 1004 	str.w	r1, [r8, #4]
  403f18:	9427      	str	r4, [sp, #156]	; 0x9c
  403f1a:	9326      	str	r3, [sp, #152]	; 0x98
  403f1c:	f300 839e 	bgt.w	40465c <_svfprintf_r+0x1014>
  403f20:	f108 0808 	add.w	r8, r8, #8
  403f24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  403f26:	1e5e      	subs	r6, r3, #1
  403f28:	2e00      	cmp	r6, #0
  403f2a:	f77f ad6d 	ble.w	403a08 <_svfprintf_r+0x3c0>
  403f2e:	2e10      	cmp	r6, #16
  403f30:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f32:	4d0a      	ldr	r5, [pc, #40]	; (403f5c <_svfprintf_r+0x914>)
  403f34:	f340 81f5 	ble.w	404322 <_svfprintf_r+0xcda>
  403f38:	4622      	mov	r2, r4
  403f3a:	2710      	movs	r7, #16
  403f3c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  403f40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  403f42:	e013      	b.n	403f6c <_svfprintf_r+0x924>
  403f44:	004085f8 	.word	0x004085f8
  403f48:	004085e4 	.word	0x004085e4
  403f4c:	7fefffff 	.word	0x7fefffff
  403f50:	004085d8 	.word	0x004085d8
  403f54:	004085d4 	.word	0x004085d4
  403f58:	00408614 	.word	0x00408614
  403f5c:	00408628 	.word	0x00408628
  403f60:	f108 0808 	add.w	r8, r8, #8
  403f64:	3e10      	subs	r6, #16
  403f66:	2e10      	cmp	r6, #16
  403f68:	f340 81da 	ble.w	404320 <_svfprintf_r+0xcd8>
  403f6c:	3301      	adds	r3, #1
  403f6e:	3210      	adds	r2, #16
  403f70:	2b07      	cmp	r3, #7
  403f72:	9227      	str	r2, [sp, #156]	; 0x9c
  403f74:	9326      	str	r3, [sp, #152]	; 0x98
  403f76:	e888 00a0 	stmia.w	r8, {r5, r7}
  403f7a:	ddf1      	ble.n	403f60 <_svfprintf_r+0x918>
  403f7c:	aa25      	add	r2, sp, #148	; 0x94
  403f7e:	4621      	mov	r1, r4
  403f80:	4658      	mov	r0, fp
  403f82:	f002 fccb 	bl	40691c <__ssprint_r>
  403f86:	2800      	cmp	r0, #0
  403f88:	f47f ac30 	bne.w	4037ec <_svfprintf_r+0x1a4>
  403f8c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  403f8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403f90:	46c8      	mov	r8, r9
  403f92:	e7e7      	b.n	403f64 <_svfprintf_r+0x91c>
  403f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  403f96:	9a08      	ldr	r2, [sp, #32]
  403f98:	1a9f      	subs	r7, r3, r2
  403f9a:	2f00      	cmp	r7, #0
  403f9c:	f77f ace5 	ble.w	40396a <_svfprintf_r+0x322>
  403fa0:	2f10      	cmp	r7, #16
  403fa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fa4:	4db6      	ldr	r5, [pc, #728]	; (404280 <_svfprintf_r+0xc38>)
  403fa6:	dd27      	ble.n	403ff8 <_svfprintf_r+0x9b0>
  403fa8:	4642      	mov	r2, r8
  403faa:	4621      	mov	r1, r4
  403fac:	46b0      	mov	r8, r6
  403fae:	f04f 0b10 	mov.w	fp, #16
  403fb2:	462e      	mov	r6, r5
  403fb4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  403fb6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  403fb8:	e004      	b.n	403fc4 <_svfprintf_r+0x97c>
  403fba:	3f10      	subs	r7, #16
  403fbc:	2f10      	cmp	r7, #16
  403fbe:	f102 0208 	add.w	r2, r2, #8
  403fc2:	dd15      	ble.n	403ff0 <_svfprintf_r+0x9a8>
  403fc4:	3301      	adds	r3, #1
  403fc6:	3110      	adds	r1, #16
  403fc8:	2b07      	cmp	r3, #7
  403fca:	9127      	str	r1, [sp, #156]	; 0x9c
  403fcc:	9326      	str	r3, [sp, #152]	; 0x98
  403fce:	e882 0840 	stmia.w	r2, {r6, fp}
  403fd2:	ddf2      	ble.n	403fba <_svfprintf_r+0x972>
  403fd4:	aa25      	add	r2, sp, #148	; 0x94
  403fd6:	4629      	mov	r1, r5
  403fd8:	4620      	mov	r0, r4
  403fda:	f002 fc9f 	bl	40691c <__ssprint_r>
  403fde:	2800      	cmp	r0, #0
  403fe0:	f47f ac04 	bne.w	4037ec <_svfprintf_r+0x1a4>
  403fe4:	3f10      	subs	r7, #16
  403fe6:	2f10      	cmp	r7, #16
  403fe8:	9927      	ldr	r1, [sp, #156]	; 0x9c
  403fea:	9b26      	ldr	r3, [sp, #152]	; 0x98
  403fec:	464a      	mov	r2, r9
  403fee:	dce9      	bgt.n	403fc4 <_svfprintf_r+0x97c>
  403ff0:	4635      	mov	r5, r6
  403ff2:	460c      	mov	r4, r1
  403ff4:	4646      	mov	r6, r8
  403ff6:	4690      	mov	r8, r2
  403ff8:	3301      	adds	r3, #1
  403ffa:	443c      	add	r4, r7
  403ffc:	2b07      	cmp	r3, #7
  403ffe:	9427      	str	r4, [sp, #156]	; 0x9c
  404000:	9326      	str	r3, [sp, #152]	; 0x98
  404002:	e888 00a0 	stmia.w	r8, {r5, r7}
  404006:	f300 8232 	bgt.w	40446e <_svfprintf_r+0xe26>
  40400a:	f108 0808 	add.w	r8, r8, #8
  40400e:	e4ac      	b.n	40396a <_svfprintf_r+0x322>
  404010:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404012:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404014:	2b01      	cmp	r3, #1
  404016:	f340 81fe 	ble.w	404416 <_svfprintf_r+0xdce>
  40401a:	3701      	adds	r7, #1
  40401c:	3401      	adds	r4, #1
  40401e:	2301      	movs	r3, #1
  404020:	2f07      	cmp	r7, #7
  404022:	9427      	str	r4, [sp, #156]	; 0x9c
  404024:	9726      	str	r7, [sp, #152]	; 0x98
  404026:	f8c8 6000 	str.w	r6, [r8]
  40402a:	f8c8 3004 	str.w	r3, [r8, #4]
  40402e:	f300 8203 	bgt.w	404438 <_svfprintf_r+0xdf0>
  404032:	f108 0808 	add.w	r8, r8, #8
  404036:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404038:	9b1a      	ldr	r3, [sp, #104]	; 0x68
  40403a:	f8c8 3000 	str.w	r3, [r8]
  40403e:	3701      	adds	r7, #1
  404040:	4414      	add	r4, r2
  404042:	2f07      	cmp	r7, #7
  404044:	9427      	str	r4, [sp, #156]	; 0x9c
  404046:	9726      	str	r7, [sp, #152]	; 0x98
  404048:	f8c8 2004 	str.w	r2, [r8, #4]
  40404c:	f300 8200 	bgt.w	404450 <_svfprintf_r+0xe08>
  404050:	f108 0808 	add.w	r8, r8, #8
  404054:	a815      	add	r0, sp, #84	; 0x54
  404056:	c80d      	ldmia	r0, {r0, r2, r3}
  404058:	9914      	ldr	r1, [sp, #80]	; 0x50
  40405a:	f003 fcf3 	bl	407a44 <__aeabi_dcmpeq>
  40405e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404060:	2800      	cmp	r0, #0
  404062:	f040 8101 	bne.w	404268 <_svfprintf_r+0xc20>
  404066:	3b01      	subs	r3, #1
  404068:	3701      	adds	r7, #1
  40406a:	3601      	adds	r6, #1
  40406c:	441c      	add	r4, r3
  40406e:	2f07      	cmp	r7, #7
  404070:	9726      	str	r7, [sp, #152]	; 0x98
  404072:	9427      	str	r4, [sp, #156]	; 0x9c
  404074:	f8c8 6000 	str.w	r6, [r8]
  404078:	f8c8 3004 	str.w	r3, [r8, #4]
  40407c:	f300 8127 	bgt.w	4042ce <_svfprintf_r+0xc86>
  404080:	f108 0808 	add.w	r8, r8, #8
  404084:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
  404086:	f8c8 2004 	str.w	r2, [r8, #4]
  40408a:	3701      	adds	r7, #1
  40408c:	4414      	add	r4, r2
  40408e:	ab21      	add	r3, sp, #132	; 0x84
  404090:	2f07      	cmp	r7, #7
  404092:	9427      	str	r4, [sp, #156]	; 0x9c
  404094:	9726      	str	r7, [sp, #152]	; 0x98
  404096:	f8c8 3000 	str.w	r3, [r8]
  40409a:	f77f acb3 	ble.w	403a04 <_svfprintf_r+0x3bc>
  40409e:	aa25      	add	r2, sp, #148	; 0x94
  4040a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040a2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040a4:	f002 fc3a 	bl	40691c <__ssprint_r>
  4040a8:	2800      	cmp	r0, #0
  4040aa:	f47f ab9f 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4040ae:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040b0:	46c8      	mov	r8, r9
  4040b2:	e4a9      	b.n	403a08 <_svfprintf_r+0x3c0>
  4040b4:	aa25      	add	r2, sp, #148	; 0x94
  4040b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040b8:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040ba:	f002 fc2f 	bl	40691c <__ssprint_r>
  4040be:	2800      	cmp	r0, #0
  4040c0:	f43f aceb 	beq.w	403a9a <_svfprintf_r+0x452>
  4040c4:	f7ff bb92 	b.w	4037ec <_svfprintf_r+0x1a4>
  4040c8:	f8dd b01c 	ldr.w	fp, [sp, #28]
  4040cc:	2b01      	cmp	r3, #1
  4040ce:	f000 8134 	beq.w	40433a <_svfprintf_r+0xcf2>
  4040d2:	2b02      	cmp	r3, #2
  4040d4:	d125      	bne.n	404122 <_svfprintf_r+0xada>
  4040d6:	f8cd b01c 	str.w	fp, [sp, #28]
  4040da:	2400      	movs	r4, #0
  4040dc:	2500      	movs	r5, #0
  4040de:	e61e      	b.n	403d1e <_svfprintf_r+0x6d6>
  4040e0:	aa25      	add	r2, sp, #148	; 0x94
  4040e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040e6:	f002 fc19 	bl	40691c <__ssprint_r>
  4040ea:	2800      	cmp	r0, #0
  4040ec:	f47f ab7e 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4040f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4040f2:	46c8      	mov	r8, r9
  4040f4:	e475      	b.n	4039e2 <_svfprintf_r+0x39a>
  4040f6:	aa25      	add	r2, sp, #148	; 0x94
  4040f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4040fa:	980c      	ldr	r0, [sp, #48]	; 0x30
  4040fc:	f002 fc0e 	bl	40691c <__ssprint_r>
  404100:	2800      	cmp	r0, #0
  404102:	f47f ab73 	bne.w	4037ec <_svfprintf_r+0x1a4>
  404106:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404108:	46c8      	mov	r8, r9
  40410a:	e41b      	b.n	403944 <_svfprintf_r+0x2fc>
  40410c:	aa25      	add	r2, sp, #148	; 0x94
  40410e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404110:	980c      	ldr	r0, [sp, #48]	; 0x30
  404112:	f002 fc03 	bl	40691c <__ssprint_r>
  404116:	2800      	cmp	r0, #0
  404118:	f47f ab68 	bne.w	4037ec <_svfprintf_r+0x1a4>
  40411c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40411e:	46c8      	mov	r8, r9
  404120:	e420      	b.n	403964 <_svfprintf_r+0x31c>
  404122:	f8cd b01c 	str.w	fp, [sp, #28]
  404126:	2400      	movs	r4, #0
  404128:	2500      	movs	r5, #0
  40412a:	4649      	mov	r1, r9
  40412c:	e000      	b.n	404130 <_svfprintf_r+0xae8>
  40412e:	4631      	mov	r1, r6
  404130:	08e2      	lsrs	r2, r4, #3
  404132:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
  404136:	08e8      	lsrs	r0, r5, #3
  404138:	f004 0307 	and.w	r3, r4, #7
  40413c:	4605      	mov	r5, r0
  40413e:	4614      	mov	r4, r2
  404140:	3330      	adds	r3, #48	; 0x30
  404142:	ea54 0205 	orrs.w	r2, r4, r5
  404146:	f801 3c01 	strb.w	r3, [r1, #-1]
  40414a:	f101 36ff 	add.w	r6, r1, #4294967295
  40414e:	d1ee      	bne.n	40412e <_svfprintf_r+0xae6>
  404150:	9a07      	ldr	r2, [sp, #28]
  404152:	07d2      	lsls	r2, r2, #31
  404154:	f57f adf3 	bpl.w	403d3e <_svfprintf_r+0x6f6>
  404158:	2b30      	cmp	r3, #48	; 0x30
  40415a:	f43f adf0 	beq.w	403d3e <_svfprintf_r+0x6f6>
  40415e:	3902      	subs	r1, #2
  404160:	2330      	movs	r3, #48	; 0x30
  404162:	f806 3c01 	strb.w	r3, [r6, #-1]
  404166:	eba9 0301 	sub.w	r3, r9, r1
  40416a:	930e      	str	r3, [sp, #56]	; 0x38
  40416c:	460e      	mov	r6, r1
  40416e:	f7ff bb7b 	b.w	403868 <_svfprintf_r+0x220>
  404172:	991f      	ldr	r1, [sp, #124]	; 0x7c
  404174:	2900      	cmp	r1, #0
  404176:	f340 822e 	ble.w	4045d6 <_svfprintf_r+0xf8e>
  40417a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40417c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  40417e:	4293      	cmp	r3, r2
  404180:	bfa8      	it	ge
  404182:	4613      	movge	r3, r2
  404184:	2b00      	cmp	r3, #0
  404186:	461f      	mov	r7, r3
  404188:	dd0d      	ble.n	4041a6 <_svfprintf_r+0xb5e>
  40418a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  40418c:	f8c8 6000 	str.w	r6, [r8]
  404190:	3301      	adds	r3, #1
  404192:	443c      	add	r4, r7
  404194:	2b07      	cmp	r3, #7
  404196:	9427      	str	r4, [sp, #156]	; 0x9c
  404198:	f8c8 7004 	str.w	r7, [r8, #4]
  40419c:	9326      	str	r3, [sp, #152]	; 0x98
  40419e:	f300 831f 	bgt.w	4047e0 <_svfprintf_r+0x1198>
  4041a2:	f108 0808 	add.w	r8, r8, #8
  4041a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4041a8:	2f00      	cmp	r7, #0
  4041aa:	bfa8      	it	ge
  4041ac:	1bdb      	subge	r3, r3, r7
  4041ae:	2b00      	cmp	r3, #0
  4041b0:	461f      	mov	r7, r3
  4041b2:	f340 80d6 	ble.w	404362 <_svfprintf_r+0xd1a>
  4041b6:	2f10      	cmp	r7, #16
  4041b8:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4041ba:	4d31      	ldr	r5, [pc, #196]	; (404280 <_svfprintf_r+0xc38>)
  4041bc:	f340 81ed 	ble.w	40459a <_svfprintf_r+0xf52>
  4041c0:	4642      	mov	r2, r8
  4041c2:	4621      	mov	r1, r4
  4041c4:	46b0      	mov	r8, r6
  4041c6:	f04f 0b10 	mov.w	fp, #16
  4041ca:	462e      	mov	r6, r5
  4041cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  4041ce:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  4041d0:	e004      	b.n	4041dc <_svfprintf_r+0xb94>
  4041d2:	3208      	adds	r2, #8
  4041d4:	3f10      	subs	r7, #16
  4041d6:	2f10      	cmp	r7, #16
  4041d8:	f340 81db 	ble.w	404592 <_svfprintf_r+0xf4a>
  4041dc:	3301      	adds	r3, #1
  4041de:	3110      	adds	r1, #16
  4041e0:	2b07      	cmp	r3, #7
  4041e2:	9127      	str	r1, [sp, #156]	; 0x9c
  4041e4:	9326      	str	r3, [sp, #152]	; 0x98
  4041e6:	e882 0840 	stmia.w	r2, {r6, fp}
  4041ea:	ddf2      	ble.n	4041d2 <_svfprintf_r+0xb8a>
  4041ec:	aa25      	add	r2, sp, #148	; 0x94
  4041ee:	4629      	mov	r1, r5
  4041f0:	4620      	mov	r0, r4
  4041f2:	f002 fb93 	bl	40691c <__ssprint_r>
  4041f6:	2800      	cmp	r0, #0
  4041f8:	f47f aaf8 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4041fc:	9927      	ldr	r1, [sp, #156]	; 0x9c
  4041fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404200:	464a      	mov	r2, r9
  404202:	e7e7      	b.n	4041d4 <_svfprintf_r+0xb8c>
  404204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404206:	930e      	str	r3, [sp, #56]	; 0x38
  404208:	464e      	mov	r6, r9
  40420a:	f7ff bb2d 	b.w	403868 <_svfprintf_r+0x220>
  40420e:	2d00      	cmp	r5, #0
  404210:	bf08      	it	eq
  404212:	2c0a      	cmpeq	r4, #10
  404214:	f0c0 808f 	bcc.w	404336 <_svfprintf_r+0xcee>
  404218:	464e      	mov	r6, r9
  40421a:	4620      	mov	r0, r4
  40421c:	4629      	mov	r1, r5
  40421e:	220a      	movs	r2, #10
  404220:	2300      	movs	r3, #0
  404222:	f7fe ffed 	bl	403200 <__aeabi_uldivmod>
  404226:	3230      	adds	r2, #48	; 0x30
  404228:	f806 2d01 	strb.w	r2, [r6, #-1]!
  40422c:	4620      	mov	r0, r4
  40422e:	4629      	mov	r1, r5
  404230:	2300      	movs	r3, #0
  404232:	220a      	movs	r2, #10
  404234:	f7fe ffe4 	bl	403200 <__aeabi_uldivmod>
  404238:	4604      	mov	r4, r0
  40423a:	460d      	mov	r5, r1
  40423c:	ea54 0305 	orrs.w	r3, r4, r5
  404240:	d1eb      	bne.n	40421a <_svfprintf_r+0xbd2>
  404242:	eba9 0306 	sub.w	r3, r9, r6
  404246:	930e      	str	r3, [sp, #56]	; 0x38
  404248:	f7ff bb0e 	b.w	403868 <_svfprintf_r+0x220>
  40424c:	aa25      	add	r2, sp, #148	; 0x94
  40424e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404250:	980c      	ldr	r0, [sp, #48]	; 0x30
  404252:	f002 fb63 	bl	40691c <__ssprint_r>
  404256:	2800      	cmp	r0, #0
  404258:	f47f aac8 	bne.w	4037ec <_svfprintf_r+0x1a4>
  40425c:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  404260:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404262:	46c8      	mov	r8, r9
  404264:	f7ff bb5e 	b.w	403924 <_svfprintf_r+0x2dc>
  404268:	1e5e      	subs	r6, r3, #1
  40426a:	2e00      	cmp	r6, #0
  40426c:	f77f af0a 	ble.w	404084 <_svfprintf_r+0xa3c>
  404270:	2e10      	cmp	r6, #16
  404272:	4d03      	ldr	r5, [pc, #12]	; (404280 <_svfprintf_r+0xc38>)
  404274:	dd22      	ble.n	4042bc <_svfprintf_r+0xc74>
  404276:	4622      	mov	r2, r4
  404278:	f04f 0b10 	mov.w	fp, #16
  40427c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  40427e:	e006      	b.n	40428e <_svfprintf_r+0xc46>
  404280:	00408628 	.word	0x00408628
  404284:	3e10      	subs	r6, #16
  404286:	2e10      	cmp	r6, #16
  404288:	f108 0808 	add.w	r8, r8, #8
  40428c:	dd15      	ble.n	4042ba <_svfprintf_r+0xc72>
  40428e:	3701      	adds	r7, #1
  404290:	3210      	adds	r2, #16
  404292:	2f07      	cmp	r7, #7
  404294:	9227      	str	r2, [sp, #156]	; 0x9c
  404296:	9726      	str	r7, [sp, #152]	; 0x98
  404298:	e888 0820 	stmia.w	r8, {r5, fp}
  40429c:	ddf2      	ble.n	404284 <_svfprintf_r+0xc3c>
  40429e:	aa25      	add	r2, sp, #148	; 0x94
  4042a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042a2:	4620      	mov	r0, r4
  4042a4:	f002 fb3a 	bl	40691c <__ssprint_r>
  4042a8:	2800      	cmp	r0, #0
  4042aa:	f47f aa9f 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4042ae:	3e10      	subs	r6, #16
  4042b0:	2e10      	cmp	r6, #16
  4042b2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4042b4:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4042b6:	46c8      	mov	r8, r9
  4042b8:	dce9      	bgt.n	40428e <_svfprintf_r+0xc46>
  4042ba:	4614      	mov	r4, r2
  4042bc:	3701      	adds	r7, #1
  4042be:	4434      	add	r4, r6
  4042c0:	2f07      	cmp	r7, #7
  4042c2:	9427      	str	r4, [sp, #156]	; 0x9c
  4042c4:	9726      	str	r7, [sp, #152]	; 0x98
  4042c6:	e888 0060 	stmia.w	r8, {r5, r6}
  4042ca:	f77f aed9 	ble.w	404080 <_svfprintf_r+0xa38>
  4042ce:	aa25      	add	r2, sp, #148	; 0x94
  4042d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4042d2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4042d4:	f002 fb22 	bl	40691c <__ssprint_r>
  4042d8:	2800      	cmp	r0, #0
  4042da:	f47f aa87 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4042de:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4042e0:	9f26      	ldr	r7, [sp, #152]	; 0x98
  4042e2:	46c8      	mov	r8, r9
  4042e4:	e6ce      	b.n	404084 <_svfprintf_r+0xa3c>
  4042e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4042e8:	6814      	ldr	r4, [r2, #0]
  4042ea:	4613      	mov	r3, r2
  4042ec:	3304      	adds	r3, #4
  4042ee:	17e5      	asrs	r5, r4, #31
  4042f0:	930f      	str	r3, [sp, #60]	; 0x3c
  4042f2:	4622      	mov	r2, r4
  4042f4:	462b      	mov	r3, r5
  4042f6:	e4fa      	b.n	403cee <_svfprintf_r+0x6a6>
  4042f8:	3204      	adds	r2, #4
  4042fa:	681c      	ldr	r4, [r3, #0]
  4042fc:	920f      	str	r2, [sp, #60]	; 0x3c
  4042fe:	2301      	movs	r3, #1
  404300:	2500      	movs	r5, #0
  404302:	f7ff ba94 	b.w	40382e <_svfprintf_r+0x1e6>
  404306:	681c      	ldr	r4, [r3, #0]
  404308:	3304      	adds	r3, #4
  40430a:	930f      	str	r3, [sp, #60]	; 0x3c
  40430c:	2500      	movs	r5, #0
  40430e:	e421      	b.n	403b54 <_svfprintf_r+0x50c>
  404310:	990f      	ldr	r1, [sp, #60]	; 0x3c
  404312:	460a      	mov	r2, r1
  404314:	3204      	adds	r2, #4
  404316:	680c      	ldr	r4, [r1, #0]
  404318:	920f      	str	r2, [sp, #60]	; 0x3c
  40431a:	2500      	movs	r5, #0
  40431c:	f7ff ba87 	b.w	40382e <_svfprintf_r+0x1e6>
  404320:	4614      	mov	r4, r2
  404322:	3301      	adds	r3, #1
  404324:	4434      	add	r4, r6
  404326:	2b07      	cmp	r3, #7
  404328:	9427      	str	r4, [sp, #156]	; 0x9c
  40432a:	9326      	str	r3, [sp, #152]	; 0x98
  40432c:	e888 0060 	stmia.w	r8, {r5, r6}
  404330:	f77f ab68 	ble.w	403a04 <_svfprintf_r+0x3bc>
  404334:	e6b3      	b.n	40409e <_svfprintf_r+0xa56>
  404336:	f8dd b01c 	ldr.w	fp, [sp, #28]
  40433a:	f8cd b01c 	str.w	fp, [sp, #28]
  40433e:	ae42      	add	r6, sp, #264	; 0x108
  404340:	3430      	adds	r4, #48	; 0x30
  404342:	2301      	movs	r3, #1
  404344:	f806 4d41 	strb.w	r4, [r6, #-65]!
  404348:	930e      	str	r3, [sp, #56]	; 0x38
  40434a:	f7ff ba8d 	b.w	403868 <_svfprintf_r+0x220>
  40434e:	aa25      	add	r2, sp, #148	; 0x94
  404350:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404352:	980c      	ldr	r0, [sp, #48]	; 0x30
  404354:	f002 fae2 	bl	40691c <__ssprint_r>
  404358:	2800      	cmp	r0, #0
  40435a:	f47f aa47 	bne.w	4037ec <_svfprintf_r+0x1a4>
  40435e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404360:	46c8      	mov	r8, r9
  404362:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404364:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404366:	429a      	cmp	r2, r3
  404368:	db44      	blt.n	4043f4 <_svfprintf_r+0xdac>
  40436a:	9b07      	ldr	r3, [sp, #28]
  40436c:	07d9      	lsls	r1, r3, #31
  40436e:	d441      	bmi.n	4043f4 <_svfprintf_r+0xdac>
  404370:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404372:	9812      	ldr	r0, [sp, #72]	; 0x48
  404374:	1a9a      	subs	r2, r3, r2
  404376:	1a1d      	subs	r5, r3, r0
  404378:	4295      	cmp	r5, r2
  40437a:	bfa8      	it	ge
  40437c:	4615      	movge	r5, r2
  40437e:	2d00      	cmp	r5, #0
  404380:	dd0e      	ble.n	4043a0 <_svfprintf_r+0xd58>
  404382:	9926      	ldr	r1, [sp, #152]	; 0x98
  404384:	f8c8 5004 	str.w	r5, [r8, #4]
  404388:	3101      	adds	r1, #1
  40438a:	4406      	add	r6, r0
  40438c:	442c      	add	r4, r5
  40438e:	2907      	cmp	r1, #7
  404390:	f8c8 6000 	str.w	r6, [r8]
  404394:	9427      	str	r4, [sp, #156]	; 0x9c
  404396:	9126      	str	r1, [sp, #152]	; 0x98
  404398:	f300 823b 	bgt.w	404812 <_svfprintf_r+0x11ca>
  40439c:	f108 0808 	add.w	r8, r8, #8
  4043a0:	2d00      	cmp	r5, #0
  4043a2:	bfac      	ite	ge
  4043a4:	1b56      	subge	r6, r2, r5
  4043a6:	4616      	movlt	r6, r2
  4043a8:	2e00      	cmp	r6, #0
  4043aa:	f77f ab2d 	ble.w	403a08 <_svfprintf_r+0x3c0>
  4043ae:	2e10      	cmp	r6, #16
  4043b0:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043b2:	4db0      	ldr	r5, [pc, #704]	; (404674 <_svfprintf_r+0x102c>)
  4043b4:	ddb5      	ble.n	404322 <_svfprintf_r+0xcda>
  4043b6:	4622      	mov	r2, r4
  4043b8:	2710      	movs	r7, #16
  4043ba:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  4043be:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  4043c0:	e004      	b.n	4043cc <_svfprintf_r+0xd84>
  4043c2:	f108 0808 	add.w	r8, r8, #8
  4043c6:	3e10      	subs	r6, #16
  4043c8:	2e10      	cmp	r6, #16
  4043ca:	dda9      	ble.n	404320 <_svfprintf_r+0xcd8>
  4043cc:	3301      	adds	r3, #1
  4043ce:	3210      	adds	r2, #16
  4043d0:	2b07      	cmp	r3, #7
  4043d2:	9227      	str	r2, [sp, #156]	; 0x9c
  4043d4:	9326      	str	r3, [sp, #152]	; 0x98
  4043d6:	e888 00a0 	stmia.w	r8, {r5, r7}
  4043da:	ddf2      	ble.n	4043c2 <_svfprintf_r+0xd7a>
  4043dc:	aa25      	add	r2, sp, #148	; 0x94
  4043de:	4621      	mov	r1, r4
  4043e0:	4658      	mov	r0, fp
  4043e2:	f002 fa9b 	bl	40691c <__ssprint_r>
  4043e6:	2800      	cmp	r0, #0
  4043e8:	f47f aa00 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4043ec:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  4043ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043f0:	46c8      	mov	r8, r9
  4043f2:	e7e8      	b.n	4043c6 <_svfprintf_r+0xd7e>
  4043f4:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4043f6:	9819      	ldr	r0, [sp, #100]	; 0x64
  4043f8:	991a      	ldr	r1, [sp, #104]	; 0x68
  4043fa:	f8c8 1000 	str.w	r1, [r8]
  4043fe:	3301      	adds	r3, #1
  404400:	4404      	add	r4, r0
  404402:	2b07      	cmp	r3, #7
  404404:	9427      	str	r4, [sp, #156]	; 0x9c
  404406:	f8c8 0004 	str.w	r0, [r8, #4]
  40440a:	9326      	str	r3, [sp, #152]	; 0x98
  40440c:	f300 81f5 	bgt.w	4047fa <_svfprintf_r+0x11b2>
  404410:	f108 0808 	add.w	r8, r8, #8
  404414:	e7ac      	b.n	404370 <_svfprintf_r+0xd28>
  404416:	9b07      	ldr	r3, [sp, #28]
  404418:	07da      	lsls	r2, r3, #31
  40441a:	f53f adfe 	bmi.w	40401a <_svfprintf_r+0x9d2>
  40441e:	3701      	adds	r7, #1
  404420:	3401      	adds	r4, #1
  404422:	2301      	movs	r3, #1
  404424:	2f07      	cmp	r7, #7
  404426:	9427      	str	r4, [sp, #156]	; 0x9c
  404428:	9726      	str	r7, [sp, #152]	; 0x98
  40442a:	f8c8 6000 	str.w	r6, [r8]
  40442e:	f8c8 3004 	str.w	r3, [r8, #4]
  404432:	f77f ae25 	ble.w	404080 <_svfprintf_r+0xa38>
  404436:	e74a      	b.n	4042ce <_svfprintf_r+0xc86>
  404438:	aa25      	add	r2, sp, #148	; 0x94
  40443a:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40443c:	980c      	ldr	r0, [sp, #48]	; 0x30
  40443e:	f002 fa6d 	bl	40691c <__ssprint_r>
  404442:	2800      	cmp	r0, #0
  404444:	f47f a9d2 	bne.w	4037ec <_svfprintf_r+0x1a4>
  404448:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40444a:	9f26      	ldr	r7, [sp, #152]	; 0x98
  40444c:	46c8      	mov	r8, r9
  40444e:	e5f2      	b.n	404036 <_svfprintf_r+0x9ee>
  404450:	aa25      	add	r2, sp, #148	; 0x94
  404452:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404454:	980c      	ldr	r0, [sp, #48]	; 0x30
  404456:	f002 fa61 	bl	40691c <__ssprint_r>
  40445a:	2800      	cmp	r0, #0
  40445c:	f47f a9c6 	bne.w	4037ec <_svfprintf_r+0x1a4>
  404460:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404462:	9f26      	ldr	r7, [sp, #152]	; 0x98
  404464:	46c8      	mov	r8, r9
  404466:	e5f5      	b.n	404054 <_svfprintf_r+0xa0c>
  404468:	464e      	mov	r6, r9
  40446a:	f7ff b9fd 	b.w	403868 <_svfprintf_r+0x220>
  40446e:	aa25      	add	r2, sp, #148	; 0x94
  404470:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404472:	980c      	ldr	r0, [sp, #48]	; 0x30
  404474:	f002 fa52 	bl	40691c <__ssprint_r>
  404478:	2800      	cmp	r0, #0
  40447a:	f47f a9b7 	bne.w	4037ec <_svfprintf_r+0x1a4>
  40447e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404480:	46c8      	mov	r8, r9
  404482:	f7ff ba72 	b.w	40396a <_svfprintf_r+0x322>
  404486:	9c15      	ldr	r4, [sp, #84]	; 0x54
  404488:	4622      	mov	r2, r4
  40448a:	4620      	mov	r0, r4
  40448c:	9c14      	ldr	r4, [sp, #80]	; 0x50
  40448e:	4623      	mov	r3, r4
  404490:	4621      	mov	r1, r4
  404492:	f003 fb09 	bl	407aa8 <__aeabi_dcmpun>
  404496:	2800      	cmp	r0, #0
  404498:	f040 8286 	bne.w	4049a8 <_svfprintf_r+0x1360>
  40449c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40449e:	3301      	adds	r3, #1
  4044a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044a2:	f023 0320 	bic.w	r3, r3, #32
  4044a6:	930e      	str	r3, [sp, #56]	; 0x38
  4044a8:	f000 81e2 	beq.w	404870 <_svfprintf_r+0x1228>
  4044ac:	2b47      	cmp	r3, #71	; 0x47
  4044ae:	f000 811e 	beq.w	4046ee <_svfprintf_r+0x10a6>
  4044b2:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
  4044b6:	9307      	str	r3, [sp, #28]
  4044b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4044ba:	1e1f      	subs	r7, r3, #0
  4044bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4044be:	9308      	str	r3, [sp, #32]
  4044c0:	bfbb      	ittet	lt
  4044c2:	463b      	movlt	r3, r7
  4044c4:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
  4044c8:	2300      	movge	r3, #0
  4044ca:	232d      	movlt	r3, #45	; 0x2d
  4044cc:	9310      	str	r3, [sp, #64]	; 0x40
  4044ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4044d0:	2b66      	cmp	r3, #102	; 0x66
  4044d2:	f000 81bb 	beq.w	40484c <_svfprintf_r+0x1204>
  4044d6:	2b46      	cmp	r3, #70	; 0x46
  4044d8:	f000 80df 	beq.w	40469a <_svfprintf_r+0x1052>
  4044dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4044de:	9a08      	ldr	r2, [sp, #32]
  4044e0:	2b45      	cmp	r3, #69	; 0x45
  4044e2:	bf0c      	ite	eq
  4044e4:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
  4044e6:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
  4044e8:	a823      	add	r0, sp, #140	; 0x8c
  4044ea:	a920      	add	r1, sp, #128	; 0x80
  4044ec:	bf08      	it	eq
  4044ee:	1c5d      	addeq	r5, r3, #1
  4044f0:	9004      	str	r0, [sp, #16]
  4044f2:	9103      	str	r1, [sp, #12]
  4044f4:	a81f      	add	r0, sp, #124	; 0x7c
  4044f6:	2102      	movs	r1, #2
  4044f8:	463b      	mov	r3, r7
  4044fa:	9002      	str	r0, [sp, #8]
  4044fc:	9501      	str	r5, [sp, #4]
  4044fe:	9100      	str	r1, [sp, #0]
  404500:	980c      	ldr	r0, [sp, #48]	; 0x30
  404502:	f000 fb75 	bl	404bf0 <_dtoa_r>
  404506:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404508:	2b67      	cmp	r3, #103	; 0x67
  40450a:	4606      	mov	r6, r0
  40450c:	f040 81e0 	bne.w	4048d0 <_svfprintf_r+0x1288>
  404510:	f01b 0f01 	tst.w	fp, #1
  404514:	f000 8246 	beq.w	4049a4 <_svfprintf_r+0x135c>
  404518:	1974      	adds	r4, r6, r5
  40451a:	9a16      	ldr	r2, [sp, #88]	; 0x58
  40451c:	9808      	ldr	r0, [sp, #32]
  40451e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  404520:	4639      	mov	r1, r7
  404522:	f003 fa8f 	bl	407a44 <__aeabi_dcmpeq>
  404526:	2800      	cmp	r0, #0
  404528:	f040 8165 	bne.w	4047f6 <_svfprintf_r+0x11ae>
  40452c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40452e:	42a3      	cmp	r3, r4
  404530:	d206      	bcs.n	404540 <_svfprintf_r+0xef8>
  404532:	2130      	movs	r1, #48	; 0x30
  404534:	1c5a      	adds	r2, r3, #1
  404536:	9223      	str	r2, [sp, #140]	; 0x8c
  404538:	7019      	strb	r1, [r3, #0]
  40453a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  40453c:	429c      	cmp	r4, r3
  40453e:	d8f9      	bhi.n	404534 <_svfprintf_r+0xeec>
  404540:	1b9b      	subs	r3, r3, r6
  404542:	9313      	str	r3, [sp, #76]	; 0x4c
  404544:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404546:	2b47      	cmp	r3, #71	; 0x47
  404548:	f000 80e9 	beq.w	40471e <_svfprintf_r+0x10d6>
  40454c:	9b11      	ldr	r3, [sp, #68]	; 0x44
  40454e:	2b65      	cmp	r3, #101	; 0x65
  404550:	f340 81cd 	ble.w	4048ee <_svfprintf_r+0x12a6>
  404554:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404556:	2b66      	cmp	r3, #102	; 0x66
  404558:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  40455a:	9312      	str	r3, [sp, #72]	; 0x48
  40455c:	f000 819e 	beq.w	40489c <_svfprintf_r+0x1254>
  404560:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404562:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404564:	4619      	mov	r1, r3
  404566:	4291      	cmp	r1, r2
  404568:	f300 818a 	bgt.w	404880 <_svfprintf_r+0x1238>
  40456c:	f01b 0f01 	tst.w	fp, #1
  404570:	f040 8213 	bne.w	40499a <_svfprintf_r+0x1352>
  404574:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  404578:	9308      	str	r3, [sp, #32]
  40457a:	2367      	movs	r3, #103	; 0x67
  40457c:	920e      	str	r2, [sp, #56]	; 0x38
  40457e:	9311      	str	r3, [sp, #68]	; 0x44
  404580:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404582:	2b00      	cmp	r3, #0
  404584:	f040 80c4 	bne.w	404710 <_svfprintf_r+0x10c8>
  404588:	930a      	str	r3, [sp, #40]	; 0x28
  40458a:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  40458e:	f7ff b973 	b.w	403878 <_svfprintf_r+0x230>
  404592:	4635      	mov	r5, r6
  404594:	460c      	mov	r4, r1
  404596:	4646      	mov	r6, r8
  404598:	4690      	mov	r8, r2
  40459a:	3301      	adds	r3, #1
  40459c:	443c      	add	r4, r7
  40459e:	2b07      	cmp	r3, #7
  4045a0:	9427      	str	r4, [sp, #156]	; 0x9c
  4045a2:	9326      	str	r3, [sp, #152]	; 0x98
  4045a4:	e888 00a0 	stmia.w	r8, {r5, r7}
  4045a8:	f73f aed1 	bgt.w	40434e <_svfprintf_r+0xd06>
  4045ac:	f108 0808 	add.w	r8, r8, #8
  4045b0:	e6d7      	b.n	404362 <_svfprintf_r+0xd1a>
  4045b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  4045b4:	6813      	ldr	r3, [r2, #0]
  4045b6:	3204      	adds	r2, #4
  4045b8:	920f      	str	r2, [sp, #60]	; 0x3c
  4045ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
  4045bc:	601a      	str	r2, [r3, #0]
  4045be:	f7ff b86a 	b.w	403696 <_svfprintf_r+0x4e>
  4045c2:	aa25      	add	r2, sp, #148	; 0x94
  4045c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4045c6:	980c      	ldr	r0, [sp, #48]	; 0x30
  4045c8:	f002 f9a8 	bl	40691c <__ssprint_r>
  4045cc:	2800      	cmp	r0, #0
  4045ce:	f47f a90d 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4045d2:	46c8      	mov	r8, r9
  4045d4:	e48d      	b.n	403ef2 <_svfprintf_r+0x8aa>
  4045d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
  4045d8:	4a27      	ldr	r2, [pc, #156]	; (404678 <_svfprintf_r+0x1030>)
  4045da:	f8c8 2000 	str.w	r2, [r8]
  4045de:	3301      	adds	r3, #1
  4045e0:	3401      	adds	r4, #1
  4045e2:	2201      	movs	r2, #1
  4045e4:	2b07      	cmp	r3, #7
  4045e6:	9427      	str	r4, [sp, #156]	; 0x9c
  4045e8:	9326      	str	r3, [sp, #152]	; 0x98
  4045ea:	f8c8 2004 	str.w	r2, [r8, #4]
  4045ee:	dc72      	bgt.n	4046d6 <_svfprintf_r+0x108e>
  4045f0:	f108 0808 	add.w	r8, r8, #8
  4045f4:	b929      	cbnz	r1, 404602 <_svfprintf_r+0xfba>
  4045f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  4045f8:	b91b      	cbnz	r3, 404602 <_svfprintf_r+0xfba>
  4045fa:	9b07      	ldr	r3, [sp, #28]
  4045fc:	07d8      	lsls	r0, r3, #31
  4045fe:	f57f aa03 	bpl.w	403a08 <_svfprintf_r+0x3c0>
  404602:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404604:	9819      	ldr	r0, [sp, #100]	; 0x64
  404606:	9a1a      	ldr	r2, [sp, #104]	; 0x68
  404608:	f8c8 2000 	str.w	r2, [r8]
  40460c:	3301      	adds	r3, #1
  40460e:	4602      	mov	r2, r0
  404610:	4422      	add	r2, r4
  404612:	2b07      	cmp	r3, #7
  404614:	9227      	str	r2, [sp, #156]	; 0x9c
  404616:	f8c8 0004 	str.w	r0, [r8, #4]
  40461a:	9326      	str	r3, [sp, #152]	; 0x98
  40461c:	f300 818d 	bgt.w	40493a <_svfprintf_r+0x12f2>
  404620:	f108 0808 	add.w	r8, r8, #8
  404624:	2900      	cmp	r1, #0
  404626:	f2c0 8165 	blt.w	4048f4 <_svfprintf_r+0x12ac>
  40462a:	9913      	ldr	r1, [sp, #76]	; 0x4c
  40462c:	f8c8 6000 	str.w	r6, [r8]
  404630:	3301      	adds	r3, #1
  404632:	188c      	adds	r4, r1, r2
  404634:	2b07      	cmp	r3, #7
  404636:	9427      	str	r4, [sp, #156]	; 0x9c
  404638:	9326      	str	r3, [sp, #152]	; 0x98
  40463a:	f8c8 1004 	str.w	r1, [r8, #4]
  40463e:	f77f a9e1 	ble.w	403a04 <_svfprintf_r+0x3bc>
  404642:	e52c      	b.n	40409e <_svfprintf_r+0xa56>
  404644:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  404646:	9909      	ldr	r1, [sp, #36]	; 0x24
  404648:	6813      	ldr	r3, [r2, #0]
  40464a:	17cd      	asrs	r5, r1, #31
  40464c:	4608      	mov	r0, r1
  40464e:	3204      	adds	r2, #4
  404650:	4629      	mov	r1, r5
  404652:	920f      	str	r2, [sp, #60]	; 0x3c
  404654:	e9c3 0100 	strd	r0, r1, [r3]
  404658:	f7ff b81d 	b.w	403696 <_svfprintf_r+0x4e>
  40465c:	aa25      	add	r2, sp, #148	; 0x94
  40465e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404660:	980c      	ldr	r0, [sp, #48]	; 0x30
  404662:	f002 f95b 	bl	40691c <__ssprint_r>
  404666:	2800      	cmp	r0, #0
  404668:	f47f a8c0 	bne.w	4037ec <_svfprintf_r+0x1a4>
  40466c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40466e:	46c8      	mov	r8, r9
  404670:	e458      	b.n	403f24 <_svfprintf_r+0x8dc>
  404672:	bf00      	nop
  404674:	00408628 	.word	0x00408628
  404678:	00408614 	.word	0x00408614
  40467c:	2140      	movs	r1, #64	; 0x40
  40467e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404680:	f001 fa0c 	bl	405a9c <_malloc_r>
  404684:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404686:	6010      	str	r0, [r2, #0]
  404688:	6110      	str	r0, [r2, #16]
  40468a:	2800      	cmp	r0, #0
  40468c:	f000 81f2 	beq.w	404a74 <_svfprintf_r+0x142c>
  404690:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404692:	2340      	movs	r3, #64	; 0x40
  404694:	6153      	str	r3, [r2, #20]
  404696:	f7fe bfee 	b.w	403676 <_svfprintf_r+0x2e>
  40469a:	a823      	add	r0, sp, #140	; 0x8c
  40469c:	a920      	add	r1, sp, #128	; 0x80
  40469e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  4046a0:	9004      	str	r0, [sp, #16]
  4046a2:	9103      	str	r1, [sp, #12]
  4046a4:	a81f      	add	r0, sp, #124	; 0x7c
  4046a6:	2103      	movs	r1, #3
  4046a8:	9002      	str	r0, [sp, #8]
  4046aa:	9a08      	ldr	r2, [sp, #32]
  4046ac:	9401      	str	r4, [sp, #4]
  4046ae:	463b      	mov	r3, r7
  4046b0:	9100      	str	r1, [sp, #0]
  4046b2:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046b4:	f000 fa9c 	bl	404bf0 <_dtoa_r>
  4046b8:	4625      	mov	r5, r4
  4046ba:	4606      	mov	r6, r0
  4046bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4046be:	2b46      	cmp	r3, #70	; 0x46
  4046c0:	eb06 0405 	add.w	r4, r6, r5
  4046c4:	f47f af29 	bne.w	40451a <_svfprintf_r+0xed2>
  4046c8:	7833      	ldrb	r3, [r6, #0]
  4046ca:	2b30      	cmp	r3, #48	; 0x30
  4046cc:	f000 8178 	beq.w	4049c0 <_svfprintf_r+0x1378>
  4046d0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
  4046d2:	442c      	add	r4, r5
  4046d4:	e721      	b.n	40451a <_svfprintf_r+0xed2>
  4046d6:	aa25      	add	r2, sp, #148	; 0x94
  4046d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4046da:	980c      	ldr	r0, [sp, #48]	; 0x30
  4046dc:	f002 f91e 	bl	40691c <__ssprint_r>
  4046e0:	2800      	cmp	r0, #0
  4046e2:	f47f a883 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4046e6:	991f      	ldr	r1, [sp, #124]	; 0x7c
  4046e8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4046ea:	46c8      	mov	r8, r9
  4046ec:	e782      	b.n	4045f4 <_svfprintf_r+0xfac>
  4046ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4046f0:	2b00      	cmp	r3, #0
  4046f2:	bf08      	it	eq
  4046f4:	2301      	moveq	r3, #1
  4046f6:	930a      	str	r3, [sp, #40]	; 0x28
  4046f8:	e6db      	b.n	4044b2 <_svfprintf_r+0xe6a>
  4046fa:	4630      	mov	r0, r6
  4046fc:	940a      	str	r4, [sp, #40]	; 0x28
  4046fe:	f002 f89f 	bl	406840 <strlen>
  404702:	950f      	str	r5, [sp, #60]	; 0x3c
  404704:	900e      	str	r0, [sp, #56]	; 0x38
  404706:	f8cd b01c 	str.w	fp, [sp, #28]
  40470a:	4603      	mov	r3, r0
  40470c:	f7ff b9f9 	b.w	403b02 <_svfprintf_r+0x4ba>
  404710:	272d      	movs	r7, #45	; 0x2d
  404712:	2300      	movs	r3, #0
  404714:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  404718:	930a      	str	r3, [sp, #40]	; 0x28
  40471a:	f7ff b8ae 	b.w	40387a <_svfprintf_r+0x232>
  40471e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  404720:	9312      	str	r3, [sp, #72]	; 0x48
  404722:	461a      	mov	r2, r3
  404724:	3303      	adds	r3, #3
  404726:	db04      	blt.n	404732 <_svfprintf_r+0x10ea>
  404728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40472a:	4619      	mov	r1, r3
  40472c:	4291      	cmp	r1, r2
  40472e:	f6bf af17 	bge.w	404560 <_svfprintf_r+0xf18>
  404732:	9b11      	ldr	r3, [sp, #68]	; 0x44
  404734:	3b02      	subs	r3, #2
  404736:	9311      	str	r3, [sp, #68]	; 0x44
  404738:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
  40473c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
  404740:	9b12      	ldr	r3, [sp, #72]	; 0x48
  404742:	3b01      	subs	r3, #1
  404744:	2b00      	cmp	r3, #0
  404746:	931f      	str	r3, [sp, #124]	; 0x7c
  404748:	bfbd      	ittte	lt
  40474a:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
  40474c:	f1c3 0301 	rsblt	r3, r3, #1
  404750:	222d      	movlt	r2, #45	; 0x2d
  404752:	222b      	movge	r2, #43	; 0x2b
  404754:	2b09      	cmp	r3, #9
  404756:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
  40475a:	f340 8116 	ble.w	40498a <_svfprintf_r+0x1342>
  40475e:	f10d 0493 	add.w	r4, sp, #147	; 0x93
  404762:	4620      	mov	r0, r4
  404764:	4dab      	ldr	r5, [pc, #684]	; (404a14 <_svfprintf_r+0x13cc>)
  404766:	e000      	b.n	40476a <_svfprintf_r+0x1122>
  404768:	4610      	mov	r0, r2
  40476a:	fb85 1203 	smull	r1, r2, r5, r3
  40476e:	17d9      	asrs	r1, r3, #31
  404770:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
  404774:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  404778:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
  40477c:	3230      	adds	r2, #48	; 0x30
  40477e:	2909      	cmp	r1, #9
  404780:	f800 2c01 	strb.w	r2, [r0, #-1]
  404784:	460b      	mov	r3, r1
  404786:	f100 32ff 	add.w	r2, r0, #4294967295
  40478a:	dced      	bgt.n	404768 <_svfprintf_r+0x1120>
  40478c:	3330      	adds	r3, #48	; 0x30
  40478e:	3802      	subs	r0, #2
  404790:	b2d9      	uxtb	r1, r3
  404792:	4284      	cmp	r4, r0
  404794:	f802 1c01 	strb.w	r1, [r2, #-1]
  404798:	f240 8165 	bls.w	404a66 <_svfprintf_r+0x141e>
  40479c:	f10d 0086 	add.w	r0, sp, #134	; 0x86
  4047a0:	4613      	mov	r3, r2
  4047a2:	e001      	b.n	4047a8 <_svfprintf_r+0x1160>
  4047a4:	f813 1b01 	ldrb.w	r1, [r3], #1
  4047a8:	f800 1b01 	strb.w	r1, [r0], #1
  4047ac:	42a3      	cmp	r3, r4
  4047ae:	d1f9      	bne.n	4047a4 <_svfprintf_r+0x115c>
  4047b0:	3301      	adds	r3, #1
  4047b2:	1a9b      	subs	r3, r3, r2
  4047b4:	f10d 0286 	add.w	r2, sp, #134	; 0x86
  4047b8:	4413      	add	r3, r2
  4047ba:	aa21      	add	r2, sp, #132	; 0x84
  4047bc:	1a9b      	subs	r3, r3, r2
  4047be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
  4047c0:	931b      	str	r3, [sp, #108]	; 0x6c
  4047c2:	2a01      	cmp	r2, #1
  4047c4:	4413      	add	r3, r2
  4047c6:	930e      	str	r3, [sp, #56]	; 0x38
  4047c8:	f340 8119 	ble.w	4049fe <_svfprintf_r+0x13b6>
  4047cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4047ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4047d0:	4413      	add	r3, r2
  4047d2:	930e      	str	r3, [sp, #56]	; 0x38
  4047d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  4047d8:	9308      	str	r3, [sp, #32]
  4047da:	2300      	movs	r3, #0
  4047dc:	9312      	str	r3, [sp, #72]	; 0x48
  4047de:	e6cf      	b.n	404580 <_svfprintf_r+0xf38>
  4047e0:	aa25      	add	r2, sp, #148	; 0x94
  4047e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047e4:	980c      	ldr	r0, [sp, #48]	; 0x30
  4047e6:	f002 f899 	bl	40691c <__ssprint_r>
  4047ea:	2800      	cmp	r0, #0
  4047ec:	f47e affe 	bne.w	4037ec <_svfprintf_r+0x1a4>
  4047f0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  4047f2:	46c8      	mov	r8, r9
  4047f4:	e4d7      	b.n	4041a6 <_svfprintf_r+0xb5e>
  4047f6:	4623      	mov	r3, r4
  4047f8:	e6a2      	b.n	404540 <_svfprintf_r+0xef8>
  4047fa:	aa25      	add	r2, sp, #148	; 0x94
  4047fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
  4047fe:	980c      	ldr	r0, [sp, #48]	; 0x30
  404800:	f002 f88c 	bl	40691c <__ssprint_r>
  404804:	2800      	cmp	r0, #0
  404806:	f47e aff1 	bne.w	4037ec <_svfprintf_r+0x1a4>
  40480a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  40480c:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  40480e:	46c8      	mov	r8, r9
  404810:	e5ae      	b.n	404370 <_svfprintf_r+0xd28>
  404812:	aa25      	add	r2, sp, #148	; 0x94
  404814:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404816:	980c      	ldr	r0, [sp, #48]	; 0x30
  404818:	f002 f880 	bl	40691c <__ssprint_r>
  40481c:	2800      	cmp	r0, #0
  40481e:	f47e afe5 	bne.w	4037ec <_svfprintf_r+0x1a4>
  404822:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
  404824:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404826:	9c27      	ldr	r4, [sp, #156]	; 0x9c
  404828:	1a9a      	subs	r2, r3, r2
  40482a:	46c8      	mov	r8, r9
  40482c:	e5b8      	b.n	4043a0 <_svfprintf_r+0xd58>
  40482e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404830:	9612      	str	r6, [sp, #72]	; 0x48
  404832:	2b06      	cmp	r3, #6
  404834:	bf28      	it	cs
  404836:	2306      	movcs	r3, #6
  404838:	960a      	str	r6, [sp, #40]	; 0x28
  40483a:	4637      	mov	r7, r6
  40483c:	9308      	str	r3, [sp, #32]
  40483e:	950f      	str	r5, [sp, #60]	; 0x3c
  404840:	f8cd b01c 	str.w	fp, [sp, #28]
  404844:	930e      	str	r3, [sp, #56]	; 0x38
  404846:	4e74      	ldr	r6, [pc, #464]	; (404a18 <_svfprintf_r+0x13d0>)
  404848:	f7ff b816 	b.w	403878 <_svfprintf_r+0x230>
  40484c:	a823      	add	r0, sp, #140	; 0x8c
  40484e:	a920      	add	r1, sp, #128	; 0x80
  404850:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  404852:	9004      	str	r0, [sp, #16]
  404854:	9103      	str	r1, [sp, #12]
  404856:	a81f      	add	r0, sp, #124	; 0x7c
  404858:	2103      	movs	r1, #3
  40485a:	9002      	str	r0, [sp, #8]
  40485c:	9a08      	ldr	r2, [sp, #32]
  40485e:	9501      	str	r5, [sp, #4]
  404860:	463b      	mov	r3, r7
  404862:	9100      	str	r1, [sp, #0]
  404864:	980c      	ldr	r0, [sp, #48]	; 0x30
  404866:	f000 f9c3 	bl	404bf0 <_dtoa_r>
  40486a:	4606      	mov	r6, r0
  40486c:	1944      	adds	r4, r0, r5
  40486e:	e72b      	b.n	4046c8 <_svfprintf_r+0x1080>
  404870:	2306      	movs	r3, #6
  404872:	930a      	str	r3, [sp, #40]	; 0x28
  404874:	e61d      	b.n	4044b2 <_svfprintf_r+0xe6a>
  404876:	272d      	movs	r7, #45	; 0x2d
  404878:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
  40487c:	f7ff bacd 	b.w	403e1a <_svfprintf_r+0x7d2>
  404880:	9a19      	ldr	r2, [sp, #100]	; 0x64
  404882:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  404884:	4413      	add	r3, r2
  404886:	9a12      	ldr	r2, [sp, #72]	; 0x48
  404888:	930e      	str	r3, [sp, #56]	; 0x38
  40488a:	2a00      	cmp	r2, #0
  40488c:	f340 80b0 	ble.w	4049f0 <_svfprintf_r+0x13a8>
  404890:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404894:	9308      	str	r3, [sp, #32]
  404896:	2367      	movs	r3, #103	; 0x67
  404898:	9311      	str	r3, [sp, #68]	; 0x44
  40489a:	e671      	b.n	404580 <_svfprintf_r+0xf38>
  40489c:	2b00      	cmp	r3, #0
  40489e:	f340 80c3 	ble.w	404a28 <_svfprintf_r+0x13e0>
  4048a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4048a4:	2a00      	cmp	r2, #0
  4048a6:	f040 8099 	bne.w	4049dc <_svfprintf_r+0x1394>
  4048aa:	f01b 0f01 	tst.w	fp, #1
  4048ae:	f040 8095 	bne.w	4049dc <_svfprintf_r+0x1394>
  4048b2:	9308      	str	r3, [sp, #32]
  4048b4:	930e      	str	r3, [sp, #56]	; 0x38
  4048b6:	e663      	b.n	404580 <_svfprintf_r+0xf38>
  4048b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4048ba:	9308      	str	r3, [sp, #32]
  4048bc:	930e      	str	r3, [sp, #56]	; 0x38
  4048be:	900a      	str	r0, [sp, #40]	; 0x28
  4048c0:	950f      	str	r5, [sp, #60]	; 0x3c
  4048c2:	f8cd b01c 	str.w	fp, [sp, #28]
  4048c6:	9012      	str	r0, [sp, #72]	; 0x48
  4048c8:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
  4048cc:	f7fe bfd4 	b.w	403878 <_svfprintf_r+0x230>
  4048d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  4048d2:	2b47      	cmp	r3, #71	; 0x47
  4048d4:	f47f ae20 	bne.w	404518 <_svfprintf_r+0xed0>
  4048d8:	f01b 0f01 	tst.w	fp, #1
  4048dc:	f47f aeee 	bne.w	4046bc <_svfprintf_r+0x1074>
  4048e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4048e2:	1b9b      	subs	r3, r3, r6
  4048e4:	9313      	str	r3, [sp, #76]	; 0x4c
  4048e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4048e8:	2b47      	cmp	r3, #71	; 0x47
  4048ea:	f43f af18 	beq.w	40471e <_svfprintf_r+0x10d6>
  4048ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
  4048f0:	9312      	str	r3, [sp, #72]	; 0x48
  4048f2:	e721      	b.n	404738 <_svfprintf_r+0x10f0>
  4048f4:	424f      	negs	r7, r1
  4048f6:	3110      	adds	r1, #16
  4048f8:	4d48      	ldr	r5, [pc, #288]	; (404a1c <_svfprintf_r+0x13d4>)
  4048fa:	da2f      	bge.n	40495c <_svfprintf_r+0x1314>
  4048fc:	2410      	movs	r4, #16
  4048fe:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
  404902:	e004      	b.n	40490e <_svfprintf_r+0x12c6>
  404904:	f108 0808 	add.w	r8, r8, #8
  404908:	3f10      	subs	r7, #16
  40490a:	2f10      	cmp	r7, #16
  40490c:	dd26      	ble.n	40495c <_svfprintf_r+0x1314>
  40490e:	3301      	adds	r3, #1
  404910:	3210      	adds	r2, #16
  404912:	2b07      	cmp	r3, #7
  404914:	9227      	str	r2, [sp, #156]	; 0x9c
  404916:	9326      	str	r3, [sp, #152]	; 0x98
  404918:	f8c8 5000 	str.w	r5, [r8]
  40491c:	f8c8 4004 	str.w	r4, [r8, #4]
  404920:	ddf0      	ble.n	404904 <_svfprintf_r+0x12bc>
  404922:	aa25      	add	r2, sp, #148	; 0x94
  404924:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404926:	4658      	mov	r0, fp
  404928:	f001 fff8 	bl	40691c <__ssprint_r>
  40492c:	2800      	cmp	r0, #0
  40492e:	f47e af5d 	bne.w	4037ec <_svfprintf_r+0x1a4>
  404932:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404934:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404936:	46c8      	mov	r8, r9
  404938:	e7e6      	b.n	404908 <_svfprintf_r+0x12c0>
  40493a:	aa25      	add	r2, sp, #148	; 0x94
  40493c:	990b      	ldr	r1, [sp, #44]	; 0x2c
  40493e:	980c      	ldr	r0, [sp, #48]	; 0x30
  404940:	f001 ffec 	bl	40691c <__ssprint_r>
  404944:	2800      	cmp	r0, #0
  404946:	f47e af51 	bne.w	4037ec <_svfprintf_r+0x1a4>
  40494a:	991f      	ldr	r1, [sp, #124]	; 0x7c
  40494c:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  40494e:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404950:	46c8      	mov	r8, r9
  404952:	e667      	b.n	404624 <_svfprintf_r+0xfdc>
  404954:	2000      	movs	r0, #0
  404956:	900a      	str	r0, [sp, #40]	; 0x28
  404958:	f7fe bed0 	b.w	4036fc <_svfprintf_r+0xb4>
  40495c:	3301      	adds	r3, #1
  40495e:	443a      	add	r2, r7
  404960:	2b07      	cmp	r3, #7
  404962:	e888 00a0 	stmia.w	r8, {r5, r7}
  404966:	9227      	str	r2, [sp, #156]	; 0x9c
  404968:	9326      	str	r3, [sp, #152]	; 0x98
  40496a:	f108 0808 	add.w	r8, r8, #8
  40496e:	f77f ae5c 	ble.w	40462a <_svfprintf_r+0xfe2>
  404972:	aa25      	add	r2, sp, #148	; 0x94
  404974:	990b      	ldr	r1, [sp, #44]	; 0x2c
  404976:	980c      	ldr	r0, [sp, #48]	; 0x30
  404978:	f001 ffd0 	bl	40691c <__ssprint_r>
  40497c:	2800      	cmp	r0, #0
  40497e:	f47e af35 	bne.w	4037ec <_svfprintf_r+0x1a4>
  404982:	9a27      	ldr	r2, [sp, #156]	; 0x9c
  404984:	9b26      	ldr	r3, [sp, #152]	; 0x98
  404986:	46c8      	mov	r8, r9
  404988:	e64f      	b.n	40462a <_svfprintf_r+0xfe2>
  40498a:	3330      	adds	r3, #48	; 0x30
  40498c:	2230      	movs	r2, #48	; 0x30
  40498e:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
  404992:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
  404996:	ab22      	add	r3, sp, #136	; 0x88
  404998:	e70f      	b.n	4047ba <_svfprintf_r+0x1172>
  40499a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40499c:	9a19      	ldr	r2, [sp, #100]	; 0x64
  40499e:	4413      	add	r3, r2
  4049a0:	930e      	str	r3, [sp, #56]	; 0x38
  4049a2:	e775      	b.n	404890 <_svfprintf_r+0x1248>
  4049a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
  4049a6:	e5cb      	b.n	404540 <_svfprintf_r+0xef8>
  4049a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
  4049aa:	4e1d      	ldr	r6, [pc, #116]	; (404a20 <_svfprintf_r+0x13d8>)
  4049ac:	2b00      	cmp	r3, #0
  4049ae:	bfb6      	itet	lt
  4049b0:	272d      	movlt	r7, #45	; 0x2d
  4049b2:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
  4049b6:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
  4049ba:	4b1a      	ldr	r3, [pc, #104]	; (404a24 <_svfprintf_r+0x13dc>)
  4049bc:	f7ff ba2f 	b.w	403e1e <_svfprintf_r+0x7d6>
  4049c0:	9a16      	ldr	r2, [sp, #88]	; 0x58
  4049c2:	9808      	ldr	r0, [sp, #32]
  4049c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  4049c6:	4639      	mov	r1, r7
  4049c8:	f003 f83c 	bl	407a44 <__aeabi_dcmpeq>
  4049cc:	2800      	cmp	r0, #0
  4049ce:	f47f ae7f 	bne.w	4046d0 <_svfprintf_r+0x1088>
  4049d2:	f1c5 0501 	rsb	r5, r5, #1
  4049d6:	951f      	str	r5, [sp, #124]	; 0x7c
  4049d8:	442c      	add	r4, r5
  4049da:	e59e      	b.n	40451a <_svfprintf_r+0xed2>
  4049dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049de:	9a19      	ldr	r2, [sp, #100]	; 0x64
  4049e0:	4413      	add	r3, r2
  4049e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4049e4:	441a      	add	r2, r3
  4049e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
  4049ea:	920e      	str	r2, [sp, #56]	; 0x38
  4049ec:	9308      	str	r3, [sp, #32]
  4049ee:	e5c7      	b.n	404580 <_svfprintf_r+0xf38>
  4049f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4049f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
  4049f4:	f1c3 0301 	rsb	r3, r3, #1
  4049f8:	441a      	add	r2, r3
  4049fa:	4613      	mov	r3, r2
  4049fc:	e7d0      	b.n	4049a0 <_svfprintf_r+0x1358>
  4049fe:	f01b 0301 	ands.w	r3, fp, #1
  404a02:	9312      	str	r3, [sp, #72]	; 0x48
  404a04:	f47f aee2 	bne.w	4047cc <_svfprintf_r+0x1184>
  404a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  404a0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  404a0e:	9308      	str	r3, [sp, #32]
  404a10:	e5b6      	b.n	404580 <_svfprintf_r+0xf38>
  404a12:	bf00      	nop
  404a14:	66666667 	.word	0x66666667
  404a18:	0040860c 	.word	0x0040860c
  404a1c:	00408628 	.word	0x00408628
  404a20:	004085e0 	.word	0x004085e0
  404a24:	004085dc 	.word	0x004085dc
  404a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404a2a:	b913      	cbnz	r3, 404a32 <_svfprintf_r+0x13ea>
  404a2c:	f01b 0f01 	tst.w	fp, #1
  404a30:	d002      	beq.n	404a38 <_svfprintf_r+0x13f0>
  404a32:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404a34:	3301      	adds	r3, #1
  404a36:	e7d4      	b.n	4049e2 <_svfprintf_r+0x139a>
  404a38:	2301      	movs	r3, #1
  404a3a:	e73a      	b.n	4048b2 <_svfprintf_r+0x126a>
  404a3c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
  404a3e:	f89a 3001 	ldrb.w	r3, [sl, #1]
  404a42:	6828      	ldr	r0, [r5, #0]
  404a44:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
  404a48:	900a      	str	r0, [sp, #40]	; 0x28
  404a4a:	4628      	mov	r0, r5
  404a4c:	3004      	adds	r0, #4
  404a4e:	46a2      	mov	sl, r4
  404a50:	900f      	str	r0, [sp, #60]	; 0x3c
  404a52:	f7fe be51 	b.w	4036f8 <_svfprintf_r+0xb0>
  404a56:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a5a:	f7ff b867 	b.w	403b2c <_svfprintf_r+0x4e4>
  404a5e:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a62:	f7ff ba15 	b.w	403e90 <_svfprintf_r+0x848>
  404a66:	f10d 0386 	add.w	r3, sp, #134	; 0x86
  404a6a:	e6a6      	b.n	4047ba <_svfprintf_r+0x1172>
  404a6c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a70:	f7ff b8eb 	b.w	403c4a <_svfprintf_r+0x602>
  404a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404a76:	230c      	movs	r3, #12
  404a78:	6013      	str	r3, [r2, #0]
  404a7a:	f04f 33ff 	mov.w	r3, #4294967295
  404a7e:	9309      	str	r3, [sp, #36]	; 0x24
  404a80:	f7fe bebd 	b.w	4037fe <_svfprintf_r+0x1b6>
  404a84:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a88:	f7ff b99a 	b.w	403dc0 <_svfprintf_r+0x778>
  404a8c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a90:	f7ff b976 	b.w	403d80 <_svfprintf_r+0x738>
  404a94:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404a98:	f7ff b959 	b.w	403d4e <_svfprintf_r+0x706>
  404a9c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
  404aa0:	f7ff b912 	b.w	403cc8 <_svfprintf_r+0x680>

00404aa4 <register_fini>:
  404aa4:	4b02      	ldr	r3, [pc, #8]	; (404ab0 <register_fini+0xc>)
  404aa6:	b113      	cbz	r3, 404aae <register_fini+0xa>
  404aa8:	4802      	ldr	r0, [pc, #8]	; (404ab4 <register_fini+0x10>)
  404aaa:	f000 b805 	b.w	404ab8 <atexit>
  404aae:	4770      	bx	lr
  404ab0:	00000000 	.word	0x00000000
  404ab4:	00405a45 	.word	0x00405a45

00404ab8 <atexit>:
  404ab8:	2300      	movs	r3, #0
  404aba:	4601      	mov	r1, r0
  404abc:	461a      	mov	r2, r3
  404abe:	4618      	mov	r0, r3
  404ac0:	f001 bfaa 	b.w	406a18 <__register_exitproc>

00404ac4 <quorem>:
  404ac4:	6902      	ldr	r2, [r0, #16]
  404ac6:	690b      	ldr	r3, [r1, #16]
  404ac8:	4293      	cmp	r3, r2
  404aca:	f300 808d 	bgt.w	404be8 <quorem+0x124>
  404ace:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404ad2:	f103 38ff 	add.w	r8, r3, #4294967295
  404ad6:	f101 0714 	add.w	r7, r1, #20
  404ada:	f100 0b14 	add.w	fp, r0, #20
  404ade:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
  404ae2:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
  404ae6:	ea4f 0488 	mov.w	r4, r8, lsl #2
  404aea:	b083      	sub	sp, #12
  404aec:	3201      	adds	r2, #1
  404aee:	fbb3 f9f2 	udiv	r9, r3, r2
  404af2:	eb0b 0304 	add.w	r3, fp, r4
  404af6:	9400      	str	r4, [sp, #0]
  404af8:	eb07 0a04 	add.w	sl, r7, r4
  404afc:	9301      	str	r3, [sp, #4]
  404afe:	f1b9 0f00 	cmp.w	r9, #0
  404b02:	d039      	beq.n	404b78 <quorem+0xb4>
  404b04:	2500      	movs	r5, #0
  404b06:	462e      	mov	r6, r5
  404b08:	46bc      	mov	ip, r7
  404b0a:	46de      	mov	lr, fp
  404b0c:	f85c 4b04 	ldr.w	r4, [ip], #4
  404b10:	f8de 3000 	ldr.w	r3, [lr]
  404b14:	b2a2      	uxth	r2, r4
  404b16:	fb09 5502 	mla	r5, r9, r2, r5
  404b1a:	0c22      	lsrs	r2, r4, #16
  404b1c:	0c2c      	lsrs	r4, r5, #16
  404b1e:	fb09 4202 	mla	r2, r9, r2, r4
  404b22:	b2ad      	uxth	r5, r5
  404b24:	1b75      	subs	r5, r6, r5
  404b26:	b296      	uxth	r6, r2
  404b28:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
  404b2c:	fa15 f383 	uxtah	r3, r5, r3
  404b30:	eb06 4623 	add.w	r6, r6, r3, asr #16
  404b34:	b29b      	uxth	r3, r3
  404b36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  404b3a:	45e2      	cmp	sl, ip
  404b3c:	ea4f 4512 	mov.w	r5, r2, lsr #16
  404b40:	f84e 3b04 	str.w	r3, [lr], #4
  404b44:	ea4f 4626 	mov.w	r6, r6, asr #16
  404b48:	d2e0      	bcs.n	404b0c <quorem+0x48>
  404b4a:	9b00      	ldr	r3, [sp, #0]
  404b4c:	f85b 3003 	ldr.w	r3, [fp, r3]
  404b50:	b993      	cbnz	r3, 404b78 <quorem+0xb4>
  404b52:	9c01      	ldr	r4, [sp, #4]
  404b54:	1f23      	subs	r3, r4, #4
  404b56:	459b      	cmp	fp, r3
  404b58:	d20c      	bcs.n	404b74 <quorem+0xb0>
  404b5a:	f854 3c04 	ldr.w	r3, [r4, #-4]
  404b5e:	b94b      	cbnz	r3, 404b74 <quorem+0xb0>
  404b60:	f1a4 0308 	sub.w	r3, r4, #8
  404b64:	e002      	b.n	404b6c <quorem+0xa8>
  404b66:	681a      	ldr	r2, [r3, #0]
  404b68:	3b04      	subs	r3, #4
  404b6a:	b91a      	cbnz	r2, 404b74 <quorem+0xb0>
  404b6c:	459b      	cmp	fp, r3
  404b6e:	f108 38ff 	add.w	r8, r8, #4294967295
  404b72:	d3f8      	bcc.n	404b66 <quorem+0xa2>
  404b74:	f8c0 8010 	str.w	r8, [r0, #16]
  404b78:	4604      	mov	r4, r0
  404b7a:	f001 fd35 	bl	4065e8 <__mcmp>
  404b7e:	2800      	cmp	r0, #0
  404b80:	db2e      	blt.n	404be0 <quorem+0x11c>
  404b82:	f109 0901 	add.w	r9, r9, #1
  404b86:	465d      	mov	r5, fp
  404b88:	2300      	movs	r3, #0
  404b8a:	f857 1b04 	ldr.w	r1, [r7], #4
  404b8e:	6828      	ldr	r0, [r5, #0]
  404b90:	b28a      	uxth	r2, r1
  404b92:	1a9a      	subs	r2, r3, r2
  404b94:	0c0b      	lsrs	r3, r1, #16
  404b96:	fa12 f280 	uxtah	r2, r2, r0
  404b9a:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
  404b9e:	eb03 4322 	add.w	r3, r3, r2, asr #16
  404ba2:	b292      	uxth	r2, r2
  404ba4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  404ba8:	45ba      	cmp	sl, r7
  404baa:	f845 2b04 	str.w	r2, [r5], #4
  404bae:	ea4f 4323 	mov.w	r3, r3, asr #16
  404bb2:	d2ea      	bcs.n	404b8a <quorem+0xc6>
  404bb4:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
  404bb8:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
  404bbc:	b982      	cbnz	r2, 404be0 <quorem+0x11c>
  404bbe:	1f1a      	subs	r2, r3, #4
  404bc0:	4593      	cmp	fp, r2
  404bc2:	d20b      	bcs.n	404bdc <quorem+0x118>
  404bc4:	f853 2c04 	ldr.w	r2, [r3, #-4]
  404bc8:	b942      	cbnz	r2, 404bdc <quorem+0x118>
  404bca:	3b08      	subs	r3, #8
  404bcc:	e002      	b.n	404bd4 <quorem+0x110>
  404bce:	681a      	ldr	r2, [r3, #0]
  404bd0:	3b04      	subs	r3, #4
  404bd2:	b91a      	cbnz	r2, 404bdc <quorem+0x118>
  404bd4:	459b      	cmp	fp, r3
  404bd6:	f108 38ff 	add.w	r8, r8, #4294967295
  404bda:	d3f8      	bcc.n	404bce <quorem+0x10a>
  404bdc:	f8c4 8010 	str.w	r8, [r4, #16]
  404be0:	4648      	mov	r0, r9
  404be2:	b003      	add	sp, #12
  404be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404be8:	2000      	movs	r0, #0
  404bea:	4770      	bx	lr
  404bec:	0000      	movs	r0, r0
	...

00404bf0 <_dtoa_r>:
  404bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404bf4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  404bf6:	b09b      	sub	sp, #108	; 0x6c
  404bf8:	4604      	mov	r4, r0
  404bfa:	9e27      	ldr	r6, [sp, #156]	; 0x9c
  404bfc:	4692      	mov	sl, r2
  404bfe:	469b      	mov	fp, r3
  404c00:	b141      	cbz	r1, 404c14 <_dtoa_r+0x24>
  404c02:	6c42      	ldr	r2, [r0, #68]	; 0x44
  404c04:	604a      	str	r2, [r1, #4]
  404c06:	2301      	movs	r3, #1
  404c08:	4093      	lsls	r3, r2
  404c0a:	608b      	str	r3, [r1, #8]
  404c0c:	f001 fb14 	bl	406238 <_Bfree>
  404c10:	2300      	movs	r3, #0
  404c12:	6423      	str	r3, [r4, #64]	; 0x40
  404c14:	f1bb 0f00 	cmp.w	fp, #0
  404c18:	465d      	mov	r5, fp
  404c1a:	db35      	blt.n	404c88 <_dtoa_r+0x98>
  404c1c:	2300      	movs	r3, #0
  404c1e:	6033      	str	r3, [r6, #0]
  404c20:	4b9d      	ldr	r3, [pc, #628]	; (404e98 <_dtoa_r+0x2a8>)
  404c22:	43ab      	bics	r3, r5
  404c24:	d015      	beq.n	404c52 <_dtoa_r+0x62>
  404c26:	4650      	mov	r0, sl
  404c28:	4659      	mov	r1, fp
  404c2a:	2200      	movs	r2, #0
  404c2c:	2300      	movs	r3, #0
  404c2e:	f002 ff09 	bl	407a44 <__aeabi_dcmpeq>
  404c32:	4680      	mov	r8, r0
  404c34:	2800      	cmp	r0, #0
  404c36:	d02d      	beq.n	404c94 <_dtoa_r+0xa4>
  404c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404c3a:	2301      	movs	r3, #1
  404c3c:	6013      	str	r3, [r2, #0]
  404c3e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404c40:	2b00      	cmp	r3, #0
  404c42:	f000 80bd 	beq.w	404dc0 <_dtoa_r+0x1d0>
  404c46:	4895      	ldr	r0, [pc, #596]	; (404e9c <_dtoa_r+0x2ac>)
  404c48:	6018      	str	r0, [r3, #0]
  404c4a:	3801      	subs	r0, #1
  404c4c:	b01b      	add	sp, #108	; 0x6c
  404c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c52:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404c54:	f242 730f 	movw	r3, #9999	; 0x270f
  404c58:	6013      	str	r3, [r2, #0]
  404c5a:	f1ba 0f00 	cmp.w	sl, #0
  404c5e:	d10d      	bne.n	404c7c <_dtoa_r+0x8c>
  404c60:	f3c5 0513 	ubfx	r5, r5, #0, #20
  404c64:	b955      	cbnz	r5, 404c7c <_dtoa_r+0x8c>
  404c66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404c68:	488d      	ldr	r0, [pc, #564]	; (404ea0 <_dtoa_r+0x2b0>)
  404c6a:	2b00      	cmp	r3, #0
  404c6c:	d0ee      	beq.n	404c4c <_dtoa_r+0x5c>
  404c6e:	f100 0308 	add.w	r3, r0, #8
  404c72:	9a28      	ldr	r2, [sp, #160]	; 0xa0
  404c74:	6013      	str	r3, [r2, #0]
  404c76:	b01b      	add	sp, #108	; 0x6c
  404c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404c7c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404c7e:	4889      	ldr	r0, [pc, #548]	; (404ea4 <_dtoa_r+0x2b4>)
  404c80:	2b00      	cmp	r3, #0
  404c82:	d0e3      	beq.n	404c4c <_dtoa_r+0x5c>
  404c84:	1cc3      	adds	r3, r0, #3
  404c86:	e7f4      	b.n	404c72 <_dtoa_r+0x82>
  404c88:	2301      	movs	r3, #1
  404c8a:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
  404c8e:	6033      	str	r3, [r6, #0]
  404c90:	46ab      	mov	fp, r5
  404c92:	e7c5      	b.n	404c20 <_dtoa_r+0x30>
  404c94:	aa18      	add	r2, sp, #96	; 0x60
  404c96:	ab19      	add	r3, sp, #100	; 0x64
  404c98:	9201      	str	r2, [sp, #4]
  404c9a:	9300      	str	r3, [sp, #0]
  404c9c:	4652      	mov	r2, sl
  404c9e:	465b      	mov	r3, fp
  404ca0:	4620      	mov	r0, r4
  404ca2:	f001 fd41 	bl	406728 <__d2b>
  404ca6:	0d2b      	lsrs	r3, r5, #20
  404ca8:	4681      	mov	r9, r0
  404caa:	d071      	beq.n	404d90 <_dtoa_r+0x1a0>
  404cac:	f3cb 0213 	ubfx	r2, fp, #0, #20
  404cb0:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
  404cb4:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404cb6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  404cba:	4650      	mov	r0, sl
  404cbc:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
  404cc0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
  404cc4:	2200      	movs	r2, #0
  404cc6:	4b78      	ldr	r3, [pc, #480]	; (404ea8 <_dtoa_r+0x2b8>)
  404cc8:	f002 faa0 	bl	40720c <__aeabi_dsub>
  404ccc:	a36c      	add	r3, pc, #432	; (adr r3, 404e80 <_dtoa_r+0x290>)
  404cce:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cd2:	f002 fc4f 	bl	407574 <__aeabi_dmul>
  404cd6:	a36c      	add	r3, pc, #432	; (adr r3, 404e88 <_dtoa_r+0x298>)
  404cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cdc:	f002 fa98 	bl	407210 <__adddf3>
  404ce0:	e9cd 0102 	strd	r0, r1, [sp, #8]
  404ce4:	4630      	mov	r0, r6
  404ce6:	f002 fbdf 	bl	4074a8 <__aeabi_i2d>
  404cea:	a369      	add	r3, pc, #420	; (adr r3, 404e90 <_dtoa_r+0x2a0>)
  404cec:	e9d3 2300 	ldrd	r2, r3, [r3]
  404cf0:	f002 fc40 	bl	407574 <__aeabi_dmul>
  404cf4:	4602      	mov	r2, r0
  404cf6:	460b      	mov	r3, r1
  404cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
  404cfc:	f002 fa88 	bl	407210 <__adddf3>
  404d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
  404d04:	f002 fee6 	bl	407ad4 <__aeabi_d2iz>
  404d08:	2200      	movs	r2, #0
  404d0a:	9002      	str	r0, [sp, #8]
  404d0c:	2300      	movs	r3, #0
  404d0e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  404d12:	f002 fea1 	bl	407a58 <__aeabi_dcmplt>
  404d16:	2800      	cmp	r0, #0
  404d18:	f040 8173 	bne.w	405002 <_dtoa_r+0x412>
  404d1c:	9d02      	ldr	r5, [sp, #8]
  404d1e:	2d16      	cmp	r5, #22
  404d20:	f200 815d 	bhi.w	404fde <_dtoa_r+0x3ee>
  404d24:	4b61      	ldr	r3, [pc, #388]	; (404eac <_dtoa_r+0x2bc>)
  404d26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
  404d2a:	e9d3 0100 	ldrd	r0, r1, [r3]
  404d2e:	4652      	mov	r2, sl
  404d30:	465b      	mov	r3, fp
  404d32:	f002 feaf 	bl	407a94 <__aeabi_dcmpgt>
  404d36:	2800      	cmp	r0, #0
  404d38:	f000 81c5 	beq.w	4050c6 <_dtoa_r+0x4d6>
  404d3c:	1e6b      	subs	r3, r5, #1
  404d3e:	9302      	str	r3, [sp, #8]
  404d40:	2300      	movs	r3, #0
  404d42:	930e      	str	r3, [sp, #56]	; 0x38
  404d44:	1bbf      	subs	r7, r7, r6
  404d46:	1e7b      	subs	r3, r7, #1
  404d48:	9306      	str	r3, [sp, #24]
  404d4a:	f100 8154 	bmi.w	404ff6 <_dtoa_r+0x406>
  404d4e:	2300      	movs	r3, #0
  404d50:	9308      	str	r3, [sp, #32]
  404d52:	9b02      	ldr	r3, [sp, #8]
  404d54:	2b00      	cmp	r3, #0
  404d56:	f2c0 8145 	blt.w	404fe4 <_dtoa_r+0x3f4>
  404d5a:	9a06      	ldr	r2, [sp, #24]
  404d5c:	930d      	str	r3, [sp, #52]	; 0x34
  404d5e:	4611      	mov	r1, r2
  404d60:	4419      	add	r1, r3
  404d62:	2300      	movs	r3, #0
  404d64:	9106      	str	r1, [sp, #24]
  404d66:	930c      	str	r3, [sp, #48]	; 0x30
  404d68:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d6a:	2b09      	cmp	r3, #9
  404d6c:	d82a      	bhi.n	404dc4 <_dtoa_r+0x1d4>
  404d6e:	2b05      	cmp	r3, #5
  404d70:	f340 865b 	ble.w	405a2a <_dtoa_r+0xe3a>
  404d74:	3b04      	subs	r3, #4
  404d76:	9324      	str	r3, [sp, #144]	; 0x90
  404d78:	2500      	movs	r5, #0
  404d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  404d7c:	3b02      	subs	r3, #2
  404d7e:	2b03      	cmp	r3, #3
  404d80:	f200 8642 	bhi.w	405a08 <_dtoa_r+0xe18>
  404d84:	e8df f013 	tbh	[pc, r3, lsl #1]
  404d88:	02c903d4 	.word	0x02c903d4
  404d8c:	046103df 	.word	0x046103df
  404d90:	9f18      	ldr	r7, [sp, #96]	; 0x60
  404d92:	9e19      	ldr	r6, [sp, #100]	; 0x64
  404d94:	443e      	add	r6, r7
  404d96:	f206 4332 	addw	r3, r6, #1074	; 0x432
  404d9a:	2b20      	cmp	r3, #32
  404d9c:	f340 818e 	ble.w	4050bc <_dtoa_r+0x4cc>
  404da0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
  404da4:	f206 4012 	addw	r0, r6, #1042	; 0x412
  404da8:	409d      	lsls	r5, r3
  404daa:	fa2a f000 	lsr.w	r0, sl, r0
  404dae:	4328      	orrs	r0, r5
  404db0:	f002 fb6a 	bl	407488 <__aeabi_ui2d>
  404db4:	2301      	movs	r3, #1
  404db6:	3e01      	subs	r6, #1
  404db8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
  404dbc:	9314      	str	r3, [sp, #80]	; 0x50
  404dbe:	e781      	b.n	404cc4 <_dtoa_r+0xd4>
  404dc0:	483b      	ldr	r0, [pc, #236]	; (404eb0 <_dtoa_r+0x2c0>)
  404dc2:	e743      	b.n	404c4c <_dtoa_r+0x5c>
  404dc4:	2100      	movs	r1, #0
  404dc6:	6461      	str	r1, [r4, #68]	; 0x44
  404dc8:	4620      	mov	r0, r4
  404dca:	9125      	str	r1, [sp, #148]	; 0x94
  404dcc:	f001 fa0e 	bl	4061ec <_Balloc>
  404dd0:	f04f 33ff 	mov.w	r3, #4294967295
  404dd4:	930a      	str	r3, [sp, #40]	; 0x28
  404dd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
  404dd8:	930f      	str	r3, [sp, #60]	; 0x3c
  404dda:	2301      	movs	r3, #1
  404ddc:	9004      	str	r0, [sp, #16]
  404dde:	6420      	str	r0, [r4, #64]	; 0x40
  404de0:	9224      	str	r2, [sp, #144]	; 0x90
  404de2:	930b      	str	r3, [sp, #44]	; 0x2c
  404de4:	9b19      	ldr	r3, [sp, #100]	; 0x64
  404de6:	2b00      	cmp	r3, #0
  404de8:	f2c0 80d9 	blt.w	404f9e <_dtoa_r+0x3ae>
  404dec:	9a02      	ldr	r2, [sp, #8]
  404dee:	2a0e      	cmp	r2, #14
  404df0:	f300 80d5 	bgt.w	404f9e <_dtoa_r+0x3ae>
  404df4:	4b2d      	ldr	r3, [pc, #180]	; (404eac <_dtoa_r+0x2bc>)
  404df6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  404dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
  404dfe:	e9cd 2308 	strd	r2, r3, [sp, #32]
  404e02:	9b25      	ldr	r3, [sp, #148]	; 0x94
  404e04:	2b00      	cmp	r3, #0
  404e06:	f2c0 83ba 	blt.w	40557e <_dtoa_r+0x98e>
  404e0a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
  404e0e:	4650      	mov	r0, sl
  404e10:	462a      	mov	r2, r5
  404e12:	4633      	mov	r3, r6
  404e14:	4659      	mov	r1, fp
  404e16:	f002 fcd7 	bl	4077c8 <__aeabi_ddiv>
  404e1a:	f002 fe5b 	bl	407ad4 <__aeabi_d2iz>
  404e1e:	4680      	mov	r8, r0
  404e20:	f002 fb42 	bl	4074a8 <__aeabi_i2d>
  404e24:	462a      	mov	r2, r5
  404e26:	4633      	mov	r3, r6
  404e28:	f002 fba4 	bl	407574 <__aeabi_dmul>
  404e2c:	460b      	mov	r3, r1
  404e2e:	4602      	mov	r2, r0
  404e30:	4659      	mov	r1, fp
  404e32:	4650      	mov	r0, sl
  404e34:	f002 f9ea 	bl	40720c <__aeabi_dsub>
  404e38:	9d04      	ldr	r5, [sp, #16]
  404e3a:	f108 0330 	add.w	r3, r8, #48	; 0x30
  404e3e:	702b      	strb	r3, [r5, #0]
  404e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404e42:	2b01      	cmp	r3, #1
  404e44:	4606      	mov	r6, r0
  404e46:	460f      	mov	r7, r1
  404e48:	f105 0501 	add.w	r5, r5, #1
  404e4c:	d068      	beq.n	404f20 <_dtoa_r+0x330>
  404e4e:	2200      	movs	r2, #0
  404e50:	4b18      	ldr	r3, [pc, #96]	; (404eb4 <_dtoa_r+0x2c4>)
  404e52:	f002 fb8f 	bl	407574 <__aeabi_dmul>
  404e56:	2200      	movs	r2, #0
  404e58:	2300      	movs	r3, #0
  404e5a:	4606      	mov	r6, r0
  404e5c:	460f      	mov	r7, r1
  404e5e:	f002 fdf1 	bl	407a44 <__aeabi_dcmpeq>
  404e62:	2800      	cmp	r0, #0
  404e64:	f040 8088 	bne.w	404f78 <_dtoa_r+0x388>
  404e68:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  404e6c:	f04f 0a00 	mov.w	sl, #0
  404e70:	f8df b040 	ldr.w	fp, [pc, #64]	; 404eb4 <_dtoa_r+0x2c4>
  404e74:	940c      	str	r4, [sp, #48]	; 0x30
  404e76:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
  404e7a:	e028      	b.n	404ece <_dtoa_r+0x2de>
  404e7c:	f3af 8000 	nop.w
  404e80:	636f4361 	.word	0x636f4361
  404e84:	3fd287a7 	.word	0x3fd287a7
  404e88:	8b60c8b3 	.word	0x8b60c8b3
  404e8c:	3fc68a28 	.word	0x3fc68a28
  404e90:	509f79fb 	.word	0x509f79fb
  404e94:	3fd34413 	.word	0x3fd34413
  404e98:	7ff00000 	.word	0x7ff00000
  404e9c:	00408615 	.word	0x00408615
  404ea0:	00408638 	.word	0x00408638
  404ea4:	00408644 	.word	0x00408644
  404ea8:	3ff80000 	.word	0x3ff80000
  404eac:	00408670 	.word	0x00408670
  404eb0:	00408614 	.word	0x00408614
  404eb4:	40240000 	.word	0x40240000
  404eb8:	f002 fb5c 	bl	407574 <__aeabi_dmul>
  404ebc:	2200      	movs	r2, #0
  404ebe:	2300      	movs	r3, #0
  404ec0:	4606      	mov	r6, r0
  404ec2:	460f      	mov	r7, r1
  404ec4:	f002 fdbe 	bl	407a44 <__aeabi_dcmpeq>
  404ec8:	2800      	cmp	r0, #0
  404eca:	f040 83c1 	bne.w	405650 <_dtoa_r+0xa60>
  404ece:	4642      	mov	r2, r8
  404ed0:	464b      	mov	r3, r9
  404ed2:	4630      	mov	r0, r6
  404ed4:	4639      	mov	r1, r7
  404ed6:	f002 fc77 	bl	4077c8 <__aeabi_ddiv>
  404eda:	f002 fdfb 	bl	407ad4 <__aeabi_d2iz>
  404ede:	4604      	mov	r4, r0
  404ee0:	f002 fae2 	bl	4074a8 <__aeabi_i2d>
  404ee4:	4642      	mov	r2, r8
  404ee6:	464b      	mov	r3, r9
  404ee8:	f002 fb44 	bl	407574 <__aeabi_dmul>
  404eec:	4602      	mov	r2, r0
  404eee:	460b      	mov	r3, r1
  404ef0:	4630      	mov	r0, r6
  404ef2:	4639      	mov	r1, r7
  404ef4:	f002 f98a 	bl	40720c <__aeabi_dsub>
  404ef8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
  404efc:	9e04      	ldr	r6, [sp, #16]
  404efe:	f805 eb01 	strb.w	lr, [r5], #1
  404f02:	eba5 0e06 	sub.w	lr, r5, r6
  404f06:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  404f08:	45b6      	cmp	lr, r6
  404f0a:	e9cd 0106 	strd	r0, r1, [sp, #24]
  404f0e:	4652      	mov	r2, sl
  404f10:	465b      	mov	r3, fp
  404f12:	d1d1      	bne.n	404eb8 <_dtoa_r+0x2c8>
  404f14:	46a0      	mov	r8, r4
  404f16:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  404f1a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  404f1c:	4606      	mov	r6, r0
  404f1e:	460f      	mov	r7, r1
  404f20:	4632      	mov	r2, r6
  404f22:	463b      	mov	r3, r7
  404f24:	4630      	mov	r0, r6
  404f26:	4639      	mov	r1, r7
  404f28:	f002 f972 	bl	407210 <__adddf3>
  404f2c:	4606      	mov	r6, r0
  404f2e:	460f      	mov	r7, r1
  404f30:	4602      	mov	r2, r0
  404f32:	460b      	mov	r3, r1
  404f34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404f38:	f002 fd8e 	bl	407a58 <__aeabi_dcmplt>
  404f3c:	b948      	cbnz	r0, 404f52 <_dtoa_r+0x362>
  404f3e:	4632      	mov	r2, r6
  404f40:	463b      	mov	r3, r7
  404f42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  404f46:	f002 fd7d 	bl	407a44 <__aeabi_dcmpeq>
  404f4a:	b1a8      	cbz	r0, 404f78 <_dtoa_r+0x388>
  404f4c:	f018 0f01 	tst.w	r8, #1
  404f50:	d012      	beq.n	404f78 <_dtoa_r+0x388>
  404f52:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  404f56:	9a04      	ldr	r2, [sp, #16]
  404f58:	1e6b      	subs	r3, r5, #1
  404f5a:	e004      	b.n	404f66 <_dtoa_r+0x376>
  404f5c:	429a      	cmp	r2, r3
  404f5e:	f000 8401 	beq.w	405764 <_dtoa_r+0xb74>
  404f62:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
  404f66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
  404f6a:	f103 0501 	add.w	r5, r3, #1
  404f6e:	d0f5      	beq.n	404f5c <_dtoa_r+0x36c>
  404f70:	f108 0801 	add.w	r8, r8, #1
  404f74:	f883 8000 	strb.w	r8, [r3]
  404f78:	4649      	mov	r1, r9
  404f7a:	4620      	mov	r0, r4
  404f7c:	f001 f95c 	bl	406238 <_Bfree>
  404f80:	2200      	movs	r2, #0
  404f82:	9b02      	ldr	r3, [sp, #8]
  404f84:	702a      	strb	r2, [r5, #0]
  404f86:	9a26      	ldr	r2, [sp, #152]	; 0x98
  404f88:	3301      	adds	r3, #1
  404f8a:	6013      	str	r3, [r2, #0]
  404f8c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
  404f8e:	2b00      	cmp	r3, #0
  404f90:	f000 839e 	beq.w	4056d0 <_dtoa_r+0xae0>
  404f94:	9804      	ldr	r0, [sp, #16]
  404f96:	601d      	str	r5, [r3, #0]
  404f98:	b01b      	add	sp, #108	; 0x6c
  404f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404f9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  404fa0:	2a00      	cmp	r2, #0
  404fa2:	d03e      	beq.n	405022 <_dtoa_r+0x432>
  404fa4:	9a24      	ldr	r2, [sp, #144]	; 0x90
  404fa6:	2a01      	cmp	r2, #1
  404fa8:	f340 8311 	ble.w	4055ce <_dtoa_r+0x9de>
  404fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404fae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  404fb0:	1e5f      	subs	r7, r3, #1
  404fb2:	42ba      	cmp	r2, r7
  404fb4:	f2c0 838f 	blt.w	4056d6 <_dtoa_r+0xae6>
  404fb8:	1bd7      	subs	r7, r2, r7
  404fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404fbc:	2b00      	cmp	r3, #0
  404fbe:	f2c0 848b 	blt.w	4058d8 <_dtoa_r+0xce8>
  404fc2:	9d08      	ldr	r5, [sp, #32]
  404fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404fc6:	9a08      	ldr	r2, [sp, #32]
  404fc8:	441a      	add	r2, r3
  404fca:	9208      	str	r2, [sp, #32]
  404fcc:	9a06      	ldr	r2, [sp, #24]
  404fce:	2101      	movs	r1, #1
  404fd0:	441a      	add	r2, r3
  404fd2:	4620      	mov	r0, r4
  404fd4:	9206      	str	r2, [sp, #24]
  404fd6:	f001 f9c9 	bl	40636c <__i2b>
  404fda:	4606      	mov	r6, r0
  404fdc:	e024      	b.n	405028 <_dtoa_r+0x438>
  404fde:	2301      	movs	r3, #1
  404fe0:	930e      	str	r3, [sp, #56]	; 0x38
  404fe2:	e6af      	b.n	404d44 <_dtoa_r+0x154>
  404fe4:	9a08      	ldr	r2, [sp, #32]
  404fe6:	9b02      	ldr	r3, [sp, #8]
  404fe8:	1ad2      	subs	r2, r2, r3
  404fea:	425b      	negs	r3, r3
  404fec:	930c      	str	r3, [sp, #48]	; 0x30
  404fee:	2300      	movs	r3, #0
  404ff0:	9208      	str	r2, [sp, #32]
  404ff2:	930d      	str	r3, [sp, #52]	; 0x34
  404ff4:	e6b8      	b.n	404d68 <_dtoa_r+0x178>
  404ff6:	f1c7 0301 	rsb	r3, r7, #1
  404ffa:	9308      	str	r3, [sp, #32]
  404ffc:	2300      	movs	r3, #0
  404ffe:	9306      	str	r3, [sp, #24]
  405000:	e6a7      	b.n	404d52 <_dtoa_r+0x162>
  405002:	9d02      	ldr	r5, [sp, #8]
  405004:	4628      	mov	r0, r5
  405006:	f002 fa4f 	bl	4074a8 <__aeabi_i2d>
  40500a:	4602      	mov	r2, r0
  40500c:	460b      	mov	r3, r1
  40500e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
  405012:	f002 fd17 	bl	407a44 <__aeabi_dcmpeq>
  405016:	2800      	cmp	r0, #0
  405018:	f47f ae80 	bne.w	404d1c <_dtoa_r+0x12c>
  40501c:	1e6b      	subs	r3, r5, #1
  40501e:	9302      	str	r3, [sp, #8]
  405020:	e67c      	b.n	404d1c <_dtoa_r+0x12c>
  405022:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  405024:	9d08      	ldr	r5, [sp, #32]
  405026:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
  405028:	2d00      	cmp	r5, #0
  40502a:	dd0c      	ble.n	405046 <_dtoa_r+0x456>
  40502c:	9906      	ldr	r1, [sp, #24]
  40502e:	2900      	cmp	r1, #0
  405030:	460b      	mov	r3, r1
  405032:	dd08      	ble.n	405046 <_dtoa_r+0x456>
  405034:	42a9      	cmp	r1, r5
  405036:	9a08      	ldr	r2, [sp, #32]
  405038:	bfa8      	it	ge
  40503a:	462b      	movge	r3, r5
  40503c:	1ad2      	subs	r2, r2, r3
  40503e:	1aed      	subs	r5, r5, r3
  405040:	1acb      	subs	r3, r1, r3
  405042:	9208      	str	r2, [sp, #32]
  405044:	9306      	str	r3, [sp, #24]
  405046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405048:	b1d3      	cbz	r3, 405080 <_dtoa_r+0x490>
  40504a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40504c:	2b00      	cmp	r3, #0
  40504e:	f000 82b7 	beq.w	4055c0 <_dtoa_r+0x9d0>
  405052:	2f00      	cmp	r7, #0
  405054:	dd10      	ble.n	405078 <_dtoa_r+0x488>
  405056:	4631      	mov	r1, r6
  405058:	463a      	mov	r2, r7
  40505a:	4620      	mov	r0, r4
  40505c:	f001 fa22 	bl	4064a4 <__pow5mult>
  405060:	464a      	mov	r2, r9
  405062:	4601      	mov	r1, r0
  405064:	4606      	mov	r6, r0
  405066:	4620      	mov	r0, r4
  405068:	f001 f98a 	bl	406380 <__multiply>
  40506c:	4649      	mov	r1, r9
  40506e:	4680      	mov	r8, r0
  405070:	4620      	mov	r0, r4
  405072:	f001 f8e1 	bl	406238 <_Bfree>
  405076:	46c1      	mov	r9, r8
  405078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  40507a:	1bda      	subs	r2, r3, r7
  40507c:	f040 82a1 	bne.w	4055c2 <_dtoa_r+0x9d2>
  405080:	2101      	movs	r1, #1
  405082:	4620      	mov	r0, r4
  405084:	f001 f972 	bl	40636c <__i2b>
  405088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  40508a:	2b00      	cmp	r3, #0
  40508c:	4680      	mov	r8, r0
  40508e:	dd1c      	ble.n	4050ca <_dtoa_r+0x4da>
  405090:	4601      	mov	r1, r0
  405092:	461a      	mov	r2, r3
  405094:	4620      	mov	r0, r4
  405096:	f001 fa05 	bl	4064a4 <__pow5mult>
  40509a:	9b24      	ldr	r3, [sp, #144]	; 0x90
  40509c:	2b01      	cmp	r3, #1
  40509e:	4680      	mov	r8, r0
  4050a0:	f340 8254 	ble.w	40554c <_dtoa_r+0x95c>
  4050a4:	2300      	movs	r3, #0
  4050a6:	930c      	str	r3, [sp, #48]	; 0x30
  4050a8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  4050ac:	eb08 0383 	add.w	r3, r8, r3, lsl #2
  4050b0:	6918      	ldr	r0, [r3, #16]
  4050b2:	f001 f90b 	bl	4062cc <__hi0bits>
  4050b6:	f1c0 0020 	rsb	r0, r0, #32
  4050ba:	e010      	b.n	4050de <_dtoa_r+0x4ee>
  4050bc:	f1c3 0520 	rsb	r5, r3, #32
  4050c0:	fa0a f005 	lsl.w	r0, sl, r5
  4050c4:	e674      	b.n	404db0 <_dtoa_r+0x1c0>
  4050c6:	900e      	str	r0, [sp, #56]	; 0x38
  4050c8:	e63c      	b.n	404d44 <_dtoa_r+0x154>
  4050ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4050cc:	2b01      	cmp	r3, #1
  4050ce:	f340 8287 	ble.w	4055e0 <_dtoa_r+0x9f0>
  4050d2:	2300      	movs	r3, #0
  4050d4:	930c      	str	r3, [sp, #48]	; 0x30
  4050d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  4050d8:	2001      	movs	r0, #1
  4050da:	2b00      	cmp	r3, #0
  4050dc:	d1e4      	bne.n	4050a8 <_dtoa_r+0x4b8>
  4050de:	9a06      	ldr	r2, [sp, #24]
  4050e0:	4410      	add	r0, r2
  4050e2:	f010 001f 	ands.w	r0, r0, #31
  4050e6:	f000 80a1 	beq.w	40522c <_dtoa_r+0x63c>
  4050ea:	f1c0 0320 	rsb	r3, r0, #32
  4050ee:	2b04      	cmp	r3, #4
  4050f0:	f340 849e 	ble.w	405a30 <_dtoa_r+0xe40>
  4050f4:	9b08      	ldr	r3, [sp, #32]
  4050f6:	f1c0 001c 	rsb	r0, r0, #28
  4050fa:	4403      	add	r3, r0
  4050fc:	9308      	str	r3, [sp, #32]
  4050fe:	4613      	mov	r3, r2
  405100:	4403      	add	r3, r0
  405102:	4405      	add	r5, r0
  405104:	9306      	str	r3, [sp, #24]
  405106:	9b08      	ldr	r3, [sp, #32]
  405108:	2b00      	cmp	r3, #0
  40510a:	dd05      	ble.n	405118 <_dtoa_r+0x528>
  40510c:	4649      	mov	r1, r9
  40510e:	461a      	mov	r2, r3
  405110:	4620      	mov	r0, r4
  405112:	f001 fa17 	bl	406544 <__lshift>
  405116:	4681      	mov	r9, r0
  405118:	9b06      	ldr	r3, [sp, #24]
  40511a:	2b00      	cmp	r3, #0
  40511c:	dd05      	ble.n	40512a <_dtoa_r+0x53a>
  40511e:	4641      	mov	r1, r8
  405120:	461a      	mov	r2, r3
  405122:	4620      	mov	r0, r4
  405124:	f001 fa0e 	bl	406544 <__lshift>
  405128:	4680      	mov	r8, r0
  40512a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  40512c:	2b00      	cmp	r3, #0
  40512e:	f040 8086 	bne.w	40523e <_dtoa_r+0x64e>
  405132:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405134:	2b00      	cmp	r3, #0
  405136:	f340 8266 	ble.w	405606 <_dtoa_r+0xa16>
  40513a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40513c:	2b00      	cmp	r3, #0
  40513e:	f000 8098 	beq.w	405272 <_dtoa_r+0x682>
  405142:	2d00      	cmp	r5, #0
  405144:	dd05      	ble.n	405152 <_dtoa_r+0x562>
  405146:	4631      	mov	r1, r6
  405148:	462a      	mov	r2, r5
  40514a:	4620      	mov	r0, r4
  40514c:	f001 f9fa 	bl	406544 <__lshift>
  405150:	4606      	mov	r6, r0
  405152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  405154:	2b00      	cmp	r3, #0
  405156:	f040 8337 	bne.w	4057c8 <_dtoa_r+0xbd8>
  40515a:	9606      	str	r6, [sp, #24]
  40515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40515e:	9a04      	ldr	r2, [sp, #16]
  405160:	f8dd b018 	ldr.w	fp, [sp, #24]
  405164:	3b01      	subs	r3, #1
  405166:	18d3      	adds	r3, r2, r3
  405168:	930b      	str	r3, [sp, #44]	; 0x2c
  40516a:	f00a 0301 	and.w	r3, sl, #1
  40516e:	930c      	str	r3, [sp, #48]	; 0x30
  405170:	4617      	mov	r7, r2
  405172:	46c2      	mov	sl, r8
  405174:	4651      	mov	r1, sl
  405176:	4648      	mov	r0, r9
  405178:	f7ff fca4 	bl	404ac4 <quorem>
  40517c:	4631      	mov	r1, r6
  40517e:	4605      	mov	r5, r0
  405180:	4648      	mov	r0, r9
  405182:	f001 fa31 	bl	4065e8 <__mcmp>
  405186:	465a      	mov	r2, fp
  405188:	900a      	str	r0, [sp, #40]	; 0x28
  40518a:	4651      	mov	r1, sl
  40518c:	4620      	mov	r0, r4
  40518e:	f001 fa47 	bl	406620 <__mdiff>
  405192:	68c2      	ldr	r2, [r0, #12]
  405194:	4680      	mov	r8, r0
  405196:	f105 0330 	add.w	r3, r5, #48	; 0x30
  40519a:	2a00      	cmp	r2, #0
  40519c:	f040 822b 	bne.w	4055f6 <_dtoa_r+0xa06>
  4051a0:	4601      	mov	r1, r0
  4051a2:	4648      	mov	r0, r9
  4051a4:	9308      	str	r3, [sp, #32]
  4051a6:	f001 fa1f 	bl	4065e8 <__mcmp>
  4051aa:	4641      	mov	r1, r8
  4051ac:	9006      	str	r0, [sp, #24]
  4051ae:	4620      	mov	r0, r4
  4051b0:	f001 f842 	bl	406238 <_Bfree>
  4051b4:	9a06      	ldr	r2, [sp, #24]
  4051b6:	9b08      	ldr	r3, [sp, #32]
  4051b8:	b932      	cbnz	r2, 4051c8 <_dtoa_r+0x5d8>
  4051ba:	9924      	ldr	r1, [sp, #144]	; 0x90
  4051bc:	b921      	cbnz	r1, 4051c8 <_dtoa_r+0x5d8>
  4051be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4051c0:	2a00      	cmp	r2, #0
  4051c2:	f000 83ef 	beq.w	4059a4 <_dtoa_r+0xdb4>
  4051c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
  4051c8:	990a      	ldr	r1, [sp, #40]	; 0x28
  4051ca:	2900      	cmp	r1, #0
  4051cc:	f2c0 829f 	blt.w	40570e <_dtoa_r+0xb1e>
  4051d0:	d105      	bne.n	4051de <_dtoa_r+0x5ee>
  4051d2:	9924      	ldr	r1, [sp, #144]	; 0x90
  4051d4:	b919      	cbnz	r1, 4051de <_dtoa_r+0x5ee>
  4051d6:	990c      	ldr	r1, [sp, #48]	; 0x30
  4051d8:	2900      	cmp	r1, #0
  4051da:	f000 8298 	beq.w	40570e <_dtoa_r+0xb1e>
  4051de:	2a00      	cmp	r2, #0
  4051e0:	f300 8306 	bgt.w	4057f0 <_dtoa_r+0xc00>
  4051e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  4051e6:	703b      	strb	r3, [r7, #0]
  4051e8:	f107 0801 	add.w	r8, r7, #1
  4051ec:	4297      	cmp	r7, r2
  4051ee:	4645      	mov	r5, r8
  4051f0:	f000 830c 	beq.w	40580c <_dtoa_r+0xc1c>
  4051f4:	4649      	mov	r1, r9
  4051f6:	2300      	movs	r3, #0
  4051f8:	220a      	movs	r2, #10
  4051fa:	4620      	mov	r0, r4
  4051fc:	f001 f826 	bl	40624c <__multadd>
  405200:	455e      	cmp	r6, fp
  405202:	4681      	mov	r9, r0
  405204:	4631      	mov	r1, r6
  405206:	f04f 0300 	mov.w	r3, #0
  40520a:	f04f 020a 	mov.w	r2, #10
  40520e:	4620      	mov	r0, r4
  405210:	f000 81eb 	beq.w	4055ea <_dtoa_r+0x9fa>
  405214:	f001 f81a 	bl	40624c <__multadd>
  405218:	4659      	mov	r1, fp
  40521a:	4606      	mov	r6, r0
  40521c:	2300      	movs	r3, #0
  40521e:	220a      	movs	r2, #10
  405220:	4620      	mov	r0, r4
  405222:	f001 f813 	bl	40624c <__multadd>
  405226:	4647      	mov	r7, r8
  405228:	4683      	mov	fp, r0
  40522a:	e7a3      	b.n	405174 <_dtoa_r+0x584>
  40522c:	201c      	movs	r0, #28
  40522e:	9b08      	ldr	r3, [sp, #32]
  405230:	4403      	add	r3, r0
  405232:	9308      	str	r3, [sp, #32]
  405234:	9b06      	ldr	r3, [sp, #24]
  405236:	4403      	add	r3, r0
  405238:	4405      	add	r5, r0
  40523a:	9306      	str	r3, [sp, #24]
  40523c:	e763      	b.n	405106 <_dtoa_r+0x516>
  40523e:	4641      	mov	r1, r8
  405240:	4648      	mov	r0, r9
  405242:	f001 f9d1 	bl	4065e8 <__mcmp>
  405246:	2800      	cmp	r0, #0
  405248:	f6bf af73 	bge.w	405132 <_dtoa_r+0x542>
  40524c:	9f02      	ldr	r7, [sp, #8]
  40524e:	4649      	mov	r1, r9
  405250:	2300      	movs	r3, #0
  405252:	220a      	movs	r2, #10
  405254:	4620      	mov	r0, r4
  405256:	3f01      	subs	r7, #1
  405258:	9702      	str	r7, [sp, #8]
  40525a:	f000 fff7 	bl	40624c <__multadd>
  40525e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  405260:	4681      	mov	r9, r0
  405262:	2b00      	cmp	r3, #0
  405264:	f040 83b6 	bne.w	4059d4 <_dtoa_r+0xde4>
  405268:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  40526a:	2b00      	cmp	r3, #0
  40526c:	f340 83bf 	ble.w	4059ee <_dtoa_r+0xdfe>
  405270:	930a      	str	r3, [sp, #40]	; 0x28
  405272:	f8dd b010 	ldr.w	fp, [sp, #16]
  405276:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  405278:	465d      	mov	r5, fp
  40527a:	e002      	b.n	405282 <_dtoa_r+0x692>
  40527c:	f000 ffe6 	bl	40624c <__multadd>
  405280:	4681      	mov	r9, r0
  405282:	4641      	mov	r1, r8
  405284:	4648      	mov	r0, r9
  405286:	f7ff fc1d 	bl	404ac4 <quorem>
  40528a:	f100 0a30 	add.w	sl, r0, #48	; 0x30
  40528e:	f805 ab01 	strb.w	sl, [r5], #1
  405292:	eba5 030b 	sub.w	r3, r5, fp
  405296:	42bb      	cmp	r3, r7
  405298:	f04f 020a 	mov.w	r2, #10
  40529c:	f04f 0300 	mov.w	r3, #0
  4052a0:	4649      	mov	r1, r9
  4052a2:	4620      	mov	r0, r4
  4052a4:	dbea      	blt.n	40527c <_dtoa_r+0x68c>
  4052a6:	9b04      	ldr	r3, [sp, #16]
  4052a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4052aa:	2a01      	cmp	r2, #1
  4052ac:	bfac      	ite	ge
  4052ae:	189b      	addge	r3, r3, r2
  4052b0:	3301      	addlt	r3, #1
  4052b2:	461d      	mov	r5, r3
  4052b4:	f04f 0b00 	mov.w	fp, #0
  4052b8:	4649      	mov	r1, r9
  4052ba:	2201      	movs	r2, #1
  4052bc:	4620      	mov	r0, r4
  4052be:	f001 f941 	bl	406544 <__lshift>
  4052c2:	4641      	mov	r1, r8
  4052c4:	4681      	mov	r9, r0
  4052c6:	f001 f98f 	bl	4065e8 <__mcmp>
  4052ca:	2800      	cmp	r0, #0
  4052cc:	f340 823d 	ble.w	40574a <_dtoa_r+0xb5a>
  4052d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
  4052d4:	9904      	ldr	r1, [sp, #16]
  4052d6:	1e6b      	subs	r3, r5, #1
  4052d8:	e004      	b.n	4052e4 <_dtoa_r+0x6f4>
  4052da:	428b      	cmp	r3, r1
  4052dc:	f000 81ae 	beq.w	40563c <_dtoa_r+0xa4c>
  4052e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
  4052e4:	2a39      	cmp	r2, #57	; 0x39
  4052e6:	f103 0501 	add.w	r5, r3, #1
  4052ea:	d0f6      	beq.n	4052da <_dtoa_r+0x6ea>
  4052ec:	3201      	adds	r2, #1
  4052ee:	701a      	strb	r2, [r3, #0]
  4052f0:	4641      	mov	r1, r8
  4052f2:	4620      	mov	r0, r4
  4052f4:	f000 ffa0 	bl	406238 <_Bfree>
  4052f8:	2e00      	cmp	r6, #0
  4052fa:	f43f ae3d 	beq.w	404f78 <_dtoa_r+0x388>
  4052fe:	f1bb 0f00 	cmp.w	fp, #0
  405302:	d005      	beq.n	405310 <_dtoa_r+0x720>
  405304:	45b3      	cmp	fp, r6
  405306:	d003      	beq.n	405310 <_dtoa_r+0x720>
  405308:	4659      	mov	r1, fp
  40530a:	4620      	mov	r0, r4
  40530c:	f000 ff94 	bl	406238 <_Bfree>
  405310:	4631      	mov	r1, r6
  405312:	4620      	mov	r0, r4
  405314:	f000 ff90 	bl	406238 <_Bfree>
  405318:	e62e      	b.n	404f78 <_dtoa_r+0x388>
  40531a:	2300      	movs	r3, #0
  40531c:	930b      	str	r3, [sp, #44]	; 0x2c
  40531e:	9b02      	ldr	r3, [sp, #8]
  405320:	9a25      	ldr	r2, [sp, #148]	; 0x94
  405322:	4413      	add	r3, r2
  405324:	930f      	str	r3, [sp, #60]	; 0x3c
  405326:	3301      	adds	r3, #1
  405328:	2b01      	cmp	r3, #1
  40532a:	461f      	mov	r7, r3
  40532c:	461e      	mov	r6, r3
  40532e:	930a      	str	r3, [sp, #40]	; 0x28
  405330:	bfb8      	it	lt
  405332:	2701      	movlt	r7, #1
  405334:	2100      	movs	r1, #0
  405336:	2f17      	cmp	r7, #23
  405338:	6461      	str	r1, [r4, #68]	; 0x44
  40533a:	d90a      	bls.n	405352 <_dtoa_r+0x762>
  40533c:	2201      	movs	r2, #1
  40533e:	2304      	movs	r3, #4
  405340:	005b      	lsls	r3, r3, #1
  405342:	f103 0014 	add.w	r0, r3, #20
  405346:	4287      	cmp	r7, r0
  405348:	4611      	mov	r1, r2
  40534a:	f102 0201 	add.w	r2, r2, #1
  40534e:	d2f7      	bcs.n	405340 <_dtoa_r+0x750>
  405350:	6461      	str	r1, [r4, #68]	; 0x44
  405352:	4620      	mov	r0, r4
  405354:	f000 ff4a 	bl	4061ec <_Balloc>
  405358:	2e0e      	cmp	r6, #14
  40535a:	9004      	str	r0, [sp, #16]
  40535c:	6420      	str	r0, [r4, #64]	; 0x40
  40535e:	f63f ad41 	bhi.w	404de4 <_dtoa_r+0x1f4>
  405362:	2d00      	cmp	r5, #0
  405364:	f43f ad3e 	beq.w	404de4 <_dtoa_r+0x1f4>
  405368:	9902      	ldr	r1, [sp, #8]
  40536a:	2900      	cmp	r1, #0
  40536c:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
  405370:	f340 8202 	ble.w	405778 <_dtoa_r+0xb88>
  405374:	4bb8      	ldr	r3, [pc, #736]	; (405658 <_dtoa_r+0xa68>)
  405376:	f001 020f 	and.w	r2, r1, #15
  40537a:	110d      	asrs	r5, r1, #4
  40537c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  405380:	06e9      	lsls	r1, r5, #27
  405382:	e9d3 6700 	ldrd	r6, r7, [r3]
  405386:	f140 81ae 	bpl.w	4056e6 <_dtoa_r+0xaf6>
  40538a:	4bb4      	ldr	r3, [pc, #720]	; (40565c <_dtoa_r+0xa6c>)
  40538c:	4650      	mov	r0, sl
  40538e:	4659      	mov	r1, fp
  405390:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
  405394:	f002 fa18 	bl	4077c8 <__aeabi_ddiv>
  405398:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
  40539c:	f005 050f 	and.w	r5, r5, #15
  4053a0:	f04f 0a03 	mov.w	sl, #3
  4053a4:	b18d      	cbz	r5, 4053ca <_dtoa_r+0x7da>
  4053a6:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 40565c <_dtoa_r+0xa6c>
  4053aa:	07ea      	lsls	r2, r5, #31
  4053ac:	d509      	bpl.n	4053c2 <_dtoa_r+0x7d2>
  4053ae:	4630      	mov	r0, r6
  4053b0:	4639      	mov	r1, r7
  4053b2:	e9d8 2300 	ldrd	r2, r3, [r8]
  4053b6:	f002 f8dd 	bl	407574 <__aeabi_dmul>
  4053ba:	f10a 0a01 	add.w	sl, sl, #1
  4053be:	4606      	mov	r6, r0
  4053c0:	460f      	mov	r7, r1
  4053c2:	106d      	asrs	r5, r5, #1
  4053c4:	f108 0808 	add.w	r8, r8, #8
  4053c8:	d1ef      	bne.n	4053aa <_dtoa_r+0x7ba>
  4053ca:	463b      	mov	r3, r7
  4053cc:	4632      	mov	r2, r6
  4053ce:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
  4053d2:	f002 f9f9 	bl	4077c8 <__aeabi_ddiv>
  4053d6:	4607      	mov	r7, r0
  4053d8:	4688      	mov	r8, r1
  4053da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  4053dc:	b143      	cbz	r3, 4053f0 <_dtoa_r+0x800>
  4053de:	2200      	movs	r2, #0
  4053e0:	4b9f      	ldr	r3, [pc, #636]	; (405660 <_dtoa_r+0xa70>)
  4053e2:	4638      	mov	r0, r7
  4053e4:	4641      	mov	r1, r8
  4053e6:	f002 fb37 	bl	407a58 <__aeabi_dcmplt>
  4053ea:	2800      	cmp	r0, #0
  4053ec:	f040 8286 	bne.w	4058fc <_dtoa_r+0xd0c>
  4053f0:	4650      	mov	r0, sl
  4053f2:	f002 f859 	bl	4074a8 <__aeabi_i2d>
  4053f6:	463a      	mov	r2, r7
  4053f8:	4643      	mov	r3, r8
  4053fa:	f002 f8bb 	bl	407574 <__aeabi_dmul>
  4053fe:	4b99      	ldr	r3, [pc, #612]	; (405664 <_dtoa_r+0xa74>)
  405400:	2200      	movs	r2, #0
  405402:	f001 ff05 	bl	407210 <__adddf3>
  405406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405408:	4605      	mov	r5, r0
  40540a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  40540e:	2b00      	cmp	r3, #0
  405410:	f000 813e 	beq.w	405690 <_dtoa_r+0xaa0>
  405414:	9b02      	ldr	r3, [sp, #8]
  405416:	9315      	str	r3, [sp, #84]	; 0x54
  405418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  40541a:	9312      	str	r3, [sp, #72]	; 0x48
  40541c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  40541e:	2b00      	cmp	r3, #0
  405420:	f000 81fa 	beq.w	405818 <_dtoa_r+0xc28>
  405424:	9a12      	ldr	r2, [sp, #72]	; 0x48
  405426:	4b8c      	ldr	r3, [pc, #560]	; (405658 <_dtoa_r+0xa68>)
  405428:	498f      	ldr	r1, [pc, #572]	; (405668 <_dtoa_r+0xa78>)
  40542a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40542e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
  405432:	2000      	movs	r0, #0
  405434:	f002 f9c8 	bl	4077c8 <__aeabi_ddiv>
  405438:	462a      	mov	r2, r5
  40543a:	4633      	mov	r3, r6
  40543c:	f001 fee6 	bl	40720c <__aeabi_dsub>
  405440:	4682      	mov	sl, r0
  405442:	468b      	mov	fp, r1
  405444:	4638      	mov	r0, r7
  405446:	4641      	mov	r1, r8
  405448:	f002 fb44 	bl	407ad4 <__aeabi_d2iz>
  40544c:	4605      	mov	r5, r0
  40544e:	f002 f82b 	bl	4074a8 <__aeabi_i2d>
  405452:	4602      	mov	r2, r0
  405454:	460b      	mov	r3, r1
  405456:	4638      	mov	r0, r7
  405458:	4641      	mov	r1, r8
  40545a:	f001 fed7 	bl	40720c <__aeabi_dsub>
  40545e:	3530      	adds	r5, #48	; 0x30
  405460:	fa5f f885 	uxtb.w	r8, r5
  405464:	9d04      	ldr	r5, [sp, #16]
  405466:	4606      	mov	r6, r0
  405468:	460f      	mov	r7, r1
  40546a:	f885 8000 	strb.w	r8, [r5]
  40546e:	4602      	mov	r2, r0
  405470:	460b      	mov	r3, r1
  405472:	4650      	mov	r0, sl
  405474:	4659      	mov	r1, fp
  405476:	3501      	adds	r5, #1
  405478:	f002 fb0c 	bl	407a94 <__aeabi_dcmpgt>
  40547c:	2800      	cmp	r0, #0
  40547e:	d154      	bne.n	40552a <_dtoa_r+0x93a>
  405480:	4632      	mov	r2, r6
  405482:	463b      	mov	r3, r7
  405484:	2000      	movs	r0, #0
  405486:	4976      	ldr	r1, [pc, #472]	; (405660 <_dtoa_r+0xa70>)
  405488:	f001 fec0 	bl	40720c <__aeabi_dsub>
  40548c:	4602      	mov	r2, r0
  40548e:	460b      	mov	r3, r1
  405490:	4650      	mov	r0, sl
  405492:	4659      	mov	r1, fp
  405494:	f002 fafe 	bl	407a94 <__aeabi_dcmpgt>
  405498:	2800      	cmp	r0, #0
  40549a:	f040 8270 	bne.w	40597e <_dtoa_r+0xd8e>
  40549e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  4054a0:	2a01      	cmp	r2, #1
  4054a2:	f000 8111 	beq.w	4056c8 <_dtoa_r+0xad8>
  4054a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
  4054a8:	9a04      	ldr	r2, [sp, #16]
  4054aa:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  4054ae:	4413      	add	r3, r2
  4054b0:	4699      	mov	r9, r3
  4054b2:	e00d      	b.n	4054d0 <_dtoa_r+0x8e0>
  4054b4:	2000      	movs	r0, #0
  4054b6:	496a      	ldr	r1, [pc, #424]	; (405660 <_dtoa_r+0xa70>)
  4054b8:	f001 fea8 	bl	40720c <__aeabi_dsub>
  4054bc:	4652      	mov	r2, sl
  4054be:	465b      	mov	r3, fp
  4054c0:	f002 faca 	bl	407a58 <__aeabi_dcmplt>
  4054c4:	2800      	cmp	r0, #0
  4054c6:	f040 8258 	bne.w	40597a <_dtoa_r+0xd8a>
  4054ca:	454d      	cmp	r5, r9
  4054cc:	f000 80fa 	beq.w	4056c4 <_dtoa_r+0xad4>
  4054d0:	4650      	mov	r0, sl
  4054d2:	4659      	mov	r1, fp
  4054d4:	2200      	movs	r2, #0
  4054d6:	4b65      	ldr	r3, [pc, #404]	; (40566c <_dtoa_r+0xa7c>)
  4054d8:	f002 f84c 	bl	407574 <__aeabi_dmul>
  4054dc:	2200      	movs	r2, #0
  4054de:	4b63      	ldr	r3, [pc, #396]	; (40566c <_dtoa_r+0xa7c>)
  4054e0:	4682      	mov	sl, r0
  4054e2:	468b      	mov	fp, r1
  4054e4:	4630      	mov	r0, r6
  4054e6:	4639      	mov	r1, r7
  4054e8:	f002 f844 	bl	407574 <__aeabi_dmul>
  4054ec:	460f      	mov	r7, r1
  4054ee:	4606      	mov	r6, r0
  4054f0:	f002 faf0 	bl	407ad4 <__aeabi_d2iz>
  4054f4:	4680      	mov	r8, r0
  4054f6:	f001 ffd7 	bl	4074a8 <__aeabi_i2d>
  4054fa:	4602      	mov	r2, r0
  4054fc:	460b      	mov	r3, r1
  4054fe:	4630      	mov	r0, r6
  405500:	4639      	mov	r1, r7
  405502:	f001 fe83 	bl	40720c <__aeabi_dsub>
  405506:	f108 0830 	add.w	r8, r8, #48	; 0x30
  40550a:	fa5f f888 	uxtb.w	r8, r8
  40550e:	4652      	mov	r2, sl
  405510:	465b      	mov	r3, fp
  405512:	f805 8b01 	strb.w	r8, [r5], #1
  405516:	4606      	mov	r6, r0
  405518:	460f      	mov	r7, r1
  40551a:	f002 fa9d 	bl	407a58 <__aeabi_dcmplt>
  40551e:	4632      	mov	r2, r6
  405520:	463b      	mov	r3, r7
  405522:	2800      	cmp	r0, #0
  405524:	d0c6      	beq.n	4054b4 <_dtoa_r+0x8c4>
  405526:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40552a:	9b15      	ldr	r3, [sp, #84]	; 0x54
  40552c:	9302      	str	r3, [sp, #8]
  40552e:	e523      	b.n	404f78 <_dtoa_r+0x388>
  405530:	2300      	movs	r3, #0
  405532:	930b      	str	r3, [sp, #44]	; 0x2c
  405534:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405536:	2b00      	cmp	r3, #0
  405538:	f340 80dc 	ble.w	4056f4 <_dtoa_r+0xb04>
  40553c:	461f      	mov	r7, r3
  40553e:	461e      	mov	r6, r3
  405540:	930f      	str	r3, [sp, #60]	; 0x3c
  405542:	930a      	str	r3, [sp, #40]	; 0x28
  405544:	e6f6      	b.n	405334 <_dtoa_r+0x744>
  405546:	2301      	movs	r3, #1
  405548:	930b      	str	r3, [sp, #44]	; 0x2c
  40554a:	e7f3      	b.n	405534 <_dtoa_r+0x944>
  40554c:	f1ba 0f00 	cmp.w	sl, #0
  405550:	f47f ada8 	bne.w	4050a4 <_dtoa_r+0x4b4>
  405554:	f3cb 0313 	ubfx	r3, fp, #0, #20
  405558:	2b00      	cmp	r3, #0
  40555a:	f47f adba 	bne.w	4050d2 <_dtoa_r+0x4e2>
  40555e:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
  405562:	0d3f      	lsrs	r7, r7, #20
  405564:	053f      	lsls	r7, r7, #20
  405566:	2f00      	cmp	r7, #0
  405568:	f000 820d 	beq.w	405986 <_dtoa_r+0xd96>
  40556c:	9b08      	ldr	r3, [sp, #32]
  40556e:	3301      	adds	r3, #1
  405570:	9308      	str	r3, [sp, #32]
  405572:	9b06      	ldr	r3, [sp, #24]
  405574:	3301      	adds	r3, #1
  405576:	9306      	str	r3, [sp, #24]
  405578:	2301      	movs	r3, #1
  40557a:	930c      	str	r3, [sp, #48]	; 0x30
  40557c:	e5ab      	b.n	4050d6 <_dtoa_r+0x4e6>
  40557e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405580:	2b00      	cmp	r3, #0
  405582:	f73f ac42 	bgt.w	404e0a <_dtoa_r+0x21a>
  405586:	f040 8221 	bne.w	4059cc <_dtoa_r+0xddc>
  40558a:	2200      	movs	r2, #0
  40558c:	4b38      	ldr	r3, [pc, #224]	; (405670 <_dtoa_r+0xa80>)
  40558e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
  405592:	f001 ffef 	bl	407574 <__aeabi_dmul>
  405596:	4652      	mov	r2, sl
  405598:	465b      	mov	r3, fp
  40559a:	f002 fa71 	bl	407a80 <__aeabi_dcmpge>
  40559e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  4055a2:	4646      	mov	r6, r8
  4055a4:	2800      	cmp	r0, #0
  4055a6:	d041      	beq.n	40562c <_dtoa_r+0xa3c>
  4055a8:	9b25      	ldr	r3, [sp, #148]	; 0x94
  4055aa:	9d04      	ldr	r5, [sp, #16]
  4055ac:	43db      	mvns	r3, r3
  4055ae:	9302      	str	r3, [sp, #8]
  4055b0:	4641      	mov	r1, r8
  4055b2:	4620      	mov	r0, r4
  4055b4:	f000 fe40 	bl	406238 <_Bfree>
  4055b8:	2e00      	cmp	r6, #0
  4055ba:	f43f acdd 	beq.w	404f78 <_dtoa_r+0x388>
  4055be:	e6a7      	b.n	405310 <_dtoa_r+0x720>
  4055c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  4055c2:	4649      	mov	r1, r9
  4055c4:	4620      	mov	r0, r4
  4055c6:	f000 ff6d 	bl	4064a4 <__pow5mult>
  4055ca:	4681      	mov	r9, r0
  4055cc:	e558      	b.n	405080 <_dtoa_r+0x490>
  4055ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
  4055d0:	2a00      	cmp	r2, #0
  4055d2:	f000 8187 	beq.w	4058e4 <_dtoa_r+0xcf4>
  4055d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
  4055da:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4055dc:	9d08      	ldr	r5, [sp, #32]
  4055de:	e4f2      	b.n	404fc6 <_dtoa_r+0x3d6>
  4055e0:	f1ba 0f00 	cmp.w	sl, #0
  4055e4:	f47f ad75 	bne.w	4050d2 <_dtoa_r+0x4e2>
  4055e8:	e7b4      	b.n	405554 <_dtoa_r+0x964>
  4055ea:	f000 fe2f 	bl	40624c <__multadd>
  4055ee:	4647      	mov	r7, r8
  4055f0:	4606      	mov	r6, r0
  4055f2:	4683      	mov	fp, r0
  4055f4:	e5be      	b.n	405174 <_dtoa_r+0x584>
  4055f6:	4601      	mov	r1, r0
  4055f8:	4620      	mov	r0, r4
  4055fa:	9306      	str	r3, [sp, #24]
  4055fc:	f000 fe1c 	bl	406238 <_Bfree>
  405600:	2201      	movs	r2, #1
  405602:	9b06      	ldr	r3, [sp, #24]
  405604:	e5e0      	b.n	4051c8 <_dtoa_r+0x5d8>
  405606:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405608:	2b02      	cmp	r3, #2
  40560a:	f77f ad96 	ble.w	40513a <_dtoa_r+0x54a>
  40560e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405610:	2b00      	cmp	r3, #0
  405612:	d1c9      	bne.n	4055a8 <_dtoa_r+0x9b8>
  405614:	4641      	mov	r1, r8
  405616:	2205      	movs	r2, #5
  405618:	4620      	mov	r0, r4
  40561a:	f000 fe17 	bl	40624c <__multadd>
  40561e:	4601      	mov	r1, r0
  405620:	4680      	mov	r8, r0
  405622:	4648      	mov	r0, r9
  405624:	f000 ffe0 	bl	4065e8 <__mcmp>
  405628:	2800      	cmp	r0, #0
  40562a:	ddbd      	ble.n	4055a8 <_dtoa_r+0x9b8>
  40562c:	9a02      	ldr	r2, [sp, #8]
  40562e:	9904      	ldr	r1, [sp, #16]
  405630:	2331      	movs	r3, #49	; 0x31
  405632:	3201      	adds	r2, #1
  405634:	9202      	str	r2, [sp, #8]
  405636:	700b      	strb	r3, [r1, #0]
  405638:	1c4d      	adds	r5, r1, #1
  40563a:	e7b9      	b.n	4055b0 <_dtoa_r+0x9c0>
  40563c:	9a02      	ldr	r2, [sp, #8]
  40563e:	3201      	adds	r2, #1
  405640:	9202      	str	r2, [sp, #8]
  405642:	9a04      	ldr	r2, [sp, #16]
  405644:	2331      	movs	r3, #49	; 0x31
  405646:	7013      	strb	r3, [r2, #0]
  405648:	e652      	b.n	4052f0 <_dtoa_r+0x700>
  40564a:	2301      	movs	r3, #1
  40564c:	930b      	str	r3, [sp, #44]	; 0x2c
  40564e:	e666      	b.n	40531e <_dtoa_r+0x72e>
  405650:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  405654:	9c0c      	ldr	r4, [sp, #48]	; 0x30
  405656:	e48f      	b.n	404f78 <_dtoa_r+0x388>
  405658:	00408670 	.word	0x00408670
  40565c:	00408648 	.word	0x00408648
  405660:	3ff00000 	.word	0x3ff00000
  405664:	401c0000 	.word	0x401c0000
  405668:	3fe00000 	.word	0x3fe00000
  40566c:	40240000 	.word	0x40240000
  405670:	40140000 	.word	0x40140000
  405674:	4650      	mov	r0, sl
  405676:	f001 ff17 	bl	4074a8 <__aeabi_i2d>
  40567a:	463a      	mov	r2, r7
  40567c:	4643      	mov	r3, r8
  40567e:	f001 ff79 	bl	407574 <__aeabi_dmul>
  405682:	2200      	movs	r2, #0
  405684:	4bc1      	ldr	r3, [pc, #772]	; (40598c <_dtoa_r+0xd9c>)
  405686:	f001 fdc3 	bl	407210 <__adddf3>
  40568a:	4605      	mov	r5, r0
  40568c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405690:	4641      	mov	r1, r8
  405692:	2200      	movs	r2, #0
  405694:	4bbe      	ldr	r3, [pc, #760]	; (405990 <_dtoa_r+0xda0>)
  405696:	4638      	mov	r0, r7
  405698:	f001 fdb8 	bl	40720c <__aeabi_dsub>
  40569c:	462a      	mov	r2, r5
  40569e:	4633      	mov	r3, r6
  4056a0:	4682      	mov	sl, r0
  4056a2:	468b      	mov	fp, r1
  4056a4:	f002 f9f6 	bl	407a94 <__aeabi_dcmpgt>
  4056a8:	4680      	mov	r8, r0
  4056aa:	2800      	cmp	r0, #0
  4056ac:	f040 8110 	bne.w	4058d0 <_dtoa_r+0xce0>
  4056b0:	462a      	mov	r2, r5
  4056b2:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
  4056b6:	4650      	mov	r0, sl
  4056b8:	4659      	mov	r1, fp
  4056ba:	f002 f9cd 	bl	407a58 <__aeabi_dcmplt>
  4056be:	b118      	cbz	r0, 4056c8 <_dtoa_r+0xad8>
  4056c0:	4646      	mov	r6, r8
  4056c2:	e771      	b.n	4055a8 <_dtoa_r+0x9b8>
  4056c4:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4056c8:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
  4056cc:	f7ff bb8a 	b.w	404de4 <_dtoa_r+0x1f4>
  4056d0:	9804      	ldr	r0, [sp, #16]
  4056d2:	f7ff babb 	b.w	404c4c <_dtoa_r+0x5c>
  4056d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  4056d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  4056da:	970c      	str	r7, [sp, #48]	; 0x30
  4056dc:	1afb      	subs	r3, r7, r3
  4056de:	441a      	add	r2, r3
  4056e0:	920d      	str	r2, [sp, #52]	; 0x34
  4056e2:	2700      	movs	r7, #0
  4056e4:	e469      	b.n	404fba <_dtoa_r+0x3ca>
  4056e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
  4056ea:	f04f 0a02 	mov.w	sl, #2
  4056ee:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  4056f2:	e657      	b.n	4053a4 <_dtoa_r+0x7b4>
  4056f4:	2100      	movs	r1, #0
  4056f6:	2301      	movs	r3, #1
  4056f8:	6461      	str	r1, [r4, #68]	; 0x44
  4056fa:	4620      	mov	r0, r4
  4056fc:	9325      	str	r3, [sp, #148]	; 0x94
  4056fe:	f000 fd75 	bl	4061ec <_Balloc>
  405702:	9b25      	ldr	r3, [sp, #148]	; 0x94
  405704:	9004      	str	r0, [sp, #16]
  405706:	6420      	str	r0, [r4, #64]	; 0x40
  405708:	930a      	str	r3, [sp, #40]	; 0x28
  40570a:	930f      	str	r3, [sp, #60]	; 0x3c
  40570c:	e629      	b.n	405362 <_dtoa_r+0x772>
  40570e:	2a00      	cmp	r2, #0
  405710:	46d0      	mov	r8, sl
  405712:	f8cd b018 	str.w	fp, [sp, #24]
  405716:	469a      	mov	sl, r3
  405718:	dd11      	ble.n	40573e <_dtoa_r+0xb4e>
  40571a:	4649      	mov	r1, r9
  40571c:	2201      	movs	r2, #1
  40571e:	4620      	mov	r0, r4
  405720:	f000 ff10 	bl	406544 <__lshift>
  405724:	4641      	mov	r1, r8
  405726:	4681      	mov	r9, r0
  405728:	f000 ff5e 	bl	4065e8 <__mcmp>
  40572c:	2800      	cmp	r0, #0
  40572e:	f340 8146 	ble.w	4059be <_dtoa_r+0xdce>
  405732:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
  405736:	f000 8106 	beq.w	405946 <_dtoa_r+0xd56>
  40573a:	f105 0a31 	add.w	sl, r5, #49	; 0x31
  40573e:	46b3      	mov	fp, r6
  405740:	f887 a000 	strb.w	sl, [r7]
  405744:	1c7d      	adds	r5, r7, #1
  405746:	9e06      	ldr	r6, [sp, #24]
  405748:	e5d2      	b.n	4052f0 <_dtoa_r+0x700>
  40574a:	d104      	bne.n	405756 <_dtoa_r+0xb66>
  40574c:	f01a 0f01 	tst.w	sl, #1
  405750:	d001      	beq.n	405756 <_dtoa_r+0xb66>
  405752:	e5bd      	b.n	4052d0 <_dtoa_r+0x6e0>
  405754:	4615      	mov	r5, r2
  405756:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  40575a:	2b30      	cmp	r3, #48	; 0x30
  40575c:	f105 32ff 	add.w	r2, r5, #4294967295
  405760:	d0f8      	beq.n	405754 <_dtoa_r+0xb64>
  405762:	e5c5      	b.n	4052f0 <_dtoa_r+0x700>
  405764:	9904      	ldr	r1, [sp, #16]
  405766:	2230      	movs	r2, #48	; 0x30
  405768:	700a      	strb	r2, [r1, #0]
  40576a:	9a02      	ldr	r2, [sp, #8]
  40576c:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  405770:	3201      	adds	r2, #1
  405772:	9202      	str	r2, [sp, #8]
  405774:	f7ff bbfc 	b.w	404f70 <_dtoa_r+0x380>
  405778:	f000 80bb 	beq.w	4058f2 <_dtoa_r+0xd02>
  40577c:	9b02      	ldr	r3, [sp, #8]
  40577e:	425d      	negs	r5, r3
  405780:	4b84      	ldr	r3, [pc, #528]	; (405994 <_dtoa_r+0xda4>)
  405782:	f005 020f 	and.w	r2, r5, #15
  405786:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
  40578a:	e9d3 2300 	ldrd	r2, r3, [r3]
  40578e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
  405792:	f001 feef 	bl	407574 <__aeabi_dmul>
  405796:	112d      	asrs	r5, r5, #4
  405798:	4607      	mov	r7, r0
  40579a:	4688      	mov	r8, r1
  40579c:	f000 812c 	beq.w	4059f8 <_dtoa_r+0xe08>
  4057a0:	4e7d      	ldr	r6, [pc, #500]	; (405998 <_dtoa_r+0xda8>)
  4057a2:	f04f 0a02 	mov.w	sl, #2
  4057a6:	07eb      	lsls	r3, r5, #31
  4057a8:	d509      	bpl.n	4057be <_dtoa_r+0xbce>
  4057aa:	4638      	mov	r0, r7
  4057ac:	4641      	mov	r1, r8
  4057ae:	e9d6 2300 	ldrd	r2, r3, [r6]
  4057b2:	f001 fedf 	bl	407574 <__aeabi_dmul>
  4057b6:	f10a 0a01 	add.w	sl, sl, #1
  4057ba:	4607      	mov	r7, r0
  4057bc:	4688      	mov	r8, r1
  4057be:	106d      	asrs	r5, r5, #1
  4057c0:	f106 0608 	add.w	r6, r6, #8
  4057c4:	d1ef      	bne.n	4057a6 <_dtoa_r+0xbb6>
  4057c6:	e608      	b.n	4053da <_dtoa_r+0x7ea>
  4057c8:	6871      	ldr	r1, [r6, #4]
  4057ca:	4620      	mov	r0, r4
  4057cc:	f000 fd0e 	bl	4061ec <_Balloc>
  4057d0:	6933      	ldr	r3, [r6, #16]
  4057d2:	3302      	adds	r3, #2
  4057d4:	009a      	lsls	r2, r3, #2
  4057d6:	4605      	mov	r5, r0
  4057d8:	f106 010c 	add.w	r1, r6, #12
  4057dc:	300c      	adds	r0, #12
  4057de:	f000 fc5f 	bl	4060a0 <memcpy>
  4057e2:	4629      	mov	r1, r5
  4057e4:	2201      	movs	r2, #1
  4057e6:	4620      	mov	r0, r4
  4057e8:	f000 feac 	bl	406544 <__lshift>
  4057ec:	9006      	str	r0, [sp, #24]
  4057ee:	e4b5      	b.n	40515c <_dtoa_r+0x56c>
  4057f0:	2b39      	cmp	r3, #57	; 0x39
  4057f2:	f8cd b018 	str.w	fp, [sp, #24]
  4057f6:	46d0      	mov	r8, sl
  4057f8:	f000 80a5 	beq.w	405946 <_dtoa_r+0xd56>
  4057fc:	f103 0a01 	add.w	sl, r3, #1
  405800:	46b3      	mov	fp, r6
  405802:	f887 a000 	strb.w	sl, [r7]
  405806:	1c7d      	adds	r5, r7, #1
  405808:	9e06      	ldr	r6, [sp, #24]
  40580a:	e571      	b.n	4052f0 <_dtoa_r+0x700>
  40580c:	465a      	mov	r2, fp
  40580e:	46d0      	mov	r8, sl
  405810:	46b3      	mov	fp, r6
  405812:	469a      	mov	sl, r3
  405814:	4616      	mov	r6, r2
  405816:	e54f      	b.n	4052b8 <_dtoa_r+0x6c8>
  405818:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40581a:	495e      	ldr	r1, [pc, #376]	; (405994 <_dtoa_r+0xda4>)
  40581c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
  405820:	462a      	mov	r2, r5
  405822:	4633      	mov	r3, r6
  405824:	e951 0102 	ldrd	r0, r1, [r1, #-8]
  405828:	f001 fea4 	bl	407574 <__aeabi_dmul>
  40582c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
  405830:	4638      	mov	r0, r7
  405832:	4641      	mov	r1, r8
  405834:	f002 f94e 	bl	407ad4 <__aeabi_d2iz>
  405838:	4605      	mov	r5, r0
  40583a:	f001 fe35 	bl	4074a8 <__aeabi_i2d>
  40583e:	460b      	mov	r3, r1
  405840:	4602      	mov	r2, r0
  405842:	4641      	mov	r1, r8
  405844:	4638      	mov	r0, r7
  405846:	f001 fce1 	bl	40720c <__aeabi_dsub>
  40584a:	9b12      	ldr	r3, [sp, #72]	; 0x48
  40584c:	460f      	mov	r7, r1
  40584e:	9904      	ldr	r1, [sp, #16]
  405850:	3530      	adds	r5, #48	; 0x30
  405852:	2b01      	cmp	r3, #1
  405854:	700d      	strb	r5, [r1, #0]
  405856:	4606      	mov	r6, r0
  405858:	f101 0501 	add.w	r5, r1, #1
  40585c:	d026      	beq.n	4058ac <_dtoa_r+0xcbc>
  40585e:	9b12      	ldr	r3, [sp, #72]	; 0x48
  405860:	9a04      	ldr	r2, [sp, #16]
  405862:	f8df b13c 	ldr.w	fp, [pc, #316]	; 4059a0 <_dtoa_r+0xdb0>
  405866:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  40586a:	4413      	add	r3, r2
  40586c:	f04f 0a00 	mov.w	sl, #0
  405870:	4699      	mov	r9, r3
  405872:	4652      	mov	r2, sl
  405874:	465b      	mov	r3, fp
  405876:	4630      	mov	r0, r6
  405878:	4639      	mov	r1, r7
  40587a:	f001 fe7b 	bl	407574 <__aeabi_dmul>
  40587e:	460f      	mov	r7, r1
  405880:	4606      	mov	r6, r0
  405882:	f002 f927 	bl	407ad4 <__aeabi_d2iz>
  405886:	4680      	mov	r8, r0
  405888:	f001 fe0e 	bl	4074a8 <__aeabi_i2d>
  40588c:	f108 0830 	add.w	r8, r8, #48	; 0x30
  405890:	4602      	mov	r2, r0
  405892:	460b      	mov	r3, r1
  405894:	4630      	mov	r0, r6
  405896:	4639      	mov	r1, r7
  405898:	f001 fcb8 	bl	40720c <__aeabi_dsub>
  40589c:	f805 8b01 	strb.w	r8, [r5], #1
  4058a0:	454d      	cmp	r5, r9
  4058a2:	4606      	mov	r6, r0
  4058a4:	460f      	mov	r7, r1
  4058a6:	d1e4      	bne.n	405872 <_dtoa_r+0xc82>
  4058a8:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  4058ac:	4b3b      	ldr	r3, [pc, #236]	; (40599c <_dtoa_r+0xdac>)
  4058ae:	2200      	movs	r2, #0
  4058b0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
  4058b4:	f001 fcac 	bl	407210 <__adddf3>
  4058b8:	4632      	mov	r2, r6
  4058ba:	463b      	mov	r3, r7
  4058bc:	f002 f8cc 	bl	407a58 <__aeabi_dcmplt>
  4058c0:	2800      	cmp	r0, #0
  4058c2:	d046      	beq.n	405952 <_dtoa_r+0xd62>
  4058c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
  4058c6:	9302      	str	r3, [sp, #8]
  4058c8:	f815 8c01 	ldrb.w	r8, [r5, #-1]
  4058cc:	f7ff bb43 	b.w	404f56 <_dtoa_r+0x366>
  4058d0:	f04f 0800 	mov.w	r8, #0
  4058d4:	4646      	mov	r6, r8
  4058d6:	e6a9      	b.n	40562c <_dtoa_r+0xa3c>
  4058d8:	9b08      	ldr	r3, [sp, #32]
  4058da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  4058dc:	1a9d      	subs	r5, r3, r2
  4058de:	2300      	movs	r3, #0
  4058e0:	f7ff bb71 	b.w	404fc6 <_dtoa_r+0x3d6>
  4058e4:	9b18      	ldr	r3, [sp, #96]	; 0x60
  4058e6:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  4058e8:	9d08      	ldr	r5, [sp, #32]
  4058ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
  4058ee:	f7ff bb6a 	b.w	404fc6 <_dtoa_r+0x3d6>
  4058f2:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
  4058f6:	f04f 0a02 	mov.w	sl, #2
  4058fa:	e56e      	b.n	4053da <_dtoa_r+0x7ea>
  4058fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  4058fe:	2b00      	cmp	r3, #0
  405900:	f43f aeb8 	beq.w	405674 <_dtoa_r+0xa84>
  405904:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405906:	2b00      	cmp	r3, #0
  405908:	f77f aede 	ble.w	4056c8 <_dtoa_r+0xad8>
  40590c:	2200      	movs	r2, #0
  40590e:	4b24      	ldr	r3, [pc, #144]	; (4059a0 <_dtoa_r+0xdb0>)
  405910:	4638      	mov	r0, r7
  405912:	4641      	mov	r1, r8
  405914:	f001 fe2e 	bl	407574 <__aeabi_dmul>
  405918:	4607      	mov	r7, r0
  40591a:	4688      	mov	r8, r1
  40591c:	f10a 0001 	add.w	r0, sl, #1
  405920:	f001 fdc2 	bl	4074a8 <__aeabi_i2d>
  405924:	463a      	mov	r2, r7
  405926:	4643      	mov	r3, r8
  405928:	f001 fe24 	bl	407574 <__aeabi_dmul>
  40592c:	2200      	movs	r2, #0
  40592e:	4b17      	ldr	r3, [pc, #92]	; (40598c <_dtoa_r+0xd9c>)
  405930:	f001 fc6e 	bl	407210 <__adddf3>
  405934:	9a02      	ldr	r2, [sp, #8]
  405936:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405938:	9312      	str	r3, [sp, #72]	; 0x48
  40593a:	3a01      	subs	r2, #1
  40593c:	4605      	mov	r5, r0
  40593e:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
  405942:	9215      	str	r2, [sp, #84]	; 0x54
  405944:	e56a      	b.n	40541c <_dtoa_r+0x82c>
  405946:	2239      	movs	r2, #57	; 0x39
  405948:	46b3      	mov	fp, r6
  40594a:	703a      	strb	r2, [r7, #0]
  40594c:	9e06      	ldr	r6, [sp, #24]
  40594e:	1c7d      	adds	r5, r7, #1
  405950:	e4c0      	b.n	4052d4 <_dtoa_r+0x6e4>
  405952:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
  405956:	2000      	movs	r0, #0
  405958:	4910      	ldr	r1, [pc, #64]	; (40599c <_dtoa_r+0xdac>)
  40595a:	f001 fc57 	bl	40720c <__aeabi_dsub>
  40595e:	4632      	mov	r2, r6
  405960:	463b      	mov	r3, r7
  405962:	f002 f897 	bl	407a94 <__aeabi_dcmpgt>
  405966:	b908      	cbnz	r0, 40596c <_dtoa_r+0xd7c>
  405968:	e6ae      	b.n	4056c8 <_dtoa_r+0xad8>
  40596a:	4615      	mov	r5, r2
  40596c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
  405970:	2b30      	cmp	r3, #48	; 0x30
  405972:	f105 32ff 	add.w	r2, r5, #4294967295
  405976:	d0f8      	beq.n	40596a <_dtoa_r+0xd7a>
  405978:	e5d7      	b.n	40552a <_dtoa_r+0x93a>
  40597a:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
  40597e:	9b15      	ldr	r3, [sp, #84]	; 0x54
  405980:	9302      	str	r3, [sp, #8]
  405982:	f7ff bae8 	b.w	404f56 <_dtoa_r+0x366>
  405986:	970c      	str	r7, [sp, #48]	; 0x30
  405988:	f7ff bba5 	b.w	4050d6 <_dtoa_r+0x4e6>
  40598c:	401c0000 	.word	0x401c0000
  405990:	40140000 	.word	0x40140000
  405994:	00408670 	.word	0x00408670
  405998:	00408648 	.word	0x00408648
  40599c:	3fe00000 	.word	0x3fe00000
  4059a0:	40240000 	.word	0x40240000
  4059a4:	2b39      	cmp	r3, #57	; 0x39
  4059a6:	f8cd b018 	str.w	fp, [sp, #24]
  4059aa:	46d0      	mov	r8, sl
  4059ac:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
  4059b0:	469a      	mov	sl, r3
  4059b2:	d0c8      	beq.n	405946 <_dtoa_r+0xd56>
  4059b4:	f1bb 0f00 	cmp.w	fp, #0
  4059b8:	f73f aebf 	bgt.w	40573a <_dtoa_r+0xb4a>
  4059bc:	e6bf      	b.n	40573e <_dtoa_r+0xb4e>
  4059be:	f47f aebe 	bne.w	40573e <_dtoa_r+0xb4e>
  4059c2:	f01a 0f01 	tst.w	sl, #1
  4059c6:	f43f aeba 	beq.w	40573e <_dtoa_r+0xb4e>
  4059ca:	e6b2      	b.n	405732 <_dtoa_r+0xb42>
  4059cc:	f04f 0800 	mov.w	r8, #0
  4059d0:	4646      	mov	r6, r8
  4059d2:	e5e9      	b.n	4055a8 <_dtoa_r+0x9b8>
  4059d4:	4631      	mov	r1, r6
  4059d6:	2300      	movs	r3, #0
  4059d8:	220a      	movs	r2, #10
  4059da:	4620      	mov	r0, r4
  4059dc:	f000 fc36 	bl	40624c <__multadd>
  4059e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4059e2:	2b00      	cmp	r3, #0
  4059e4:	4606      	mov	r6, r0
  4059e6:	dd0a      	ble.n	4059fe <_dtoa_r+0xe0e>
  4059e8:	930a      	str	r3, [sp, #40]	; 0x28
  4059ea:	f7ff bbaa 	b.w	405142 <_dtoa_r+0x552>
  4059ee:	9b24      	ldr	r3, [sp, #144]	; 0x90
  4059f0:	2b02      	cmp	r3, #2
  4059f2:	dc23      	bgt.n	405a3c <_dtoa_r+0xe4c>
  4059f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  4059f6:	e43b      	b.n	405270 <_dtoa_r+0x680>
  4059f8:	f04f 0a02 	mov.w	sl, #2
  4059fc:	e4ed      	b.n	4053da <_dtoa_r+0x7ea>
  4059fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
  405a00:	2b02      	cmp	r3, #2
  405a02:	dc1b      	bgt.n	405a3c <_dtoa_r+0xe4c>
  405a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405a06:	e7ef      	b.n	4059e8 <_dtoa_r+0xdf8>
  405a08:	2500      	movs	r5, #0
  405a0a:	6465      	str	r5, [r4, #68]	; 0x44
  405a0c:	4629      	mov	r1, r5
  405a0e:	4620      	mov	r0, r4
  405a10:	f000 fbec 	bl	4061ec <_Balloc>
  405a14:	f04f 33ff 	mov.w	r3, #4294967295
  405a18:	930a      	str	r3, [sp, #40]	; 0x28
  405a1a:	930f      	str	r3, [sp, #60]	; 0x3c
  405a1c:	2301      	movs	r3, #1
  405a1e:	9004      	str	r0, [sp, #16]
  405a20:	9525      	str	r5, [sp, #148]	; 0x94
  405a22:	6420      	str	r0, [r4, #64]	; 0x40
  405a24:	930b      	str	r3, [sp, #44]	; 0x2c
  405a26:	f7ff b9dd 	b.w	404de4 <_dtoa_r+0x1f4>
  405a2a:	2501      	movs	r5, #1
  405a2c:	f7ff b9a5 	b.w	404d7a <_dtoa_r+0x18a>
  405a30:	f43f ab69 	beq.w	405106 <_dtoa_r+0x516>
  405a34:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
  405a38:	f7ff bbf9 	b.w	40522e <_dtoa_r+0x63e>
  405a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  405a3e:	930a      	str	r3, [sp, #40]	; 0x28
  405a40:	e5e5      	b.n	40560e <_dtoa_r+0xa1e>
  405a42:	bf00      	nop

00405a44 <__libc_fini_array>:
  405a44:	b538      	push	{r3, r4, r5, lr}
  405a46:	4c0a      	ldr	r4, [pc, #40]	; (405a70 <__libc_fini_array+0x2c>)
  405a48:	4d0a      	ldr	r5, [pc, #40]	; (405a74 <__libc_fini_array+0x30>)
  405a4a:	1b64      	subs	r4, r4, r5
  405a4c:	10a4      	asrs	r4, r4, #2
  405a4e:	d00a      	beq.n	405a66 <__libc_fini_array+0x22>
  405a50:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405a54:	3b01      	subs	r3, #1
  405a56:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405a5a:	3c01      	subs	r4, #1
  405a5c:	f855 3904 	ldr.w	r3, [r5], #-4
  405a60:	4798      	blx	r3
  405a62:	2c00      	cmp	r4, #0
  405a64:	d1f9      	bne.n	405a5a <__libc_fini_array+0x16>
  405a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405a6a:	f002 beff 	b.w	40886c <_fini>
  405a6e:	bf00      	nop
  405a70:	0040887c 	.word	0x0040887c
  405a74:	00408878 	.word	0x00408878

00405a78 <_localeconv_r>:
  405a78:	4a04      	ldr	r2, [pc, #16]	; (405a8c <_localeconv_r+0x14>)
  405a7a:	4b05      	ldr	r3, [pc, #20]	; (405a90 <_localeconv_r+0x18>)
  405a7c:	6812      	ldr	r2, [r2, #0]
  405a7e:	6b50      	ldr	r0, [r2, #52]	; 0x34
  405a80:	2800      	cmp	r0, #0
  405a82:	bf08      	it	eq
  405a84:	4618      	moveq	r0, r3
  405a86:	30f0      	adds	r0, #240	; 0xf0
  405a88:	4770      	bx	lr
  405a8a:	bf00      	nop
  405a8c:	204009f8 	.word	0x204009f8
  405a90:	2040123c 	.word	0x2040123c

00405a94 <__retarget_lock_acquire_recursive>:
  405a94:	4770      	bx	lr
  405a96:	bf00      	nop

00405a98 <__retarget_lock_release_recursive>:
  405a98:	4770      	bx	lr
  405a9a:	bf00      	nop

00405a9c <_malloc_r>:
  405a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405aa0:	f101 060b 	add.w	r6, r1, #11
  405aa4:	2e16      	cmp	r6, #22
  405aa6:	b083      	sub	sp, #12
  405aa8:	4605      	mov	r5, r0
  405aaa:	f240 809e 	bls.w	405bea <_malloc_r+0x14e>
  405aae:	f036 0607 	bics.w	r6, r6, #7
  405ab2:	f100 80bd 	bmi.w	405c30 <_malloc_r+0x194>
  405ab6:	42b1      	cmp	r1, r6
  405ab8:	f200 80ba 	bhi.w	405c30 <_malloc_r+0x194>
  405abc:	f000 fb8a 	bl	4061d4 <__malloc_lock>
  405ac0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  405ac4:	f0c0 8293 	bcc.w	405fee <_malloc_r+0x552>
  405ac8:	0a73      	lsrs	r3, r6, #9
  405aca:	f000 80b8 	beq.w	405c3e <_malloc_r+0x1a2>
  405ace:	2b04      	cmp	r3, #4
  405ad0:	f200 8179 	bhi.w	405dc6 <_malloc_r+0x32a>
  405ad4:	09b3      	lsrs	r3, r6, #6
  405ad6:	f103 0039 	add.w	r0, r3, #57	; 0x39
  405ada:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  405ade:	00c3      	lsls	r3, r0, #3
  405ae0:	4fbf      	ldr	r7, [pc, #764]	; (405de0 <_malloc_r+0x344>)
  405ae2:	443b      	add	r3, r7
  405ae4:	f1a3 0108 	sub.w	r1, r3, #8
  405ae8:	685c      	ldr	r4, [r3, #4]
  405aea:	42a1      	cmp	r1, r4
  405aec:	d106      	bne.n	405afc <_malloc_r+0x60>
  405aee:	e00c      	b.n	405b0a <_malloc_r+0x6e>
  405af0:	2a00      	cmp	r2, #0
  405af2:	f280 80aa 	bge.w	405c4a <_malloc_r+0x1ae>
  405af6:	68e4      	ldr	r4, [r4, #12]
  405af8:	42a1      	cmp	r1, r4
  405afa:	d006      	beq.n	405b0a <_malloc_r+0x6e>
  405afc:	6863      	ldr	r3, [r4, #4]
  405afe:	f023 0303 	bic.w	r3, r3, #3
  405b02:	1b9a      	subs	r2, r3, r6
  405b04:	2a0f      	cmp	r2, #15
  405b06:	ddf3      	ble.n	405af0 <_malloc_r+0x54>
  405b08:	4670      	mov	r0, lr
  405b0a:	693c      	ldr	r4, [r7, #16]
  405b0c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 405df4 <_malloc_r+0x358>
  405b10:	4574      	cmp	r4, lr
  405b12:	f000 81ab 	beq.w	405e6c <_malloc_r+0x3d0>
  405b16:	6863      	ldr	r3, [r4, #4]
  405b18:	f023 0303 	bic.w	r3, r3, #3
  405b1c:	1b9a      	subs	r2, r3, r6
  405b1e:	2a0f      	cmp	r2, #15
  405b20:	f300 8190 	bgt.w	405e44 <_malloc_r+0x3a8>
  405b24:	2a00      	cmp	r2, #0
  405b26:	f8c7 e014 	str.w	lr, [r7, #20]
  405b2a:	f8c7 e010 	str.w	lr, [r7, #16]
  405b2e:	f280 809d 	bge.w	405c6c <_malloc_r+0x1d0>
  405b32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405b36:	f080 8161 	bcs.w	405dfc <_malloc_r+0x360>
  405b3a:	08db      	lsrs	r3, r3, #3
  405b3c:	f103 0c01 	add.w	ip, r3, #1
  405b40:	1099      	asrs	r1, r3, #2
  405b42:	687a      	ldr	r2, [r7, #4]
  405b44:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  405b48:	f8c4 8008 	str.w	r8, [r4, #8]
  405b4c:	2301      	movs	r3, #1
  405b4e:	408b      	lsls	r3, r1
  405b50:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  405b54:	4313      	orrs	r3, r2
  405b56:	3908      	subs	r1, #8
  405b58:	60e1      	str	r1, [r4, #12]
  405b5a:	607b      	str	r3, [r7, #4]
  405b5c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  405b60:	f8c8 400c 	str.w	r4, [r8, #12]
  405b64:	1082      	asrs	r2, r0, #2
  405b66:	2401      	movs	r4, #1
  405b68:	4094      	lsls	r4, r2
  405b6a:	429c      	cmp	r4, r3
  405b6c:	f200 808b 	bhi.w	405c86 <_malloc_r+0x1ea>
  405b70:	421c      	tst	r4, r3
  405b72:	d106      	bne.n	405b82 <_malloc_r+0xe6>
  405b74:	f020 0003 	bic.w	r0, r0, #3
  405b78:	0064      	lsls	r4, r4, #1
  405b7a:	421c      	tst	r4, r3
  405b7c:	f100 0004 	add.w	r0, r0, #4
  405b80:	d0fa      	beq.n	405b78 <_malloc_r+0xdc>
  405b82:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  405b86:	46cc      	mov	ip, r9
  405b88:	4680      	mov	r8, r0
  405b8a:	f8dc 300c 	ldr.w	r3, [ip, #12]
  405b8e:	459c      	cmp	ip, r3
  405b90:	d107      	bne.n	405ba2 <_malloc_r+0x106>
  405b92:	e16d      	b.n	405e70 <_malloc_r+0x3d4>
  405b94:	2a00      	cmp	r2, #0
  405b96:	f280 817b 	bge.w	405e90 <_malloc_r+0x3f4>
  405b9a:	68db      	ldr	r3, [r3, #12]
  405b9c:	459c      	cmp	ip, r3
  405b9e:	f000 8167 	beq.w	405e70 <_malloc_r+0x3d4>
  405ba2:	6859      	ldr	r1, [r3, #4]
  405ba4:	f021 0103 	bic.w	r1, r1, #3
  405ba8:	1b8a      	subs	r2, r1, r6
  405baa:	2a0f      	cmp	r2, #15
  405bac:	ddf2      	ble.n	405b94 <_malloc_r+0xf8>
  405bae:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  405bb2:	f8d3 8008 	ldr.w	r8, [r3, #8]
  405bb6:	9300      	str	r3, [sp, #0]
  405bb8:	199c      	adds	r4, r3, r6
  405bba:	4628      	mov	r0, r5
  405bbc:	f046 0601 	orr.w	r6, r6, #1
  405bc0:	f042 0501 	orr.w	r5, r2, #1
  405bc4:	605e      	str	r6, [r3, #4]
  405bc6:	f8c8 c00c 	str.w	ip, [r8, #12]
  405bca:	f8cc 8008 	str.w	r8, [ip, #8]
  405bce:	617c      	str	r4, [r7, #20]
  405bd0:	613c      	str	r4, [r7, #16]
  405bd2:	f8c4 e00c 	str.w	lr, [r4, #12]
  405bd6:	f8c4 e008 	str.w	lr, [r4, #8]
  405bda:	6065      	str	r5, [r4, #4]
  405bdc:	505a      	str	r2, [r3, r1]
  405bde:	f000 faff 	bl	4061e0 <__malloc_unlock>
  405be2:	9b00      	ldr	r3, [sp, #0]
  405be4:	f103 0408 	add.w	r4, r3, #8
  405be8:	e01e      	b.n	405c28 <_malloc_r+0x18c>
  405bea:	2910      	cmp	r1, #16
  405bec:	d820      	bhi.n	405c30 <_malloc_r+0x194>
  405bee:	f000 faf1 	bl	4061d4 <__malloc_lock>
  405bf2:	2610      	movs	r6, #16
  405bf4:	2318      	movs	r3, #24
  405bf6:	2002      	movs	r0, #2
  405bf8:	4f79      	ldr	r7, [pc, #484]	; (405de0 <_malloc_r+0x344>)
  405bfa:	443b      	add	r3, r7
  405bfc:	f1a3 0208 	sub.w	r2, r3, #8
  405c00:	685c      	ldr	r4, [r3, #4]
  405c02:	4294      	cmp	r4, r2
  405c04:	f000 813d 	beq.w	405e82 <_malloc_r+0x3e6>
  405c08:	6863      	ldr	r3, [r4, #4]
  405c0a:	68e1      	ldr	r1, [r4, #12]
  405c0c:	68a6      	ldr	r6, [r4, #8]
  405c0e:	f023 0303 	bic.w	r3, r3, #3
  405c12:	4423      	add	r3, r4
  405c14:	4628      	mov	r0, r5
  405c16:	685a      	ldr	r2, [r3, #4]
  405c18:	60f1      	str	r1, [r6, #12]
  405c1a:	f042 0201 	orr.w	r2, r2, #1
  405c1e:	608e      	str	r6, [r1, #8]
  405c20:	605a      	str	r2, [r3, #4]
  405c22:	f000 fadd 	bl	4061e0 <__malloc_unlock>
  405c26:	3408      	adds	r4, #8
  405c28:	4620      	mov	r0, r4
  405c2a:	b003      	add	sp, #12
  405c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c30:	2400      	movs	r4, #0
  405c32:	230c      	movs	r3, #12
  405c34:	4620      	mov	r0, r4
  405c36:	602b      	str	r3, [r5, #0]
  405c38:	b003      	add	sp, #12
  405c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c3e:	2040      	movs	r0, #64	; 0x40
  405c40:	f44f 7300 	mov.w	r3, #512	; 0x200
  405c44:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  405c48:	e74a      	b.n	405ae0 <_malloc_r+0x44>
  405c4a:	4423      	add	r3, r4
  405c4c:	68e1      	ldr	r1, [r4, #12]
  405c4e:	685a      	ldr	r2, [r3, #4]
  405c50:	68a6      	ldr	r6, [r4, #8]
  405c52:	f042 0201 	orr.w	r2, r2, #1
  405c56:	60f1      	str	r1, [r6, #12]
  405c58:	4628      	mov	r0, r5
  405c5a:	608e      	str	r6, [r1, #8]
  405c5c:	605a      	str	r2, [r3, #4]
  405c5e:	f000 fabf 	bl	4061e0 <__malloc_unlock>
  405c62:	3408      	adds	r4, #8
  405c64:	4620      	mov	r0, r4
  405c66:	b003      	add	sp, #12
  405c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c6c:	4423      	add	r3, r4
  405c6e:	4628      	mov	r0, r5
  405c70:	685a      	ldr	r2, [r3, #4]
  405c72:	f042 0201 	orr.w	r2, r2, #1
  405c76:	605a      	str	r2, [r3, #4]
  405c78:	f000 fab2 	bl	4061e0 <__malloc_unlock>
  405c7c:	3408      	adds	r4, #8
  405c7e:	4620      	mov	r0, r4
  405c80:	b003      	add	sp, #12
  405c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405c86:	68bc      	ldr	r4, [r7, #8]
  405c88:	6863      	ldr	r3, [r4, #4]
  405c8a:	f023 0803 	bic.w	r8, r3, #3
  405c8e:	45b0      	cmp	r8, r6
  405c90:	d304      	bcc.n	405c9c <_malloc_r+0x200>
  405c92:	eba8 0306 	sub.w	r3, r8, r6
  405c96:	2b0f      	cmp	r3, #15
  405c98:	f300 8085 	bgt.w	405da6 <_malloc_r+0x30a>
  405c9c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 405df8 <_malloc_r+0x35c>
  405ca0:	4b50      	ldr	r3, [pc, #320]	; (405de4 <_malloc_r+0x348>)
  405ca2:	f8d9 2000 	ldr.w	r2, [r9]
  405ca6:	681b      	ldr	r3, [r3, #0]
  405ca8:	3201      	adds	r2, #1
  405caa:	4433      	add	r3, r6
  405cac:	eb04 0a08 	add.w	sl, r4, r8
  405cb0:	f000 8155 	beq.w	405f5e <_malloc_r+0x4c2>
  405cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  405cb8:	330f      	adds	r3, #15
  405cba:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  405cbe:	f02b 0b0f 	bic.w	fp, fp, #15
  405cc2:	4659      	mov	r1, fp
  405cc4:	4628      	mov	r0, r5
  405cc6:	f000 fd8b 	bl	4067e0 <_sbrk_r>
  405cca:	1c41      	adds	r1, r0, #1
  405ccc:	4602      	mov	r2, r0
  405cce:	f000 80fc 	beq.w	405eca <_malloc_r+0x42e>
  405cd2:	4582      	cmp	sl, r0
  405cd4:	f200 80f7 	bhi.w	405ec6 <_malloc_r+0x42a>
  405cd8:	4b43      	ldr	r3, [pc, #268]	; (405de8 <_malloc_r+0x34c>)
  405cda:	6819      	ldr	r1, [r3, #0]
  405cdc:	4459      	add	r1, fp
  405cde:	6019      	str	r1, [r3, #0]
  405ce0:	f000 814d 	beq.w	405f7e <_malloc_r+0x4e2>
  405ce4:	f8d9 0000 	ldr.w	r0, [r9]
  405ce8:	3001      	adds	r0, #1
  405cea:	bf1b      	ittet	ne
  405cec:	eba2 0a0a 	subne.w	sl, r2, sl
  405cf0:	4451      	addne	r1, sl
  405cf2:	f8c9 2000 	streq.w	r2, [r9]
  405cf6:	6019      	strne	r1, [r3, #0]
  405cf8:	f012 0107 	ands.w	r1, r2, #7
  405cfc:	f000 8115 	beq.w	405f2a <_malloc_r+0x48e>
  405d00:	f1c1 0008 	rsb	r0, r1, #8
  405d04:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  405d08:	4402      	add	r2, r0
  405d0a:	3108      	adds	r1, #8
  405d0c:	eb02 090b 	add.w	r9, r2, fp
  405d10:	f3c9 090b 	ubfx	r9, r9, #0, #12
  405d14:	eba1 0909 	sub.w	r9, r1, r9
  405d18:	4649      	mov	r1, r9
  405d1a:	4628      	mov	r0, r5
  405d1c:	9301      	str	r3, [sp, #4]
  405d1e:	9200      	str	r2, [sp, #0]
  405d20:	f000 fd5e 	bl	4067e0 <_sbrk_r>
  405d24:	1c43      	adds	r3, r0, #1
  405d26:	e89d 000c 	ldmia.w	sp, {r2, r3}
  405d2a:	f000 8143 	beq.w	405fb4 <_malloc_r+0x518>
  405d2e:	1a80      	subs	r0, r0, r2
  405d30:	4448      	add	r0, r9
  405d32:	f040 0001 	orr.w	r0, r0, #1
  405d36:	6819      	ldr	r1, [r3, #0]
  405d38:	60ba      	str	r2, [r7, #8]
  405d3a:	4449      	add	r1, r9
  405d3c:	42bc      	cmp	r4, r7
  405d3e:	6050      	str	r0, [r2, #4]
  405d40:	6019      	str	r1, [r3, #0]
  405d42:	d017      	beq.n	405d74 <_malloc_r+0x2d8>
  405d44:	f1b8 0f0f 	cmp.w	r8, #15
  405d48:	f240 80fb 	bls.w	405f42 <_malloc_r+0x4a6>
  405d4c:	6860      	ldr	r0, [r4, #4]
  405d4e:	f1a8 020c 	sub.w	r2, r8, #12
  405d52:	f022 0207 	bic.w	r2, r2, #7
  405d56:	eb04 0e02 	add.w	lr, r4, r2
  405d5a:	f000 0001 	and.w	r0, r0, #1
  405d5e:	f04f 0c05 	mov.w	ip, #5
  405d62:	4310      	orrs	r0, r2
  405d64:	2a0f      	cmp	r2, #15
  405d66:	6060      	str	r0, [r4, #4]
  405d68:	f8ce c004 	str.w	ip, [lr, #4]
  405d6c:	f8ce c008 	str.w	ip, [lr, #8]
  405d70:	f200 8117 	bhi.w	405fa2 <_malloc_r+0x506>
  405d74:	4b1d      	ldr	r3, [pc, #116]	; (405dec <_malloc_r+0x350>)
  405d76:	68bc      	ldr	r4, [r7, #8]
  405d78:	681a      	ldr	r2, [r3, #0]
  405d7a:	4291      	cmp	r1, r2
  405d7c:	bf88      	it	hi
  405d7e:	6019      	strhi	r1, [r3, #0]
  405d80:	4b1b      	ldr	r3, [pc, #108]	; (405df0 <_malloc_r+0x354>)
  405d82:	681a      	ldr	r2, [r3, #0]
  405d84:	4291      	cmp	r1, r2
  405d86:	6862      	ldr	r2, [r4, #4]
  405d88:	bf88      	it	hi
  405d8a:	6019      	strhi	r1, [r3, #0]
  405d8c:	f022 0203 	bic.w	r2, r2, #3
  405d90:	4296      	cmp	r6, r2
  405d92:	eba2 0306 	sub.w	r3, r2, r6
  405d96:	d801      	bhi.n	405d9c <_malloc_r+0x300>
  405d98:	2b0f      	cmp	r3, #15
  405d9a:	dc04      	bgt.n	405da6 <_malloc_r+0x30a>
  405d9c:	4628      	mov	r0, r5
  405d9e:	f000 fa1f 	bl	4061e0 <__malloc_unlock>
  405da2:	2400      	movs	r4, #0
  405da4:	e740      	b.n	405c28 <_malloc_r+0x18c>
  405da6:	19a2      	adds	r2, r4, r6
  405da8:	f043 0301 	orr.w	r3, r3, #1
  405dac:	f046 0601 	orr.w	r6, r6, #1
  405db0:	6066      	str	r6, [r4, #4]
  405db2:	4628      	mov	r0, r5
  405db4:	60ba      	str	r2, [r7, #8]
  405db6:	6053      	str	r3, [r2, #4]
  405db8:	f000 fa12 	bl	4061e0 <__malloc_unlock>
  405dbc:	3408      	adds	r4, #8
  405dbe:	4620      	mov	r0, r4
  405dc0:	b003      	add	sp, #12
  405dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405dc6:	2b14      	cmp	r3, #20
  405dc8:	d971      	bls.n	405eae <_malloc_r+0x412>
  405dca:	2b54      	cmp	r3, #84	; 0x54
  405dcc:	f200 80a3 	bhi.w	405f16 <_malloc_r+0x47a>
  405dd0:	0b33      	lsrs	r3, r6, #12
  405dd2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  405dd6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  405dda:	00c3      	lsls	r3, r0, #3
  405ddc:	e680      	b.n	405ae0 <_malloc_r+0x44>
  405dde:	bf00      	nop
  405de0:	20400e2c 	.word	0x20400e2c
  405de4:	20401670 	.word	0x20401670
  405de8:	20401640 	.word	0x20401640
  405dec:	20401668 	.word	0x20401668
  405df0:	2040166c 	.word	0x2040166c
  405df4:	20400e34 	.word	0x20400e34
  405df8:	20401234 	.word	0x20401234
  405dfc:	0a5a      	lsrs	r2, r3, #9
  405dfe:	2a04      	cmp	r2, #4
  405e00:	d95b      	bls.n	405eba <_malloc_r+0x41e>
  405e02:	2a14      	cmp	r2, #20
  405e04:	f200 80ae 	bhi.w	405f64 <_malloc_r+0x4c8>
  405e08:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  405e0c:	00c9      	lsls	r1, r1, #3
  405e0e:	325b      	adds	r2, #91	; 0x5b
  405e10:	eb07 0c01 	add.w	ip, r7, r1
  405e14:	5879      	ldr	r1, [r7, r1]
  405e16:	f1ac 0c08 	sub.w	ip, ip, #8
  405e1a:	458c      	cmp	ip, r1
  405e1c:	f000 8088 	beq.w	405f30 <_malloc_r+0x494>
  405e20:	684a      	ldr	r2, [r1, #4]
  405e22:	f022 0203 	bic.w	r2, r2, #3
  405e26:	4293      	cmp	r3, r2
  405e28:	d273      	bcs.n	405f12 <_malloc_r+0x476>
  405e2a:	6889      	ldr	r1, [r1, #8]
  405e2c:	458c      	cmp	ip, r1
  405e2e:	d1f7      	bne.n	405e20 <_malloc_r+0x384>
  405e30:	f8dc 200c 	ldr.w	r2, [ip, #12]
  405e34:	687b      	ldr	r3, [r7, #4]
  405e36:	60e2      	str	r2, [r4, #12]
  405e38:	f8c4 c008 	str.w	ip, [r4, #8]
  405e3c:	6094      	str	r4, [r2, #8]
  405e3e:	f8cc 400c 	str.w	r4, [ip, #12]
  405e42:	e68f      	b.n	405b64 <_malloc_r+0xc8>
  405e44:	19a1      	adds	r1, r4, r6
  405e46:	f046 0c01 	orr.w	ip, r6, #1
  405e4a:	f042 0601 	orr.w	r6, r2, #1
  405e4e:	f8c4 c004 	str.w	ip, [r4, #4]
  405e52:	4628      	mov	r0, r5
  405e54:	6179      	str	r1, [r7, #20]
  405e56:	6139      	str	r1, [r7, #16]
  405e58:	f8c1 e00c 	str.w	lr, [r1, #12]
  405e5c:	f8c1 e008 	str.w	lr, [r1, #8]
  405e60:	604e      	str	r6, [r1, #4]
  405e62:	50e2      	str	r2, [r4, r3]
  405e64:	f000 f9bc 	bl	4061e0 <__malloc_unlock>
  405e68:	3408      	adds	r4, #8
  405e6a:	e6dd      	b.n	405c28 <_malloc_r+0x18c>
  405e6c:	687b      	ldr	r3, [r7, #4]
  405e6e:	e679      	b.n	405b64 <_malloc_r+0xc8>
  405e70:	f108 0801 	add.w	r8, r8, #1
  405e74:	f018 0f03 	tst.w	r8, #3
  405e78:	f10c 0c08 	add.w	ip, ip, #8
  405e7c:	f47f ae85 	bne.w	405b8a <_malloc_r+0xee>
  405e80:	e02d      	b.n	405ede <_malloc_r+0x442>
  405e82:	68dc      	ldr	r4, [r3, #12]
  405e84:	42a3      	cmp	r3, r4
  405e86:	bf08      	it	eq
  405e88:	3002      	addeq	r0, #2
  405e8a:	f43f ae3e 	beq.w	405b0a <_malloc_r+0x6e>
  405e8e:	e6bb      	b.n	405c08 <_malloc_r+0x16c>
  405e90:	4419      	add	r1, r3
  405e92:	461c      	mov	r4, r3
  405e94:	684a      	ldr	r2, [r1, #4]
  405e96:	68db      	ldr	r3, [r3, #12]
  405e98:	f854 6f08 	ldr.w	r6, [r4, #8]!
  405e9c:	f042 0201 	orr.w	r2, r2, #1
  405ea0:	604a      	str	r2, [r1, #4]
  405ea2:	4628      	mov	r0, r5
  405ea4:	60f3      	str	r3, [r6, #12]
  405ea6:	609e      	str	r6, [r3, #8]
  405ea8:	f000 f99a 	bl	4061e0 <__malloc_unlock>
  405eac:	e6bc      	b.n	405c28 <_malloc_r+0x18c>
  405eae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  405eb2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  405eb6:	00c3      	lsls	r3, r0, #3
  405eb8:	e612      	b.n	405ae0 <_malloc_r+0x44>
  405eba:	099a      	lsrs	r2, r3, #6
  405ebc:	f102 0139 	add.w	r1, r2, #57	; 0x39
  405ec0:	00c9      	lsls	r1, r1, #3
  405ec2:	3238      	adds	r2, #56	; 0x38
  405ec4:	e7a4      	b.n	405e10 <_malloc_r+0x374>
  405ec6:	42bc      	cmp	r4, r7
  405ec8:	d054      	beq.n	405f74 <_malloc_r+0x4d8>
  405eca:	68bc      	ldr	r4, [r7, #8]
  405ecc:	6862      	ldr	r2, [r4, #4]
  405ece:	f022 0203 	bic.w	r2, r2, #3
  405ed2:	e75d      	b.n	405d90 <_malloc_r+0x2f4>
  405ed4:	f859 3908 	ldr.w	r3, [r9], #-8
  405ed8:	4599      	cmp	r9, r3
  405eda:	f040 8086 	bne.w	405fea <_malloc_r+0x54e>
  405ede:	f010 0f03 	tst.w	r0, #3
  405ee2:	f100 30ff 	add.w	r0, r0, #4294967295
  405ee6:	d1f5      	bne.n	405ed4 <_malloc_r+0x438>
  405ee8:	687b      	ldr	r3, [r7, #4]
  405eea:	ea23 0304 	bic.w	r3, r3, r4
  405eee:	607b      	str	r3, [r7, #4]
  405ef0:	0064      	lsls	r4, r4, #1
  405ef2:	429c      	cmp	r4, r3
  405ef4:	f63f aec7 	bhi.w	405c86 <_malloc_r+0x1ea>
  405ef8:	2c00      	cmp	r4, #0
  405efa:	f43f aec4 	beq.w	405c86 <_malloc_r+0x1ea>
  405efe:	421c      	tst	r4, r3
  405f00:	4640      	mov	r0, r8
  405f02:	f47f ae3e 	bne.w	405b82 <_malloc_r+0xe6>
  405f06:	0064      	lsls	r4, r4, #1
  405f08:	421c      	tst	r4, r3
  405f0a:	f100 0004 	add.w	r0, r0, #4
  405f0e:	d0fa      	beq.n	405f06 <_malloc_r+0x46a>
  405f10:	e637      	b.n	405b82 <_malloc_r+0xe6>
  405f12:	468c      	mov	ip, r1
  405f14:	e78c      	b.n	405e30 <_malloc_r+0x394>
  405f16:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  405f1a:	d815      	bhi.n	405f48 <_malloc_r+0x4ac>
  405f1c:	0bf3      	lsrs	r3, r6, #15
  405f1e:	f103 0078 	add.w	r0, r3, #120	; 0x78
  405f22:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  405f26:	00c3      	lsls	r3, r0, #3
  405f28:	e5da      	b.n	405ae0 <_malloc_r+0x44>
  405f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  405f2e:	e6ed      	b.n	405d0c <_malloc_r+0x270>
  405f30:	687b      	ldr	r3, [r7, #4]
  405f32:	1092      	asrs	r2, r2, #2
  405f34:	2101      	movs	r1, #1
  405f36:	fa01 f202 	lsl.w	r2, r1, r2
  405f3a:	4313      	orrs	r3, r2
  405f3c:	607b      	str	r3, [r7, #4]
  405f3e:	4662      	mov	r2, ip
  405f40:	e779      	b.n	405e36 <_malloc_r+0x39a>
  405f42:	2301      	movs	r3, #1
  405f44:	6053      	str	r3, [r2, #4]
  405f46:	e729      	b.n	405d9c <_malloc_r+0x300>
  405f48:	f240 5254 	movw	r2, #1364	; 0x554
  405f4c:	4293      	cmp	r3, r2
  405f4e:	d822      	bhi.n	405f96 <_malloc_r+0x4fa>
  405f50:	0cb3      	lsrs	r3, r6, #18
  405f52:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  405f56:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  405f5a:	00c3      	lsls	r3, r0, #3
  405f5c:	e5c0      	b.n	405ae0 <_malloc_r+0x44>
  405f5e:	f103 0b10 	add.w	fp, r3, #16
  405f62:	e6ae      	b.n	405cc2 <_malloc_r+0x226>
  405f64:	2a54      	cmp	r2, #84	; 0x54
  405f66:	d829      	bhi.n	405fbc <_malloc_r+0x520>
  405f68:	0b1a      	lsrs	r2, r3, #12
  405f6a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  405f6e:	00c9      	lsls	r1, r1, #3
  405f70:	326e      	adds	r2, #110	; 0x6e
  405f72:	e74d      	b.n	405e10 <_malloc_r+0x374>
  405f74:	4b20      	ldr	r3, [pc, #128]	; (405ff8 <_malloc_r+0x55c>)
  405f76:	6819      	ldr	r1, [r3, #0]
  405f78:	4459      	add	r1, fp
  405f7a:	6019      	str	r1, [r3, #0]
  405f7c:	e6b2      	b.n	405ce4 <_malloc_r+0x248>
  405f7e:	f3ca 000b 	ubfx	r0, sl, #0, #12
  405f82:	2800      	cmp	r0, #0
  405f84:	f47f aeae 	bne.w	405ce4 <_malloc_r+0x248>
  405f88:	eb08 030b 	add.w	r3, r8, fp
  405f8c:	68ba      	ldr	r2, [r7, #8]
  405f8e:	f043 0301 	orr.w	r3, r3, #1
  405f92:	6053      	str	r3, [r2, #4]
  405f94:	e6ee      	b.n	405d74 <_malloc_r+0x2d8>
  405f96:	207f      	movs	r0, #127	; 0x7f
  405f98:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  405f9c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  405fa0:	e59e      	b.n	405ae0 <_malloc_r+0x44>
  405fa2:	f104 0108 	add.w	r1, r4, #8
  405fa6:	4628      	mov	r0, r5
  405fa8:	9300      	str	r3, [sp, #0]
  405faa:	f000 fe17 	bl	406bdc <_free_r>
  405fae:	9b00      	ldr	r3, [sp, #0]
  405fb0:	6819      	ldr	r1, [r3, #0]
  405fb2:	e6df      	b.n	405d74 <_malloc_r+0x2d8>
  405fb4:	2001      	movs	r0, #1
  405fb6:	f04f 0900 	mov.w	r9, #0
  405fba:	e6bc      	b.n	405d36 <_malloc_r+0x29a>
  405fbc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405fc0:	d805      	bhi.n	405fce <_malloc_r+0x532>
  405fc2:	0bda      	lsrs	r2, r3, #15
  405fc4:	f102 0178 	add.w	r1, r2, #120	; 0x78
  405fc8:	00c9      	lsls	r1, r1, #3
  405fca:	3277      	adds	r2, #119	; 0x77
  405fcc:	e720      	b.n	405e10 <_malloc_r+0x374>
  405fce:	f240 5154 	movw	r1, #1364	; 0x554
  405fd2:	428a      	cmp	r2, r1
  405fd4:	d805      	bhi.n	405fe2 <_malloc_r+0x546>
  405fd6:	0c9a      	lsrs	r2, r3, #18
  405fd8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  405fdc:	00c9      	lsls	r1, r1, #3
  405fde:	327c      	adds	r2, #124	; 0x7c
  405fe0:	e716      	b.n	405e10 <_malloc_r+0x374>
  405fe2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  405fe6:	227e      	movs	r2, #126	; 0x7e
  405fe8:	e712      	b.n	405e10 <_malloc_r+0x374>
  405fea:	687b      	ldr	r3, [r7, #4]
  405fec:	e780      	b.n	405ef0 <_malloc_r+0x454>
  405fee:	08f0      	lsrs	r0, r6, #3
  405ff0:	f106 0308 	add.w	r3, r6, #8
  405ff4:	e600      	b.n	405bf8 <_malloc_r+0x15c>
  405ff6:	bf00      	nop
  405ff8:	20401640 	.word	0x20401640
  405ffc:	00000000 	.word	0x00000000

00406000 <memchr>:
  406000:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406004:	2a10      	cmp	r2, #16
  406006:	db2b      	blt.n	406060 <memchr+0x60>
  406008:	f010 0f07 	tst.w	r0, #7
  40600c:	d008      	beq.n	406020 <memchr+0x20>
  40600e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406012:	3a01      	subs	r2, #1
  406014:	428b      	cmp	r3, r1
  406016:	d02d      	beq.n	406074 <memchr+0x74>
  406018:	f010 0f07 	tst.w	r0, #7
  40601c:	b342      	cbz	r2, 406070 <memchr+0x70>
  40601e:	d1f6      	bne.n	40600e <memchr+0xe>
  406020:	b4f0      	push	{r4, r5, r6, r7}
  406022:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406026:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40602a:	f022 0407 	bic.w	r4, r2, #7
  40602e:	f07f 0700 	mvns.w	r7, #0
  406032:	2300      	movs	r3, #0
  406034:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  406038:	3c08      	subs	r4, #8
  40603a:	ea85 0501 	eor.w	r5, r5, r1
  40603e:	ea86 0601 	eor.w	r6, r6, r1
  406042:	fa85 f547 	uadd8	r5, r5, r7
  406046:	faa3 f587 	sel	r5, r3, r7
  40604a:	fa86 f647 	uadd8	r6, r6, r7
  40604e:	faa5 f687 	sel	r6, r5, r7
  406052:	b98e      	cbnz	r6, 406078 <memchr+0x78>
  406054:	d1ee      	bne.n	406034 <memchr+0x34>
  406056:	bcf0      	pop	{r4, r5, r6, r7}
  406058:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  40605c:	f002 0207 	and.w	r2, r2, #7
  406060:	b132      	cbz	r2, 406070 <memchr+0x70>
  406062:	f810 3b01 	ldrb.w	r3, [r0], #1
  406066:	3a01      	subs	r2, #1
  406068:	ea83 0301 	eor.w	r3, r3, r1
  40606c:	b113      	cbz	r3, 406074 <memchr+0x74>
  40606e:	d1f8      	bne.n	406062 <memchr+0x62>
  406070:	2000      	movs	r0, #0
  406072:	4770      	bx	lr
  406074:	3801      	subs	r0, #1
  406076:	4770      	bx	lr
  406078:	2d00      	cmp	r5, #0
  40607a:	bf06      	itte	eq
  40607c:	4635      	moveq	r5, r6
  40607e:	3803      	subeq	r0, #3
  406080:	3807      	subne	r0, #7
  406082:	f015 0f01 	tst.w	r5, #1
  406086:	d107      	bne.n	406098 <memchr+0x98>
  406088:	3001      	adds	r0, #1
  40608a:	f415 7f80 	tst.w	r5, #256	; 0x100
  40608e:	bf02      	ittt	eq
  406090:	3001      	addeq	r0, #1
  406092:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406096:	3001      	addeq	r0, #1
  406098:	bcf0      	pop	{r4, r5, r6, r7}
  40609a:	3801      	subs	r0, #1
  40609c:	4770      	bx	lr
  40609e:	bf00      	nop

004060a0 <memcpy>:
  4060a0:	4684      	mov	ip, r0
  4060a2:	ea41 0300 	orr.w	r3, r1, r0
  4060a6:	f013 0303 	ands.w	r3, r3, #3
  4060aa:	d16d      	bne.n	406188 <memcpy+0xe8>
  4060ac:	3a40      	subs	r2, #64	; 0x40
  4060ae:	d341      	bcc.n	406134 <memcpy+0x94>
  4060b0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060b4:	f840 3b04 	str.w	r3, [r0], #4
  4060b8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060bc:	f840 3b04 	str.w	r3, [r0], #4
  4060c0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060c4:	f840 3b04 	str.w	r3, [r0], #4
  4060c8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060cc:	f840 3b04 	str.w	r3, [r0], #4
  4060d0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060d4:	f840 3b04 	str.w	r3, [r0], #4
  4060d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060dc:	f840 3b04 	str.w	r3, [r0], #4
  4060e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060e4:	f840 3b04 	str.w	r3, [r0], #4
  4060e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060ec:	f840 3b04 	str.w	r3, [r0], #4
  4060f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4060f4:	f840 3b04 	str.w	r3, [r0], #4
  4060f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4060fc:	f840 3b04 	str.w	r3, [r0], #4
  406100:	f851 3b04 	ldr.w	r3, [r1], #4
  406104:	f840 3b04 	str.w	r3, [r0], #4
  406108:	f851 3b04 	ldr.w	r3, [r1], #4
  40610c:	f840 3b04 	str.w	r3, [r0], #4
  406110:	f851 3b04 	ldr.w	r3, [r1], #4
  406114:	f840 3b04 	str.w	r3, [r0], #4
  406118:	f851 3b04 	ldr.w	r3, [r1], #4
  40611c:	f840 3b04 	str.w	r3, [r0], #4
  406120:	f851 3b04 	ldr.w	r3, [r1], #4
  406124:	f840 3b04 	str.w	r3, [r0], #4
  406128:	f851 3b04 	ldr.w	r3, [r1], #4
  40612c:	f840 3b04 	str.w	r3, [r0], #4
  406130:	3a40      	subs	r2, #64	; 0x40
  406132:	d2bd      	bcs.n	4060b0 <memcpy+0x10>
  406134:	3230      	adds	r2, #48	; 0x30
  406136:	d311      	bcc.n	40615c <memcpy+0xbc>
  406138:	f851 3b04 	ldr.w	r3, [r1], #4
  40613c:	f840 3b04 	str.w	r3, [r0], #4
  406140:	f851 3b04 	ldr.w	r3, [r1], #4
  406144:	f840 3b04 	str.w	r3, [r0], #4
  406148:	f851 3b04 	ldr.w	r3, [r1], #4
  40614c:	f840 3b04 	str.w	r3, [r0], #4
  406150:	f851 3b04 	ldr.w	r3, [r1], #4
  406154:	f840 3b04 	str.w	r3, [r0], #4
  406158:	3a10      	subs	r2, #16
  40615a:	d2ed      	bcs.n	406138 <memcpy+0x98>
  40615c:	320c      	adds	r2, #12
  40615e:	d305      	bcc.n	40616c <memcpy+0xcc>
  406160:	f851 3b04 	ldr.w	r3, [r1], #4
  406164:	f840 3b04 	str.w	r3, [r0], #4
  406168:	3a04      	subs	r2, #4
  40616a:	d2f9      	bcs.n	406160 <memcpy+0xc0>
  40616c:	3204      	adds	r2, #4
  40616e:	d008      	beq.n	406182 <memcpy+0xe2>
  406170:	07d2      	lsls	r2, r2, #31
  406172:	bf1c      	itt	ne
  406174:	f811 3b01 	ldrbne.w	r3, [r1], #1
  406178:	f800 3b01 	strbne.w	r3, [r0], #1
  40617c:	d301      	bcc.n	406182 <memcpy+0xe2>
  40617e:	880b      	ldrh	r3, [r1, #0]
  406180:	8003      	strh	r3, [r0, #0]
  406182:	4660      	mov	r0, ip
  406184:	4770      	bx	lr
  406186:	bf00      	nop
  406188:	2a08      	cmp	r2, #8
  40618a:	d313      	bcc.n	4061b4 <memcpy+0x114>
  40618c:	078b      	lsls	r3, r1, #30
  40618e:	d08d      	beq.n	4060ac <memcpy+0xc>
  406190:	f010 0303 	ands.w	r3, r0, #3
  406194:	d08a      	beq.n	4060ac <memcpy+0xc>
  406196:	f1c3 0304 	rsb	r3, r3, #4
  40619a:	1ad2      	subs	r2, r2, r3
  40619c:	07db      	lsls	r3, r3, #31
  40619e:	bf1c      	itt	ne
  4061a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4061a4:	f800 3b01 	strbne.w	r3, [r0], #1
  4061a8:	d380      	bcc.n	4060ac <memcpy+0xc>
  4061aa:	f831 3b02 	ldrh.w	r3, [r1], #2
  4061ae:	f820 3b02 	strh.w	r3, [r0], #2
  4061b2:	e77b      	b.n	4060ac <memcpy+0xc>
  4061b4:	3a04      	subs	r2, #4
  4061b6:	d3d9      	bcc.n	40616c <memcpy+0xcc>
  4061b8:	3a01      	subs	r2, #1
  4061ba:	f811 3b01 	ldrb.w	r3, [r1], #1
  4061be:	f800 3b01 	strb.w	r3, [r0], #1
  4061c2:	d2f9      	bcs.n	4061b8 <memcpy+0x118>
  4061c4:	780b      	ldrb	r3, [r1, #0]
  4061c6:	7003      	strb	r3, [r0, #0]
  4061c8:	784b      	ldrb	r3, [r1, #1]
  4061ca:	7043      	strb	r3, [r0, #1]
  4061cc:	788b      	ldrb	r3, [r1, #2]
  4061ce:	7083      	strb	r3, [r0, #2]
  4061d0:	4660      	mov	r0, ip
  4061d2:	4770      	bx	lr

004061d4 <__malloc_lock>:
  4061d4:	4801      	ldr	r0, [pc, #4]	; (4061dc <__malloc_lock+0x8>)
  4061d6:	f7ff bc5d 	b.w	405a94 <__retarget_lock_acquire_recursive>
  4061da:	bf00      	nop
  4061dc:	20401690 	.word	0x20401690

004061e0 <__malloc_unlock>:
  4061e0:	4801      	ldr	r0, [pc, #4]	; (4061e8 <__malloc_unlock+0x8>)
  4061e2:	f7ff bc59 	b.w	405a98 <__retarget_lock_release_recursive>
  4061e6:	bf00      	nop
  4061e8:	20401690 	.word	0x20401690

004061ec <_Balloc>:
  4061ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  4061ee:	b570      	push	{r4, r5, r6, lr}
  4061f0:	4605      	mov	r5, r0
  4061f2:	460c      	mov	r4, r1
  4061f4:	b14b      	cbz	r3, 40620a <_Balloc+0x1e>
  4061f6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
  4061fa:	b180      	cbz	r0, 40621e <_Balloc+0x32>
  4061fc:	6802      	ldr	r2, [r0, #0]
  4061fe:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
  406202:	2300      	movs	r3, #0
  406204:	6103      	str	r3, [r0, #16]
  406206:	60c3      	str	r3, [r0, #12]
  406208:	bd70      	pop	{r4, r5, r6, pc}
  40620a:	2221      	movs	r2, #33	; 0x21
  40620c:	2104      	movs	r1, #4
  40620e:	f000 fc65 	bl	406adc <_calloc_r>
  406212:	64e8      	str	r0, [r5, #76]	; 0x4c
  406214:	4603      	mov	r3, r0
  406216:	2800      	cmp	r0, #0
  406218:	d1ed      	bne.n	4061f6 <_Balloc+0xa>
  40621a:	2000      	movs	r0, #0
  40621c:	bd70      	pop	{r4, r5, r6, pc}
  40621e:	2101      	movs	r1, #1
  406220:	fa01 f604 	lsl.w	r6, r1, r4
  406224:	1d72      	adds	r2, r6, #5
  406226:	4628      	mov	r0, r5
  406228:	0092      	lsls	r2, r2, #2
  40622a:	f000 fc57 	bl	406adc <_calloc_r>
  40622e:	2800      	cmp	r0, #0
  406230:	d0f3      	beq.n	40621a <_Balloc+0x2e>
  406232:	6044      	str	r4, [r0, #4]
  406234:	6086      	str	r6, [r0, #8]
  406236:	e7e4      	b.n	406202 <_Balloc+0x16>

00406238 <_Bfree>:
  406238:	b131      	cbz	r1, 406248 <_Bfree+0x10>
  40623a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  40623c:	684a      	ldr	r2, [r1, #4]
  40623e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
  406242:	6008      	str	r0, [r1, #0]
  406244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  406248:	4770      	bx	lr
  40624a:	bf00      	nop

0040624c <__multadd>:
  40624c:	b5f0      	push	{r4, r5, r6, r7, lr}
  40624e:	690c      	ldr	r4, [r1, #16]
  406250:	b083      	sub	sp, #12
  406252:	460d      	mov	r5, r1
  406254:	4606      	mov	r6, r0
  406256:	f101 0e14 	add.w	lr, r1, #20
  40625a:	2700      	movs	r7, #0
  40625c:	f8de 0000 	ldr.w	r0, [lr]
  406260:	b281      	uxth	r1, r0
  406262:	fb02 3301 	mla	r3, r2, r1, r3
  406266:	0c01      	lsrs	r1, r0, #16
  406268:	0c18      	lsrs	r0, r3, #16
  40626a:	fb02 0101 	mla	r1, r2, r1, r0
  40626e:	b29b      	uxth	r3, r3
  406270:	3701      	adds	r7, #1
  406272:	eb03 4301 	add.w	r3, r3, r1, lsl #16
  406276:	42bc      	cmp	r4, r7
  406278:	f84e 3b04 	str.w	r3, [lr], #4
  40627c:	ea4f 4311 	mov.w	r3, r1, lsr #16
  406280:	dcec      	bgt.n	40625c <__multadd+0x10>
  406282:	b13b      	cbz	r3, 406294 <__multadd+0x48>
  406284:	68aa      	ldr	r2, [r5, #8]
  406286:	4294      	cmp	r4, r2
  406288:	da07      	bge.n	40629a <__multadd+0x4e>
  40628a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
  40628e:	3401      	adds	r4, #1
  406290:	6153      	str	r3, [r2, #20]
  406292:	612c      	str	r4, [r5, #16]
  406294:	4628      	mov	r0, r5
  406296:	b003      	add	sp, #12
  406298:	bdf0      	pop	{r4, r5, r6, r7, pc}
  40629a:	6869      	ldr	r1, [r5, #4]
  40629c:	9301      	str	r3, [sp, #4]
  40629e:	3101      	adds	r1, #1
  4062a0:	4630      	mov	r0, r6
  4062a2:	f7ff ffa3 	bl	4061ec <_Balloc>
  4062a6:	692a      	ldr	r2, [r5, #16]
  4062a8:	3202      	adds	r2, #2
  4062aa:	f105 010c 	add.w	r1, r5, #12
  4062ae:	4607      	mov	r7, r0
  4062b0:	0092      	lsls	r2, r2, #2
  4062b2:	300c      	adds	r0, #12
  4062b4:	f7ff fef4 	bl	4060a0 <memcpy>
  4062b8:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
  4062ba:	6869      	ldr	r1, [r5, #4]
  4062bc:	9b01      	ldr	r3, [sp, #4]
  4062be:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
  4062c2:	6028      	str	r0, [r5, #0]
  4062c4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  4062c8:	463d      	mov	r5, r7
  4062ca:	e7de      	b.n	40628a <__multadd+0x3e>

004062cc <__hi0bits>:
  4062cc:	0c02      	lsrs	r2, r0, #16
  4062ce:	0412      	lsls	r2, r2, #16
  4062d0:	4603      	mov	r3, r0
  4062d2:	b9b2      	cbnz	r2, 406302 <__hi0bits+0x36>
  4062d4:	0403      	lsls	r3, r0, #16
  4062d6:	2010      	movs	r0, #16
  4062d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
  4062dc:	bf04      	itt	eq
  4062de:	021b      	lsleq	r3, r3, #8
  4062e0:	3008      	addeq	r0, #8
  4062e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
  4062e6:	bf04      	itt	eq
  4062e8:	011b      	lsleq	r3, r3, #4
  4062ea:	3004      	addeq	r0, #4
  4062ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
  4062f0:	bf04      	itt	eq
  4062f2:	009b      	lsleq	r3, r3, #2
  4062f4:	3002      	addeq	r0, #2
  4062f6:	2b00      	cmp	r3, #0
  4062f8:	db02      	blt.n	406300 <__hi0bits+0x34>
  4062fa:	005b      	lsls	r3, r3, #1
  4062fc:	d403      	bmi.n	406306 <__hi0bits+0x3a>
  4062fe:	2020      	movs	r0, #32
  406300:	4770      	bx	lr
  406302:	2000      	movs	r0, #0
  406304:	e7e8      	b.n	4062d8 <__hi0bits+0xc>
  406306:	3001      	adds	r0, #1
  406308:	4770      	bx	lr
  40630a:	bf00      	nop

0040630c <__lo0bits>:
  40630c:	6803      	ldr	r3, [r0, #0]
  40630e:	f013 0207 	ands.w	r2, r3, #7
  406312:	4601      	mov	r1, r0
  406314:	d007      	beq.n	406326 <__lo0bits+0x1a>
  406316:	07da      	lsls	r2, r3, #31
  406318:	d421      	bmi.n	40635e <__lo0bits+0x52>
  40631a:	0798      	lsls	r0, r3, #30
  40631c:	d421      	bmi.n	406362 <__lo0bits+0x56>
  40631e:	089b      	lsrs	r3, r3, #2
  406320:	600b      	str	r3, [r1, #0]
  406322:	2002      	movs	r0, #2
  406324:	4770      	bx	lr
  406326:	b298      	uxth	r0, r3
  406328:	b198      	cbz	r0, 406352 <__lo0bits+0x46>
  40632a:	4610      	mov	r0, r2
  40632c:	f013 0fff 	tst.w	r3, #255	; 0xff
  406330:	bf04      	itt	eq
  406332:	0a1b      	lsreq	r3, r3, #8
  406334:	3008      	addeq	r0, #8
  406336:	071a      	lsls	r2, r3, #28
  406338:	bf04      	itt	eq
  40633a:	091b      	lsreq	r3, r3, #4
  40633c:	3004      	addeq	r0, #4
  40633e:	079a      	lsls	r2, r3, #30
  406340:	bf04      	itt	eq
  406342:	089b      	lsreq	r3, r3, #2
  406344:	3002      	addeq	r0, #2
  406346:	07da      	lsls	r2, r3, #31
  406348:	d407      	bmi.n	40635a <__lo0bits+0x4e>
  40634a:	085b      	lsrs	r3, r3, #1
  40634c:	d104      	bne.n	406358 <__lo0bits+0x4c>
  40634e:	2020      	movs	r0, #32
  406350:	4770      	bx	lr
  406352:	0c1b      	lsrs	r3, r3, #16
  406354:	2010      	movs	r0, #16
  406356:	e7e9      	b.n	40632c <__lo0bits+0x20>
  406358:	3001      	adds	r0, #1
  40635a:	600b      	str	r3, [r1, #0]
  40635c:	4770      	bx	lr
  40635e:	2000      	movs	r0, #0
  406360:	4770      	bx	lr
  406362:	085b      	lsrs	r3, r3, #1
  406364:	600b      	str	r3, [r1, #0]
  406366:	2001      	movs	r0, #1
  406368:	4770      	bx	lr
  40636a:	bf00      	nop

0040636c <__i2b>:
  40636c:	b510      	push	{r4, lr}
  40636e:	460c      	mov	r4, r1
  406370:	2101      	movs	r1, #1
  406372:	f7ff ff3b 	bl	4061ec <_Balloc>
  406376:	2201      	movs	r2, #1
  406378:	6144      	str	r4, [r0, #20]
  40637a:	6102      	str	r2, [r0, #16]
  40637c:	bd10      	pop	{r4, pc}
  40637e:	bf00      	nop

00406380 <__multiply>:
  406380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406384:	690c      	ldr	r4, [r1, #16]
  406386:	6915      	ldr	r5, [r2, #16]
  406388:	42ac      	cmp	r4, r5
  40638a:	b083      	sub	sp, #12
  40638c:	468b      	mov	fp, r1
  40638e:	4616      	mov	r6, r2
  406390:	da04      	bge.n	40639c <__multiply+0x1c>
  406392:	4622      	mov	r2, r4
  406394:	46b3      	mov	fp, r6
  406396:	462c      	mov	r4, r5
  406398:	460e      	mov	r6, r1
  40639a:	4615      	mov	r5, r2
  40639c:	f8db 3008 	ldr.w	r3, [fp, #8]
  4063a0:	f8db 1004 	ldr.w	r1, [fp, #4]
  4063a4:	eb04 0805 	add.w	r8, r4, r5
  4063a8:	4598      	cmp	r8, r3
  4063aa:	bfc8      	it	gt
  4063ac:	3101      	addgt	r1, #1
  4063ae:	f7ff ff1d 	bl	4061ec <_Balloc>
  4063b2:	f100 0914 	add.w	r9, r0, #20
  4063b6:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
  4063ba:	45d1      	cmp	r9, sl
  4063bc:	9000      	str	r0, [sp, #0]
  4063be:	d205      	bcs.n	4063cc <__multiply+0x4c>
  4063c0:	464b      	mov	r3, r9
  4063c2:	2100      	movs	r1, #0
  4063c4:	f843 1b04 	str.w	r1, [r3], #4
  4063c8:	459a      	cmp	sl, r3
  4063ca:	d8fb      	bhi.n	4063c4 <__multiply+0x44>
  4063cc:	f106 0c14 	add.w	ip, r6, #20
  4063d0:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
  4063d4:	f10b 0b14 	add.w	fp, fp, #20
  4063d8:	459c      	cmp	ip, r3
  4063da:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
  4063de:	d24c      	bcs.n	40647a <__multiply+0xfa>
  4063e0:	f8cd a004 	str.w	sl, [sp, #4]
  4063e4:	469a      	mov	sl, r3
  4063e6:	f8dc 5000 	ldr.w	r5, [ip]
  4063ea:	b2af      	uxth	r7, r5
  4063ec:	b1ef      	cbz	r7, 40642a <__multiply+0xaa>
  4063ee:	2100      	movs	r1, #0
  4063f0:	464d      	mov	r5, r9
  4063f2:	465e      	mov	r6, fp
  4063f4:	460c      	mov	r4, r1
  4063f6:	f856 2b04 	ldr.w	r2, [r6], #4
  4063fa:	6828      	ldr	r0, [r5, #0]
  4063fc:	b293      	uxth	r3, r2
  4063fe:	b281      	uxth	r1, r0
  406400:	fb07 1303 	mla	r3, r7, r3, r1
  406404:	0c12      	lsrs	r2, r2, #16
  406406:	0c01      	lsrs	r1, r0, #16
  406408:	4423      	add	r3, r4
  40640a:	fb07 1102 	mla	r1, r7, r2, r1
  40640e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
  406412:	b29b      	uxth	r3, r3
  406414:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  406418:	45b6      	cmp	lr, r6
  40641a:	f845 3b04 	str.w	r3, [r5], #4
  40641e:	ea4f 4411 	mov.w	r4, r1, lsr #16
  406422:	d8e8      	bhi.n	4063f6 <__multiply+0x76>
  406424:	602c      	str	r4, [r5, #0]
  406426:	f8dc 5000 	ldr.w	r5, [ip]
  40642a:	0c2d      	lsrs	r5, r5, #16
  40642c:	d01d      	beq.n	40646a <__multiply+0xea>
  40642e:	f8d9 3000 	ldr.w	r3, [r9]
  406432:	4648      	mov	r0, r9
  406434:	461c      	mov	r4, r3
  406436:	4659      	mov	r1, fp
  406438:	2200      	movs	r2, #0
  40643a:	880e      	ldrh	r6, [r1, #0]
  40643c:	0c24      	lsrs	r4, r4, #16
  40643e:	fb05 4406 	mla	r4, r5, r6, r4
  406442:	4422      	add	r2, r4
  406444:	b29b      	uxth	r3, r3
  406446:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40644a:	f840 3b04 	str.w	r3, [r0], #4
  40644e:	f851 3b04 	ldr.w	r3, [r1], #4
  406452:	6804      	ldr	r4, [r0, #0]
  406454:	0c1b      	lsrs	r3, r3, #16
  406456:	b2a6      	uxth	r6, r4
  406458:	fb05 6303 	mla	r3, r5, r3, r6
  40645c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
  406460:	458e      	cmp	lr, r1
  406462:	ea4f 4213 	mov.w	r2, r3, lsr #16
  406466:	d8e8      	bhi.n	40643a <__multiply+0xba>
  406468:	6003      	str	r3, [r0, #0]
  40646a:	f10c 0c04 	add.w	ip, ip, #4
  40646e:	45e2      	cmp	sl, ip
  406470:	f109 0904 	add.w	r9, r9, #4
  406474:	d8b7      	bhi.n	4063e6 <__multiply+0x66>
  406476:	f8dd a004 	ldr.w	sl, [sp, #4]
  40647a:	f1b8 0f00 	cmp.w	r8, #0
  40647e:	dd0b      	ble.n	406498 <__multiply+0x118>
  406480:	f85a 3c04 	ldr.w	r3, [sl, #-4]
  406484:	f1aa 0a04 	sub.w	sl, sl, #4
  406488:	b11b      	cbz	r3, 406492 <__multiply+0x112>
  40648a:	e005      	b.n	406498 <__multiply+0x118>
  40648c:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
  406490:	b913      	cbnz	r3, 406498 <__multiply+0x118>
  406492:	f1b8 0801 	subs.w	r8, r8, #1
  406496:	d1f9      	bne.n	40648c <__multiply+0x10c>
  406498:	9800      	ldr	r0, [sp, #0]
  40649a:	f8c0 8010 	str.w	r8, [r0, #16]
  40649e:	b003      	add	sp, #12
  4064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

004064a4 <__pow5mult>:
  4064a4:	f012 0303 	ands.w	r3, r2, #3
  4064a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4064ac:	4614      	mov	r4, r2
  4064ae:	4607      	mov	r7, r0
  4064b0:	d12e      	bne.n	406510 <__pow5mult+0x6c>
  4064b2:	460d      	mov	r5, r1
  4064b4:	10a4      	asrs	r4, r4, #2
  4064b6:	d01c      	beq.n	4064f2 <__pow5mult+0x4e>
  4064b8:	6cbe      	ldr	r6, [r7, #72]	; 0x48
  4064ba:	b396      	cbz	r6, 406522 <__pow5mult+0x7e>
  4064bc:	07e3      	lsls	r3, r4, #31
  4064be:	f04f 0800 	mov.w	r8, #0
  4064c2:	d406      	bmi.n	4064d2 <__pow5mult+0x2e>
  4064c4:	1064      	asrs	r4, r4, #1
  4064c6:	d014      	beq.n	4064f2 <__pow5mult+0x4e>
  4064c8:	6830      	ldr	r0, [r6, #0]
  4064ca:	b1a8      	cbz	r0, 4064f8 <__pow5mult+0x54>
  4064cc:	4606      	mov	r6, r0
  4064ce:	07e3      	lsls	r3, r4, #31
  4064d0:	d5f8      	bpl.n	4064c4 <__pow5mult+0x20>
  4064d2:	4632      	mov	r2, r6
  4064d4:	4629      	mov	r1, r5
  4064d6:	4638      	mov	r0, r7
  4064d8:	f7ff ff52 	bl	406380 <__multiply>
  4064dc:	b1b5      	cbz	r5, 40650c <__pow5mult+0x68>
  4064de:	686a      	ldr	r2, [r5, #4]
  4064e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4064e2:	1064      	asrs	r4, r4, #1
  4064e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4064e8:	6029      	str	r1, [r5, #0]
  4064ea:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  4064ee:	4605      	mov	r5, r0
  4064f0:	d1ea      	bne.n	4064c8 <__pow5mult+0x24>
  4064f2:	4628      	mov	r0, r5
  4064f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4064f8:	4632      	mov	r2, r6
  4064fa:	4631      	mov	r1, r6
  4064fc:	4638      	mov	r0, r7
  4064fe:	f7ff ff3f 	bl	406380 <__multiply>
  406502:	6030      	str	r0, [r6, #0]
  406504:	f8c0 8000 	str.w	r8, [r0]
  406508:	4606      	mov	r6, r0
  40650a:	e7e0      	b.n	4064ce <__pow5mult+0x2a>
  40650c:	4605      	mov	r5, r0
  40650e:	e7d9      	b.n	4064c4 <__pow5mult+0x20>
  406510:	1e5a      	subs	r2, r3, #1
  406512:	4d0b      	ldr	r5, [pc, #44]	; (406540 <__pow5mult+0x9c>)
  406514:	2300      	movs	r3, #0
  406516:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
  40651a:	f7ff fe97 	bl	40624c <__multadd>
  40651e:	4605      	mov	r5, r0
  406520:	e7c8      	b.n	4064b4 <__pow5mult+0x10>
  406522:	2101      	movs	r1, #1
  406524:	4638      	mov	r0, r7
  406526:	f7ff fe61 	bl	4061ec <_Balloc>
  40652a:	f240 2171 	movw	r1, #625	; 0x271
  40652e:	2201      	movs	r2, #1
  406530:	2300      	movs	r3, #0
  406532:	6141      	str	r1, [r0, #20]
  406534:	6102      	str	r2, [r0, #16]
  406536:	4606      	mov	r6, r0
  406538:	64b8      	str	r0, [r7, #72]	; 0x48
  40653a:	6003      	str	r3, [r0, #0]
  40653c:	e7be      	b.n	4064bc <__pow5mult+0x18>
  40653e:	bf00      	nop
  406540:	00408738 	.word	0x00408738

00406544 <__lshift>:
  406544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406548:	4691      	mov	r9, r2
  40654a:	690a      	ldr	r2, [r1, #16]
  40654c:	688b      	ldr	r3, [r1, #8]
  40654e:	ea4f 1469 	mov.w	r4, r9, asr #5
  406552:	eb04 0802 	add.w	r8, r4, r2
  406556:	f108 0501 	add.w	r5, r8, #1
  40655a:	429d      	cmp	r5, r3
  40655c:	460e      	mov	r6, r1
  40655e:	4607      	mov	r7, r0
  406560:	6849      	ldr	r1, [r1, #4]
  406562:	dd04      	ble.n	40656e <__lshift+0x2a>
  406564:	005b      	lsls	r3, r3, #1
  406566:	429d      	cmp	r5, r3
  406568:	f101 0101 	add.w	r1, r1, #1
  40656c:	dcfa      	bgt.n	406564 <__lshift+0x20>
  40656e:	4638      	mov	r0, r7
  406570:	f7ff fe3c 	bl	4061ec <_Balloc>
  406574:	2c00      	cmp	r4, #0
  406576:	f100 0314 	add.w	r3, r0, #20
  40657a:	dd06      	ble.n	40658a <__lshift+0x46>
  40657c:	eb03 0284 	add.w	r2, r3, r4, lsl #2
  406580:	2100      	movs	r1, #0
  406582:	f843 1b04 	str.w	r1, [r3], #4
  406586:	429a      	cmp	r2, r3
  406588:	d1fb      	bne.n	406582 <__lshift+0x3e>
  40658a:	6934      	ldr	r4, [r6, #16]
  40658c:	f106 0114 	add.w	r1, r6, #20
  406590:	f019 091f 	ands.w	r9, r9, #31
  406594:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
  406598:	d01d      	beq.n	4065d6 <__lshift+0x92>
  40659a:	f1c9 0c20 	rsb	ip, r9, #32
  40659e:	2200      	movs	r2, #0
  4065a0:	680c      	ldr	r4, [r1, #0]
  4065a2:	fa04 f409 	lsl.w	r4, r4, r9
  4065a6:	4314      	orrs	r4, r2
  4065a8:	f843 4b04 	str.w	r4, [r3], #4
  4065ac:	f851 2b04 	ldr.w	r2, [r1], #4
  4065b0:	458e      	cmp	lr, r1
  4065b2:	fa22 f20c 	lsr.w	r2, r2, ip
  4065b6:	d8f3      	bhi.n	4065a0 <__lshift+0x5c>
  4065b8:	601a      	str	r2, [r3, #0]
  4065ba:	b10a      	cbz	r2, 4065c0 <__lshift+0x7c>
  4065bc:	f108 0502 	add.w	r5, r8, #2
  4065c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  4065c2:	6872      	ldr	r2, [r6, #4]
  4065c4:	3d01      	subs	r5, #1
  4065c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
  4065ca:	6105      	str	r5, [r0, #16]
  4065cc:	6031      	str	r1, [r6, #0]
  4065ce:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
  4065d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4065d6:	3b04      	subs	r3, #4
  4065d8:	f851 2b04 	ldr.w	r2, [r1], #4
  4065dc:	f843 2f04 	str.w	r2, [r3, #4]!
  4065e0:	458e      	cmp	lr, r1
  4065e2:	d8f9      	bhi.n	4065d8 <__lshift+0x94>
  4065e4:	e7ec      	b.n	4065c0 <__lshift+0x7c>
  4065e6:	bf00      	nop

004065e8 <__mcmp>:
  4065e8:	b430      	push	{r4, r5}
  4065ea:	690b      	ldr	r3, [r1, #16]
  4065ec:	4605      	mov	r5, r0
  4065ee:	6900      	ldr	r0, [r0, #16]
  4065f0:	1ac0      	subs	r0, r0, r3
  4065f2:	d10f      	bne.n	406614 <__mcmp+0x2c>
  4065f4:	009b      	lsls	r3, r3, #2
  4065f6:	3514      	adds	r5, #20
  4065f8:	3114      	adds	r1, #20
  4065fa:	4419      	add	r1, r3
  4065fc:	442b      	add	r3, r5
  4065fe:	e001      	b.n	406604 <__mcmp+0x1c>
  406600:	429d      	cmp	r5, r3
  406602:	d207      	bcs.n	406614 <__mcmp+0x2c>
  406604:	f853 4d04 	ldr.w	r4, [r3, #-4]!
  406608:	f851 2d04 	ldr.w	r2, [r1, #-4]!
  40660c:	4294      	cmp	r4, r2
  40660e:	d0f7      	beq.n	406600 <__mcmp+0x18>
  406610:	d302      	bcc.n	406618 <__mcmp+0x30>
  406612:	2001      	movs	r0, #1
  406614:	bc30      	pop	{r4, r5}
  406616:	4770      	bx	lr
  406618:	f04f 30ff 	mov.w	r0, #4294967295
  40661c:	e7fa      	b.n	406614 <__mcmp+0x2c>
  40661e:	bf00      	nop

00406620 <__mdiff>:
  406620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406624:	690f      	ldr	r7, [r1, #16]
  406626:	460e      	mov	r6, r1
  406628:	6911      	ldr	r1, [r2, #16]
  40662a:	1a7f      	subs	r7, r7, r1
  40662c:	2f00      	cmp	r7, #0
  40662e:	4690      	mov	r8, r2
  406630:	d117      	bne.n	406662 <__mdiff+0x42>
  406632:	0089      	lsls	r1, r1, #2
  406634:	f106 0514 	add.w	r5, r6, #20
  406638:	f102 0e14 	add.w	lr, r2, #20
  40663c:	186b      	adds	r3, r5, r1
  40663e:	4471      	add	r1, lr
  406640:	e001      	b.n	406646 <__mdiff+0x26>
  406642:	429d      	cmp	r5, r3
  406644:	d25c      	bcs.n	406700 <__mdiff+0xe0>
  406646:	f853 2d04 	ldr.w	r2, [r3, #-4]!
  40664a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
  40664e:	42a2      	cmp	r2, r4
  406650:	d0f7      	beq.n	406642 <__mdiff+0x22>
  406652:	d25e      	bcs.n	406712 <__mdiff+0xf2>
  406654:	4633      	mov	r3, r6
  406656:	462c      	mov	r4, r5
  406658:	4646      	mov	r6, r8
  40665a:	4675      	mov	r5, lr
  40665c:	4698      	mov	r8, r3
  40665e:	2701      	movs	r7, #1
  406660:	e005      	b.n	40666e <__mdiff+0x4e>
  406662:	db58      	blt.n	406716 <__mdiff+0xf6>
  406664:	f106 0514 	add.w	r5, r6, #20
  406668:	f108 0414 	add.w	r4, r8, #20
  40666c:	2700      	movs	r7, #0
  40666e:	6871      	ldr	r1, [r6, #4]
  406670:	f7ff fdbc 	bl	4061ec <_Balloc>
  406674:	f8d8 3010 	ldr.w	r3, [r8, #16]
  406678:	6936      	ldr	r6, [r6, #16]
  40667a:	60c7      	str	r7, [r0, #12]
  40667c:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
  406680:	46a6      	mov	lr, r4
  406682:	eb05 0786 	add.w	r7, r5, r6, lsl #2
  406686:	f100 0414 	add.w	r4, r0, #20
  40668a:	2300      	movs	r3, #0
  40668c:	f85e 1b04 	ldr.w	r1, [lr], #4
  406690:	f855 8b04 	ldr.w	r8, [r5], #4
  406694:	b28a      	uxth	r2, r1
  406696:	fa13 f388 	uxtah	r3, r3, r8
  40669a:	0c09      	lsrs	r1, r1, #16
  40669c:	1a9a      	subs	r2, r3, r2
  40669e:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
  4066a2:	eb03 4322 	add.w	r3, r3, r2, asr #16
  4066a6:	b292      	uxth	r2, r2
  4066a8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
  4066ac:	45f4      	cmp	ip, lr
  4066ae:	f844 2b04 	str.w	r2, [r4], #4
  4066b2:	ea4f 4323 	mov.w	r3, r3, asr #16
  4066b6:	d8e9      	bhi.n	40668c <__mdiff+0x6c>
  4066b8:	42af      	cmp	r7, r5
  4066ba:	d917      	bls.n	4066ec <__mdiff+0xcc>
  4066bc:	46a4      	mov	ip, r4
  4066be:	46ae      	mov	lr, r5
  4066c0:	f85e 2b04 	ldr.w	r2, [lr], #4
  4066c4:	fa13 f382 	uxtah	r3, r3, r2
  4066c8:	1419      	asrs	r1, r3, #16
  4066ca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
  4066ce:	b29b      	uxth	r3, r3
  4066d0:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
  4066d4:	4577      	cmp	r7, lr
  4066d6:	f84c 2b04 	str.w	r2, [ip], #4
  4066da:	ea4f 4321 	mov.w	r3, r1, asr #16
  4066de:	d8ef      	bhi.n	4066c0 <__mdiff+0xa0>
  4066e0:	43ed      	mvns	r5, r5
  4066e2:	442f      	add	r7, r5
  4066e4:	f027 0703 	bic.w	r7, r7, #3
  4066e8:	3704      	adds	r7, #4
  4066ea:	443c      	add	r4, r7
  4066ec:	3c04      	subs	r4, #4
  4066ee:	b922      	cbnz	r2, 4066fa <__mdiff+0xda>
  4066f0:	f854 3d04 	ldr.w	r3, [r4, #-4]!
  4066f4:	3e01      	subs	r6, #1
  4066f6:	2b00      	cmp	r3, #0
  4066f8:	d0fa      	beq.n	4066f0 <__mdiff+0xd0>
  4066fa:	6106      	str	r6, [r0, #16]
  4066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406700:	2100      	movs	r1, #0
  406702:	f7ff fd73 	bl	4061ec <_Balloc>
  406706:	2201      	movs	r2, #1
  406708:	2300      	movs	r3, #0
  40670a:	6102      	str	r2, [r0, #16]
  40670c:	6143      	str	r3, [r0, #20]
  40670e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406712:	4674      	mov	r4, lr
  406714:	e7ab      	b.n	40666e <__mdiff+0x4e>
  406716:	4633      	mov	r3, r6
  406718:	f106 0414 	add.w	r4, r6, #20
  40671c:	f102 0514 	add.w	r5, r2, #20
  406720:	4616      	mov	r6, r2
  406722:	2701      	movs	r7, #1
  406724:	4698      	mov	r8, r3
  406726:	e7a2      	b.n	40666e <__mdiff+0x4e>

00406728 <__d2b>:
  406728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40672c:	b082      	sub	sp, #8
  40672e:	2101      	movs	r1, #1
  406730:	461c      	mov	r4, r3
  406732:	f3c3 570a 	ubfx	r7, r3, #20, #11
  406736:	4615      	mov	r5, r2
  406738:	9e08      	ldr	r6, [sp, #32]
  40673a:	f7ff fd57 	bl	4061ec <_Balloc>
  40673e:	f3c4 0413 	ubfx	r4, r4, #0, #20
  406742:	4680      	mov	r8, r0
  406744:	b10f      	cbz	r7, 40674a <__d2b+0x22>
  406746:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
  40674a:	9401      	str	r4, [sp, #4]
  40674c:	b31d      	cbz	r5, 406796 <__d2b+0x6e>
  40674e:	a802      	add	r0, sp, #8
  406750:	f840 5d08 	str.w	r5, [r0, #-8]!
  406754:	f7ff fdda 	bl	40630c <__lo0bits>
  406758:	2800      	cmp	r0, #0
  40675a:	d134      	bne.n	4067c6 <__d2b+0x9e>
  40675c:	e89d 000c 	ldmia.w	sp, {r2, r3}
  406760:	f8c8 2014 	str.w	r2, [r8, #20]
  406764:	2b00      	cmp	r3, #0
  406766:	bf0c      	ite	eq
  406768:	2101      	moveq	r1, #1
  40676a:	2102      	movne	r1, #2
  40676c:	f8c8 3018 	str.w	r3, [r8, #24]
  406770:	f8c8 1010 	str.w	r1, [r8, #16]
  406774:	b9df      	cbnz	r7, 4067ae <__d2b+0x86>
  406776:	eb08 0381 	add.w	r3, r8, r1, lsl #2
  40677a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
  40677e:	6030      	str	r0, [r6, #0]
  406780:	6918      	ldr	r0, [r3, #16]
  406782:	f7ff fda3 	bl	4062cc <__hi0bits>
  406786:	9b09      	ldr	r3, [sp, #36]	; 0x24
  406788:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
  40678c:	6018      	str	r0, [r3, #0]
  40678e:	4640      	mov	r0, r8
  406790:	b002      	add	sp, #8
  406792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  406796:	a801      	add	r0, sp, #4
  406798:	f7ff fdb8 	bl	40630c <__lo0bits>
  40679c:	9b01      	ldr	r3, [sp, #4]
  40679e:	f8c8 3014 	str.w	r3, [r8, #20]
  4067a2:	2101      	movs	r1, #1
  4067a4:	3020      	adds	r0, #32
  4067a6:	f8c8 1010 	str.w	r1, [r8, #16]
  4067aa:	2f00      	cmp	r7, #0
  4067ac:	d0e3      	beq.n	406776 <__d2b+0x4e>
  4067ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  4067b0:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
  4067b4:	4407      	add	r7, r0
  4067b6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
  4067ba:	6037      	str	r7, [r6, #0]
  4067bc:	6018      	str	r0, [r3, #0]
  4067be:	4640      	mov	r0, r8
  4067c0:	b002      	add	sp, #8
  4067c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4067c6:	e89d 000a 	ldmia.w	sp, {r1, r3}
  4067ca:	f1c0 0220 	rsb	r2, r0, #32
  4067ce:	fa03 f202 	lsl.w	r2, r3, r2
  4067d2:	430a      	orrs	r2, r1
  4067d4:	40c3      	lsrs	r3, r0
  4067d6:	9301      	str	r3, [sp, #4]
  4067d8:	f8c8 2014 	str.w	r2, [r8, #20]
  4067dc:	e7c2      	b.n	406764 <__d2b+0x3c>
  4067de:	bf00      	nop

004067e0 <_sbrk_r>:
  4067e0:	b538      	push	{r3, r4, r5, lr}
  4067e2:	4c07      	ldr	r4, [pc, #28]	; (406800 <_sbrk_r+0x20>)
  4067e4:	2300      	movs	r3, #0
  4067e6:	4605      	mov	r5, r0
  4067e8:	4608      	mov	r0, r1
  4067ea:	6023      	str	r3, [r4, #0]
  4067ec:	f7fb ffe0 	bl	4027b0 <_sbrk>
  4067f0:	1c43      	adds	r3, r0, #1
  4067f2:	d000      	beq.n	4067f6 <_sbrk_r+0x16>
  4067f4:	bd38      	pop	{r3, r4, r5, pc}
  4067f6:	6823      	ldr	r3, [r4, #0]
  4067f8:	2b00      	cmp	r3, #0
  4067fa:	d0fb      	beq.n	4067f4 <_sbrk_r+0x14>
  4067fc:	602b      	str	r3, [r5, #0]
  4067fe:	bd38      	pop	{r3, r4, r5, pc}
  406800:	204016a4 	.word	0x204016a4
	...

00406840 <strlen>:
  406840:	f890 f000 	pld	[r0]
  406844:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  406848:	f020 0107 	bic.w	r1, r0, #7
  40684c:	f06f 0c00 	mvn.w	ip, #0
  406850:	f010 0407 	ands.w	r4, r0, #7
  406854:	f891 f020 	pld	[r1, #32]
  406858:	f040 8049 	bne.w	4068ee <strlen+0xae>
  40685c:	f04f 0400 	mov.w	r4, #0
  406860:	f06f 0007 	mvn.w	r0, #7
  406864:	e9d1 2300 	ldrd	r2, r3, [r1]
  406868:	f891 f040 	pld	[r1, #64]	; 0x40
  40686c:	f100 0008 	add.w	r0, r0, #8
  406870:	fa82 f24c 	uadd8	r2, r2, ip
  406874:	faa4 f28c 	sel	r2, r4, ip
  406878:	fa83 f34c 	uadd8	r3, r3, ip
  40687c:	faa2 f38c 	sel	r3, r2, ip
  406880:	bb4b      	cbnz	r3, 4068d6 <strlen+0x96>
  406882:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  406886:	fa82 f24c 	uadd8	r2, r2, ip
  40688a:	f100 0008 	add.w	r0, r0, #8
  40688e:	faa4 f28c 	sel	r2, r4, ip
  406892:	fa83 f34c 	uadd8	r3, r3, ip
  406896:	faa2 f38c 	sel	r3, r2, ip
  40689a:	b9e3      	cbnz	r3, 4068d6 <strlen+0x96>
  40689c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  4068a0:	fa82 f24c 	uadd8	r2, r2, ip
  4068a4:	f100 0008 	add.w	r0, r0, #8
  4068a8:	faa4 f28c 	sel	r2, r4, ip
  4068ac:	fa83 f34c 	uadd8	r3, r3, ip
  4068b0:	faa2 f38c 	sel	r3, r2, ip
  4068b4:	b97b      	cbnz	r3, 4068d6 <strlen+0x96>
  4068b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  4068ba:	f101 0120 	add.w	r1, r1, #32
  4068be:	fa82 f24c 	uadd8	r2, r2, ip
  4068c2:	f100 0008 	add.w	r0, r0, #8
  4068c6:	faa4 f28c 	sel	r2, r4, ip
  4068ca:	fa83 f34c 	uadd8	r3, r3, ip
  4068ce:	faa2 f38c 	sel	r3, r2, ip
  4068d2:	2b00      	cmp	r3, #0
  4068d4:	d0c6      	beq.n	406864 <strlen+0x24>
  4068d6:	2a00      	cmp	r2, #0
  4068d8:	bf04      	itt	eq
  4068da:	3004      	addeq	r0, #4
  4068dc:	461a      	moveq	r2, r3
  4068de:	ba12      	rev	r2, r2
  4068e0:	fab2 f282 	clz	r2, r2
  4068e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  4068e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  4068ec:	4770      	bx	lr
  4068ee:	e9d1 2300 	ldrd	r2, r3, [r1]
  4068f2:	f004 0503 	and.w	r5, r4, #3
  4068f6:	f1c4 0000 	rsb	r0, r4, #0
  4068fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  4068fe:	f014 0f04 	tst.w	r4, #4
  406902:	f891 f040 	pld	[r1, #64]	; 0x40
  406906:	fa0c f505 	lsl.w	r5, ip, r5
  40690a:	ea62 0205 	orn	r2, r2, r5
  40690e:	bf1c      	itt	ne
  406910:	ea63 0305 	ornne	r3, r3, r5
  406914:	4662      	movne	r2, ip
  406916:	f04f 0400 	mov.w	r4, #0
  40691a:	e7a9      	b.n	406870 <strlen+0x30>

0040691c <__ssprint_r>:
  40691c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406920:	6893      	ldr	r3, [r2, #8]
  406922:	b083      	sub	sp, #12
  406924:	4690      	mov	r8, r2
  406926:	2b00      	cmp	r3, #0
  406928:	d070      	beq.n	406a0c <__ssprint_r+0xf0>
  40692a:	4682      	mov	sl, r0
  40692c:	460c      	mov	r4, r1
  40692e:	6817      	ldr	r7, [r2, #0]
  406930:	688d      	ldr	r5, [r1, #8]
  406932:	6808      	ldr	r0, [r1, #0]
  406934:	e042      	b.n	4069bc <__ssprint_r+0xa0>
  406936:	89a3      	ldrh	r3, [r4, #12]
  406938:	f413 6f90 	tst.w	r3, #1152	; 0x480
  40693c:	d02e      	beq.n	40699c <__ssprint_r+0x80>
  40693e:	6965      	ldr	r5, [r4, #20]
  406940:	6921      	ldr	r1, [r4, #16]
  406942:	eb05 0545 	add.w	r5, r5, r5, lsl #1
  406946:	eba0 0b01 	sub.w	fp, r0, r1
  40694a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
  40694e:	f10b 0001 	add.w	r0, fp, #1
  406952:	106d      	asrs	r5, r5, #1
  406954:	4430      	add	r0, r6
  406956:	42a8      	cmp	r0, r5
  406958:	462a      	mov	r2, r5
  40695a:	bf84      	itt	hi
  40695c:	4605      	movhi	r5, r0
  40695e:	462a      	movhi	r2, r5
  406960:	055b      	lsls	r3, r3, #21
  406962:	d538      	bpl.n	4069d6 <__ssprint_r+0xba>
  406964:	4611      	mov	r1, r2
  406966:	4650      	mov	r0, sl
  406968:	f7ff f898 	bl	405a9c <_malloc_r>
  40696c:	2800      	cmp	r0, #0
  40696e:	d03c      	beq.n	4069ea <__ssprint_r+0xce>
  406970:	465a      	mov	r2, fp
  406972:	6921      	ldr	r1, [r4, #16]
  406974:	9001      	str	r0, [sp, #4]
  406976:	f7ff fb93 	bl	4060a0 <memcpy>
  40697a:	89a2      	ldrh	r2, [r4, #12]
  40697c:	9b01      	ldr	r3, [sp, #4]
  40697e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
  406982:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  406986:	81a2      	strh	r2, [r4, #12]
  406988:	eba5 020b 	sub.w	r2, r5, fp
  40698c:	eb03 000b 	add.w	r0, r3, fp
  406990:	6165      	str	r5, [r4, #20]
  406992:	6123      	str	r3, [r4, #16]
  406994:	6020      	str	r0, [r4, #0]
  406996:	60a2      	str	r2, [r4, #8]
  406998:	4635      	mov	r5, r6
  40699a:	46b3      	mov	fp, r6
  40699c:	465a      	mov	r2, fp
  40699e:	4649      	mov	r1, r9
  4069a0:	f000 fa18 	bl	406dd4 <memmove>
  4069a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
  4069a8:	68a2      	ldr	r2, [r4, #8]
  4069aa:	6820      	ldr	r0, [r4, #0]
  4069ac:	1b55      	subs	r5, r2, r5
  4069ae:	4458      	add	r0, fp
  4069b0:	1b9e      	subs	r6, r3, r6
  4069b2:	60a5      	str	r5, [r4, #8]
  4069b4:	6020      	str	r0, [r4, #0]
  4069b6:	f8c8 6008 	str.w	r6, [r8, #8]
  4069ba:	b33e      	cbz	r6, 406a0c <__ssprint_r+0xf0>
  4069bc:	687e      	ldr	r6, [r7, #4]
  4069be:	463b      	mov	r3, r7
  4069c0:	3708      	adds	r7, #8
  4069c2:	2e00      	cmp	r6, #0
  4069c4:	d0fa      	beq.n	4069bc <__ssprint_r+0xa0>
  4069c6:	42ae      	cmp	r6, r5
  4069c8:	f8d3 9000 	ldr.w	r9, [r3]
  4069cc:	46ab      	mov	fp, r5
  4069ce:	d2b2      	bcs.n	406936 <__ssprint_r+0x1a>
  4069d0:	4635      	mov	r5, r6
  4069d2:	46b3      	mov	fp, r6
  4069d4:	e7e2      	b.n	40699c <__ssprint_r+0x80>
  4069d6:	4650      	mov	r0, sl
  4069d8:	f000 fa60 	bl	406e9c <_realloc_r>
  4069dc:	4603      	mov	r3, r0
  4069de:	2800      	cmp	r0, #0
  4069e0:	d1d2      	bne.n	406988 <__ssprint_r+0x6c>
  4069e2:	6921      	ldr	r1, [r4, #16]
  4069e4:	4650      	mov	r0, sl
  4069e6:	f000 f8f9 	bl	406bdc <_free_r>
  4069ea:	230c      	movs	r3, #12
  4069ec:	f8ca 3000 	str.w	r3, [sl]
  4069f0:	89a3      	ldrh	r3, [r4, #12]
  4069f2:	2200      	movs	r2, #0
  4069f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4069f8:	f04f 30ff 	mov.w	r0, #4294967295
  4069fc:	81a3      	strh	r3, [r4, #12]
  4069fe:	f8c8 2008 	str.w	r2, [r8, #8]
  406a02:	f8c8 2004 	str.w	r2, [r8, #4]
  406a06:	b003      	add	sp, #12
  406a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406a0c:	2000      	movs	r0, #0
  406a0e:	f8c8 0004 	str.w	r0, [r8, #4]
  406a12:	b003      	add	sp, #12
  406a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00406a18 <__register_exitproc>:
  406a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406a1c:	4d2c      	ldr	r5, [pc, #176]	; (406ad0 <__register_exitproc+0xb8>)
  406a1e:	4606      	mov	r6, r0
  406a20:	6828      	ldr	r0, [r5, #0]
  406a22:	4698      	mov	r8, r3
  406a24:	460f      	mov	r7, r1
  406a26:	4691      	mov	r9, r2
  406a28:	f7ff f834 	bl	405a94 <__retarget_lock_acquire_recursive>
  406a2c:	4b29      	ldr	r3, [pc, #164]	; (406ad4 <__register_exitproc+0xbc>)
  406a2e:	681c      	ldr	r4, [r3, #0]
  406a30:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406a34:	2b00      	cmp	r3, #0
  406a36:	d03e      	beq.n	406ab6 <__register_exitproc+0x9e>
  406a38:	685a      	ldr	r2, [r3, #4]
  406a3a:	2a1f      	cmp	r2, #31
  406a3c:	dc1c      	bgt.n	406a78 <__register_exitproc+0x60>
  406a3e:	f102 0e01 	add.w	lr, r2, #1
  406a42:	b176      	cbz	r6, 406a62 <__register_exitproc+0x4a>
  406a44:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406a48:	2401      	movs	r4, #1
  406a4a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406a4e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406a52:	4094      	lsls	r4, r2
  406a54:	4320      	orrs	r0, r4
  406a56:	2e02      	cmp	r6, #2
  406a58:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406a5c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406a60:	d023      	beq.n	406aaa <__register_exitproc+0x92>
  406a62:	3202      	adds	r2, #2
  406a64:	f8c3 e004 	str.w	lr, [r3, #4]
  406a68:	6828      	ldr	r0, [r5, #0]
  406a6a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406a6e:	f7ff f813 	bl	405a98 <__retarget_lock_release_recursive>
  406a72:	2000      	movs	r0, #0
  406a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406a78:	4b17      	ldr	r3, [pc, #92]	; (406ad8 <__register_exitproc+0xc0>)
  406a7a:	b30b      	cbz	r3, 406ac0 <__register_exitproc+0xa8>
  406a7c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406a80:	f3af 8000 	nop.w
  406a84:	4603      	mov	r3, r0
  406a86:	b1d8      	cbz	r0, 406ac0 <__register_exitproc+0xa8>
  406a88:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406a8c:	6002      	str	r2, [r0, #0]
  406a8e:	2100      	movs	r1, #0
  406a90:	6041      	str	r1, [r0, #4]
  406a92:	460a      	mov	r2, r1
  406a94:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406a98:	f04f 0e01 	mov.w	lr, #1
  406a9c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406aa0:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406aa4:	2e00      	cmp	r6, #0
  406aa6:	d0dc      	beq.n	406a62 <__register_exitproc+0x4a>
  406aa8:	e7cc      	b.n	406a44 <__register_exitproc+0x2c>
  406aaa:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406aae:	430c      	orrs	r4, r1
  406ab0:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406ab4:	e7d5      	b.n	406a62 <__register_exitproc+0x4a>
  406ab6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406aba:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406abe:	e7bb      	b.n	406a38 <__register_exitproc+0x20>
  406ac0:	6828      	ldr	r0, [r5, #0]
  406ac2:	f7fe ffe9 	bl	405a98 <__retarget_lock_release_recursive>
  406ac6:	f04f 30ff 	mov.w	r0, #4294967295
  406aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406ace:	bf00      	nop
  406ad0:	20400e28 	.word	0x20400e28
  406ad4:	004085d0 	.word	0x004085d0
  406ad8:	00000000 	.word	0x00000000

00406adc <_calloc_r>:
  406adc:	b510      	push	{r4, lr}
  406ade:	fb02 f101 	mul.w	r1, r2, r1
  406ae2:	f7fe ffdb 	bl	405a9c <_malloc_r>
  406ae6:	4604      	mov	r4, r0
  406ae8:	b1d8      	cbz	r0, 406b22 <_calloc_r+0x46>
  406aea:	f850 2c04 	ldr.w	r2, [r0, #-4]
  406aee:	f022 0203 	bic.w	r2, r2, #3
  406af2:	3a04      	subs	r2, #4
  406af4:	2a24      	cmp	r2, #36	; 0x24
  406af6:	d818      	bhi.n	406b2a <_calloc_r+0x4e>
  406af8:	2a13      	cmp	r2, #19
  406afa:	d914      	bls.n	406b26 <_calloc_r+0x4a>
  406afc:	2300      	movs	r3, #0
  406afe:	2a1b      	cmp	r2, #27
  406b00:	6003      	str	r3, [r0, #0]
  406b02:	6043      	str	r3, [r0, #4]
  406b04:	d916      	bls.n	406b34 <_calloc_r+0x58>
  406b06:	2a24      	cmp	r2, #36	; 0x24
  406b08:	6083      	str	r3, [r0, #8]
  406b0a:	60c3      	str	r3, [r0, #12]
  406b0c:	bf11      	iteee	ne
  406b0e:	f100 0210 	addne.w	r2, r0, #16
  406b12:	6103      	streq	r3, [r0, #16]
  406b14:	6143      	streq	r3, [r0, #20]
  406b16:	f100 0218 	addeq.w	r2, r0, #24
  406b1a:	2300      	movs	r3, #0
  406b1c:	6013      	str	r3, [r2, #0]
  406b1e:	6053      	str	r3, [r2, #4]
  406b20:	6093      	str	r3, [r2, #8]
  406b22:	4620      	mov	r0, r4
  406b24:	bd10      	pop	{r4, pc}
  406b26:	4602      	mov	r2, r0
  406b28:	e7f7      	b.n	406b1a <_calloc_r+0x3e>
  406b2a:	2100      	movs	r1, #0
  406b2c:	f7fc fd18 	bl	403560 <memset>
  406b30:	4620      	mov	r0, r4
  406b32:	bd10      	pop	{r4, pc}
  406b34:	f100 0208 	add.w	r2, r0, #8
  406b38:	e7ef      	b.n	406b1a <_calloc_r+0x3e>
  406b3a:	bf00      	nop

00406b3c <_malloc_trim_r>:
  406b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  406b3e:	4f24      	ldr	r7, [pc, #144]	; (406bd0 <_malloc_trim_r+0x94>)
  406b40:	460c      	mov	r4, r1
  406b42:	4606      	mov	r6, r0
  406b44:	f7ff fb46 	bl	4061d4 <__malloc_lock>
  406b48:	68bb      	ldr	r3, [r7, #8]
  406b4a:	685d      	ldr	r5, [r3, #4]
  406b4c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  406b50:	310f      	adds	r1, #15
  406b52:	f025 0503 	bic.w	r5, r5, #3
  406b56:	4429      	add	r1, r5
  406b58:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  406b5c:	f021 010f 	bic.w	r1, r1, #15
  406b60:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  406b64:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  406b68:	db07      	blt.n	406b7a <_malloc_trim_r+0x3e>
  406b6a:	2100      	movs	r1, #0
  406b6c:	4630      	mov	r0, r6
  406b6e:	f7ff fe37 	bl	4067e0 <_sbrk_r>
  406b72:	68bb      	ldr	r3, [r7, #8]
  406b74:	442b      	add	r3, r5
  406b76:	4298      	cmp	r0, r3
  406b78:	d004      	beq.n	406b84 <_malloc_trim_r+0x48>
  406b7a:	4630      	mov	r0, r6
  406b7c:	f7ff fb30 	bl	4061e0 <__malloc_unlock>
  406b80:	2000      	movs	r0, #0
  406b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406b84:	4261      	negs	r1, r4
  406b86:	4630      	mov	r0, r6
  406b88:	f7ff fe2a 	bl	4067e0 <_sbrk_r>
  406b8c:	3001      	adds	r0, #1
  406b8e:	d00d      	beq.n	406bac <_malloc_trim_r+0x70>
  406b90:	4b10      	ldr	r3, [pc, #64]	; (406bd4 <_malloc_trim_r+0x98>)
  406b92:	68ba      	ldr	r2, [r7, #8]
  406b94:	6819      	ldr	r1, [r3, #0]
  406b96:	1b2d      	subs	r5, r5, r4
  406b98:	f045 0501 	orr.w	r5, r5, #1
  406b9c:	4630      	mov	r0, r6
  406b9e:	1b09      	subs	r1, r1, r4
  406ba0:	6055      	str	r5, [r2, #4]
  406ba2:	6019      	str	r1, [r3, #0]
  406ba4:	f7ff fb1c 	bl	4061e0 <__malloc_unlock>
  406ba8:	2001      	movs	r0, #1
  406baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406bac:	2100      	movs	r1, #0
  406bae:	4630      	mov	r0, r6
  406bb0:	f7ff fe16 	bl	4067e0 <_sbrk_r>
  406bb4:	68ba      	ldr	r2, [r7, #8]
  406bb6:	1a83      	subs	r3, r0, r2
  406bb8:	2b0f      	cmp	r3, #15
  406bba:	ddde      	ble.n	406b7a <_malloc_trim_r+0x3e>
  406bbc:	4c06      	ldr	r4, [pc, #24]	; (406bd8 <_malloc_trim_r+0x9c>)
  406bbe:	4905      	ldr	r1, [pc, #20]	; (406bd4 <_malloc_trim_r+0x98>)
  406bc0:	6824      	ldr	r4, [r4, #0]
  406bc2:	f043 0301 	orr.w	r3, r3, #1
  406bc6:	1b00      	subs	r0, r0, r4
  406bc8:	6053      	str	r3, [r2, #4]
  406bca:	6008      	str	r0, [r1, #0]
  406bcc:	e7d5      	b.n	406b7a <_malloc_trim_r+0x3e>
  406bce:	bf00      	nop
  406bd0:	20400e2c 	.word	0x20400e2c
  406bd4:	20401640 	.word	0x20401640
  406bd8:	20401234 	.word	0x20401234

00406bdc <_free_r>:
  406bdc:	2900      	cmp	r1, #0
  406bde:	d044      	beq.n	406c6a <_free_r+0x8e>
  406be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  406be4:	460d      	mov	r5, r1
  406be6:	4680      	mov	r8, r0
  406be8:	f7ff faf4 	bl	4061d4 <__malloc_lock>
  406bec:	f855 7c04 	ldr.w	r7, [r5, #-4]
  406bf0:	4969      	ldr	r1, [pc, #420]	; (406d98 <_free_r+0x1bc>)
  406bf2:	f027 0301 	bic.w	r3, r7, #1
  406bf6:	f1a5 0408 	sub.w	r4, r5, #8
  406bfa:	18e2      	adds	r2, r4, r3
  406bfc:	688e      	ldr	r6, [r1, #8]
  406bfe:	6850      	ldr	r0, [r2, #4]
  406c00:	42b2      	cmp	r2, r6
  406c02:	f020 0003 	bic.w	r0, r0, #3
  406c06:	d05e      	beq.n	406cc6 <_free_r+0xea>
  406c08:	07fe      	lsls	r6, r7, #31
  406c0a:	6050      	str	r0, [r2, #4]
  406c0c:	d40b      	bmi.n	406c26 <_free_r+0x4a>
  406c0e:	f855 7c08 	ldr.w	r7, [r5, #-8]
  406c12:	1be4      	subs	r4, r4, r7
  406c14:	f101 0e08 	add.w	lr, r1, #8
  406c18:	68a5      	ldr	r5, [r4, #8]
  406c1a:	4575      	cmp	r5, lr
  406c1c:	443b      	add	r3, r7
  406c1e:	d06d      	beq.n	406cfc <_free_r+0x120>
  406c20:	68e7      	ldr	r7, [r4, #12]
  406c22:	60ef      	str	r7, [r5, #12]
  406c24:	60bd      	str	r5, [r7, #8]
  406c26:	1815      	adds	r5, r2, r0
  406c28:	686d      	ldr	r5, [r5, #4]
  406c2a:	07ed      	lsls	r5, r5, #31
  406c2c:	d53e      	bpl.n	406cac <_free_r+0xd0>
  406c2e:	f043 0201 	orr.w	r2, r3, #1
  406c32:	6062      	str	r2, [r4, #4]
  406c34:	50e3      	str	r3, [r4, r3]
  406c36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  406c3a:	d217      	bcs.n	406c6c <_free_r+0x90>
  406c3c:	08db      	lsrs	r3, r3, #3
  406c3e:	1c58      	adds	r0, r3, #1
  406c40:	109a      	asrs	r2, r3, #2
  406c42:	684d      	ldr	r5, [r1, #4]
  406c44:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  406c48:	60a7      	str	r7, [r4, #8]
  406c4a:	2301      	movs	r3, #1
  406c4c:	4093      	lsls	r3, r2
  406c4e:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  406c52:	432b      	orrs	r3, r5
  406c54:	3a08      	subs	r2, #8
  406c56:	60e2      	str	r2, [r4, #12]
  406c58:	604b      	str	r3, [r1, #4]
  406c5a:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  406c5e:	60fc      	str	r4, [r7, #12]
  406c60:	4640      	mov	r0, r8
  406c62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406c66:	f7ff babb 	b.w	4061e0 <__malloc_unlock>
  406c6a:	4770      	bx	lr
  406c6c:	0a5a      	lsrs	r2, r3, #9
  406c6e:	2a04      	cmp	r2, #4
  406c70:	d852      	bhi.n	406d18 <_free_r+0x13c>
  406c72:	099a      	lsrs	r2, r3, #6
  406c74:	f102 0739 	add.w	r7, r2, #57	; 0x39
  406c78:	00ff      	lsls	r7, r7, #3
  406c7a:	f102 0538 	add.w	r5, r2, #56	; 0x38
  406c7e:	19c8      	adds	r0, r1, r7
  406c80:	59ca      	ldr	r2, [r1, r7]
  406c82:	3808      	subs	r0, #8
  406c84:	4290      	cmp	r0, r2
  406c86:	d04f      	beq.n	406d28 <_free_r+0x14c>
  406c88:	6851      	ldr	r1, [r2, #4]
  406c8a:	f021 0103 	bic.w	r1, r1, #3
  406c8e:	428b      	cmp	r3, r1
  406c90:	d232      	bcs.n	406cf8 <_free_r+0x11c>
  406c92:	6892      	ldr	r2, [r2, #8]
  406c94:	4290      	cmp	r0, r2
  406c96:	d1f7      	bne.n	406c88 <_free_r+0xac>
  406c98:	68c3      	ldr	r3, [r0, #12]
  406c9a:	60a0      	str	r0, [r4, #8]
  406c9c:	60e3      	str	r3, [r4, #12]
  406c9e:	609c      	str	r4, [r3, #8]
  406ca0:	60c4      	str	r4, [r0, #12]
  406ca2:	4640      	mov	r0, r8
  406ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406ca8:	f7ff ba9a 	b.w	4061e0 <__malloc_unlock>
  406cac:	6895      	ldr	r5, [r2, #8]
  406cae:	4f3b      	ldr	r7, [pc, #236]	; (406d9c <_free_r+0x1c0>)
  406cb0:	42bd      	cmp	r5, r7
  406cb2:	4403      	add	r3, r0
  406cb4:	d040      	beq.n	406d38 <_free_r+0x15c>
  406cb6:	68d0      	ldr	r0, [r2, #12]
  406cb8:	60e8      	str	r0, [r5, #12]
  406cba:	f043 0201 	orr.w	r2, r3, #1
  406cbe:	6085      	str	r5, [r0, #8]
  406cc0:	6062      	str	r2, [r4, #4]
  406cc2:	50e3      	str	r3, [r4, r3]
  406cc4:	e7b7      	b.n	406c36 <_free_r+0x5a>
  406cc6:	07ff      	lsls	r7, r7, #31
  406cc8:	4403      	add	r3, r0
  406cca:	d407      	bmi.n	406cdc <_free_r+0x100>
  406ccc:	f855 2c08 	ldr.w	r2, [r5, #-8]
  406cd0:	1aa4      	subs	r4, r4, r2
  406cd2:	4413      	add	r3, r2
  406cd4:	68a0      	ldr	r0, [r4, #8]
  406cd6:	68e2      	ldr	r2, [r4, #12]
  406cd8:	60c2      	str	r2, [r0, #12]
  406cda:	6090      	str	r0, [r2, #8]
  406cdc:	4a30      	ldr	r2, [pc, #192]	; (406da0 <_free_r+0x1c4>)
  406cde:	6812      	ldr	r2, [r2, #0]
  406ce0:	f043 0001 	orr.w	r0, r3, #1
  406ce4:	4293      	cmp	r3, r2
  406ce6:	6060      	str	r0, [r4, #4]
  406ce8:	608c      	str	r4, [r1, #8]
  406cea:	d3b9      	bcc.n	406c60 <_free_r+0x84>
  406cec:	4b2d      	ldr	r3, [pc, #180]	; (406da4 <_free_r+0x1c8>)
  406cee:	4640      	mov	r0, r8
  406cf0:	6819      	ldr	r1, [r3, #0]
  406cf2:	f7ff ff23 	bl	406b3c <_malloc_trim_r>
  406cf6:	e7b3      	b.n	406c60 <_free_r+0x84>
  406cf8:	4610      	mov	r0, r2
  406cfa:	e7cd      	b.n	406c98 <_free_r+0xbc>
  406cfc:	1811      	adds	r1, r2, r0
  406cfe:	6849      	ldr	r1, [r1, #4]
  406d00:	07c9      	lsls	r1, r1, #31
  406d02:	d444      	bmi.n	406d8e <_free_r+0x1b2>
  406d04:	6891      	ldr	r1, [r2, #8]
  406d06:	68d2      	ldr	r2, [r2, #12]
  406d08:	60ca      	str	r2, [r1, #12]
  406d0a:	4403      	add	r3, r0
  406d0c:	f043 0001 	orr.w	r0, r3, #1
  406d10:	6091      	str	r1, [r2, #8]
  406d12:	6060      	str	r0, [r4, #4]
  406d14:	50e3      	str	r3, [r4, r3]
  406d16:	e7a3      	b.n	406c60 <_free_r+0x84>
  406d18:	2a14      	cmp	r2, #20
  406d1a:	d816      	bhi.n	406d4a <_free_r+0x16e>
  406d1c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  406d20:	00ff      	lsls	r7, r7, #3
  406d22:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  406d26:	e7aa      	b.n	406c7e <_free_r+0xa2>
  406d28:	10aa      	asrs	r2, r5, #2
  406d2a:	2301      	movs	r3, #1
  406d2c:	684d      	ldr	r5, [r1, #4]
  406d2e:	4093      	lsls	r3, r2
  406d30:	432b      	orrs	r3, r5
  406d32:	604b      	str	r3, [r1, #4]
  406d34:	4603      	mov	r3, r0
  406d36:	e7b0      	b.n	406c9a <_free_r+0xbe>
  406d38:	f043 0201 	orr.w	r2, r3, #1
  406d3c:	614c      	str	r4, [r1, #20]
  406d3e:	610c      	str	r4, [r1, #16]
  406d40:	60e5      	str	r5, [r4, #12]
  406d42:	60a5      	str	r5, [r4, #8]
  406d44:	6062      	str	r2, [r4, #4]
  406d46:	50e3      	str	r3, [r4, r3]
  406d48:	e78a      	b.n	406c60 <_free_r+0x84>
  406d4a:	2a54      	cmp	r2, #84	; 0x54
  406d4c:	d806      	bhi.n	406d5c <_free_r+0x180>
  406d4e:	0b1a      	lsrs	r2, r3, #12
  406d50:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  406d54:	00ff      	lsls	r7, r7, #3
  406d56:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  406d5a:	e790      	b.n	406c7e <_free_r+0xa2>
  406d5c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  406d60:	d806      	bhi.n	406d70 <_free_r+0x194>
  406d62:	0bda      	lsrs	r2, r3, #15
  406d64:	f102 0778 	add.w	r7, r2, #120	; 0x78
  406d68:	00ff      	lsls	r7, r7, #3
  406d6a:	f102 0577 	add.w	r5, r2, #119	; 0x77
  406d6e:	e786      	b.n	406c7e <_free_r+0xa2>
  406d70:	f240 5054 	movw	r0, #1364	; 0x554
  406d74:	4282      	cmp	r2, r0
  406d76:	d806      	bhi.n	406d86 <_free_r+0x1aa>
  406d78:	0c9a      	lsrs	r2, r3, #18
  406d7a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  406d7e:	00ff      	lsls	r7, r7, #3
  406d80:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  406d84:	e77b      	b.n	406c7e <_free_r+0xa2>
  406d86:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  406d8a:	257e      	movs	r5, #126	; 0x7e
  406d8c:	e777      	b.n	406c7e <_free_r+0xa2>
  406d8e:	f043 0101 	orr.w	r1, r3, #1
  406d92:	6061      	str	r1, [r4, #4]
  406d94:	6013      	str	r3, [r2, #0]
  406d96:	e763      	b.n	406c60 <_free_r+0x84>
  406d98:	20400e2c 	.word	0x20400e2c
  406d9c:	20400e34 	.word	0x20400e34
  406da0:	20401238 	.word	0x20401238
  406da4:	20401670 	.word	0x20401670

00406da8 <__ascii_mbtowc>:
  406da8:	b082      	sub	sp, #8
  406daa:	b149      	cbz	r1, 406dc0 <__ascii_mbtowc+0x18>
  406dac:	b15a      	cbz	r2, 406dc6 <__ascii_mbtowc+0x1e>
  406dae:	b16b      	cbz	r3, 406dcc <__ascii_mbtowc+0x24>
  406db0:	7813      	ldrb	r3, [r2, #0]
  406db2:	600b      	str	r3, [r1, #0]
  406db4:	7812      	ldrb	r2, [r2, #0]
  406db6:	1c10      	adds	r0, r2, #0
  406db8:	bf18      	it	ne
  406dba:	2001      	movne	r0, #1
  406dbc:	b002      	add	sp, #8
  406dbe:	4770      	bx	lr
  406dc0:	a901      	add	r1, sp, #4
  406dc2:	2a00      	cmp	r2, #0
  406dc4:	d1f3      	bne.n	406dae <__ascii_mbtowc+0x6>
  406dc6:	4610      	mov	r0, r2
  406dc8:	b002      	add	sp, #8
  406dca:	4770      	bx	lr
  406dcc:	f06f 0001 	mvn.w	r0, #1
  406dd0:	e7f4      	b.n	406dbc <__ascii_mbtowc+0x14>
  406dd2:	bf00      	nop

00406dd4 <memmove>:
  406dd4:	4288      	cmp	r0, r1
  406dd6:	b5f0      	push	{r4, r5, r6, r7, lr}
  406dd8:	d90d      	bls.n	406df6 <memmove+0x22>
  406dda:	188b      	adds	r3, r1, r2
  406ddc:	4298      	cmp	r0, r3
  406dde:	d20a      	bcs.n	406df6 <memmove+0x22>
  406de0:	1884      	adds	r4, r0, r2
  406de2:	2a00      	cmp	r2, #0
  406de4:	d051      	beq.n	406e8a <memmove+0xb6>
  406de6:	4622      	mov	r2, r4
  406de8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406dec:	f802 4d01 	strb.w	r4, [r2, #-1]!
  406df0:	4299      	cmp	r1, r3
  406df2:	d1f9      	bne.n	406de8 <memmove+0x14>
  406df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406df6:	2a0f      	cmp	r2, #15
  406df8:	d948      	bls.n	406e8c <memmove+0xb8>
  406dfa:	ea41 0300 	orr.w	r3, r1, r0
  406dfe:	079b      	lsls	r3, r3, #30
  406e00:	d146      	bne.n	406e90 <memmove+0xbc>
  406e02:	f100 0410 	add.w	r4, r0, #16
  406e06:	f101 0310 	add.w	r3, r1, #16
  406e0a:	4615      	mov	r5, r2
  406e0c:	f853 6c10 	ldr.w	r6, [r3, #-16]
  406e10:	f844 6c10 	str.w	r6, [r4, #-16]
  406e14:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406e18:	f844 6c0c 	str.w	r6, [r4, #-12]
  406e1c:	f853 6c08 	ldr.w	r6, [r3, #-8]
  406e20:	f844 6c08 	str.w	r6, [r4, #-8]
  406e24:	3d10      	subs	r5, #16
  406e26:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406e2a:	f844 6c04 	str.w	r6, [r4, #-4]
  406e2e:	2d0f      	cmp	r5, #15
  406e30:	f103 0310 	add.w	r3, r3, #16
  406e34:	f104 0410 	add.w	r4, r4, #16
  406e38:	d8e8      	bhi.n	406e0c <memmove+0x38>
  406e3a:	f1a2 0310 	sub.w	r3, r2, #16
  406e3e:	f023 030f 	bic.w	r3, r3, #15
  406e42:	f002 0e0f 	and.w	lr, r2, #15
  406e46:	3310      	adds	r3, #16
  406e48:	f1be 0f03 	cmp.w	lr, #3
  406e4c:	4419      	add	r1, r3
  406e4e:	4403      	add	r3, r0
  406e50:	d921      	bls.n	406e96 <memmove+0xc2>
  406e52:	1f1e      	subs	r6, r3, #4
  406e54:	460d      	mov	r5, r1
  406e56:	4674      	mov	r4, lr
  406e58:	3c04      	subs	r4, #4
  406e5a:	f855 7b04 	ldr.w	r7, [r5], #4
  406e5e:	f846 7f04 	str.w	r7, [r6, #4]!
  406e62:	2c03      	cmp	r4, #3
  406e64:	d8f8      	bhi.n	406e58 <memmove+0x84>
  406e66:	f1ae 0404 	sub.w	r4, lr, #4
  406e6a:	f024 0403 	bic.w	r4, r4, #3
  406e6e:	3404      	adds	r4, #4
  406e70:	4421      	add	r1, r4
  406e72:	4423      	add	r3, r4
  406e74:	f002 0203 	and.w	r2, r2, #3
  406e78:	b162      	cbz	r2, 406e94 <memmove+0xc0>
  406e7a:	3b01      	subs	r3, #1
  406e7c:	440a      	add	r2, r1
  406e7e:	f811 4b01 	ldrb.w	r4, [r1], #1
  406e82:	f803 4f01 	strb.w	r4, [r3, #1]!
  406e86:	428a      	cmp	r2, r1
  406e88:	d1f9      	bne.n	406e7e <memmove+0xaa>
  406e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e8c:	4603      	mov	r3, r0
  406e8e:	e7f3      	b.n	406e78 <memmove+0xa4>
  406e90:	4603      	mov	r3, r0
  406e92:	e7f2      	b.n	406e7a <memmove+0xa6>
  406e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406e96:	4672      	mov	r2, lr
  406e98:	e7ee      	b.n	406e78 <memmove+0xa4>
  406e9a:	bf00      	nop

00406e9c <_realloc_r>:
  406e9c:	2900      	cmp	r1, #0
  406e9e:	f000 8095 	beq.w	406fcc <_realloc_r+0x130>
  406ea2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  406ea6:	460d      	mov	r5, r1
  406ea8:	4616      	mov	r6, r2
  406eaa:	b083      	sub	sp, #12
  406eac:	4680      	mov	r8, r0
  406eae:	f106 070b 	add.w	r7, r6, #11
  406eb2:	f7ff f98f 	bl	4061d4 <__malloc_lock>
  406eb6:	f855 ec04 	ldr.w	lr, [r5, #-4]
  406eba:	2f16      	cmp	r7, #22
  406ebc:	f02e 0403 	bic.w	r4, lr, #3
  406ec0:	f1a5 0908 	sub.w	r9, r5, #8
  406ec4:	d83c      	bhi.n	406f40 <_realloc_r+0xa4>
  406ec6:	2210      	movs	r2, #16
  406ec8:	4617      	mov	r7, r2
  406eca:	42be      	cmp	r6, r7
  406ecc:	d83d      	bhi.n	406f4a <_realloc_r+0xae>
  406ece:	4294      	cmp	r4, r2
  406ed0:	da43      	bge.n	406f5a <_realloc_r+0xbe>
  406ed2:	4bc4      	ldr	r3, [pc, #784]	; (4071e4 <_realloc_r+0x348>)
  406ed4:	6899      	ldr	r1, [r3, #8]
  406ed6:	eb09 0004 	add.w	r0, r9, r4
  406eda:	4288      	cmp	r0, r1
  406edc:	f000 80b4 	beq.w	407048 <_realloc_r+0x1ac>
  406ee0:	6843      	ldr	r3, [r0, #4]
  406ee2:	f023 0101 	bic.w	r1, r3, #1
  406ee6:	4401      	add	r1, r0
  406ee8:	6849      	ldr	r1, [r1, #4]
  406eea:	07c9      	lsls	r1, r1, #31
  406eec:	d54c      	bpl.n	406f88 <_realloc_r+0xec>
  406eee:	f01e 0f01 	tst.w	lr, #1
  406ef2:	f000 809b 	beq.w	40702c <_realloc_r+0x190>
  406ef6:	4631      	mov	r1, r6
  406ef8:	4640      	mov	r0, r8
  406efa:	f7fe fdcf 	bl	405a9c <_malloc_r>
  406efe:	4606      	mov	r6, r0
  406f00:	2800      	cmp	r0, #0
  406f02:	d03a      	beq.n	406f7a <_realloc_r+0xde>
  406f04:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406f08:	f023 0301 	bic.w	r3, r3, #1
  406f0c:	444b      	add	r3, r9
  406f0e:	f1a0 0208 	sub.w	r2, r0, #8
  406f12:	429a      	cmp	r2, r3
  406f14:	f000 8121 	beq.w	40715a <_realloc_r+0x2be>
  406f18:	1f22      	subs	r2, r4, #4
  406f1a:	2a24      	cmp	r2, #36	; 0x24
  406f1c:	f200 8107 	bhi.w	40712e <_realloc_r+0x292>
  406f20:	2a13      	cmp	r2, #19
  406f22:	f200 80db 	bhi.w	4070dc <_realloc_r+0x240>
  406f26:	4603      	mov	r3, r0
  406f28:	462a      	mov	r2, r5
  406f2a:	6811      	ldr	r1, [r2, #0]
  406f2c:	6019      	str	r1, [r3, #0]
  406f2e:	6851      	ldr	r1, [r2, #4]
  406f30:	6059      	str	r1, [r3, #4]
  406f32:	6892      	ldr	r2, [r2, #8]
  406f34:	609a      	str	r2, [r3, #8]
  406f36:	4629      	mov	r1, r5
  406f38:	4640      	mov	r0, r8
  406f3a:	f7ff fe4f 	bl	406bdc <_free_r>
  406f3e:	e01c      	b.n	406f7a <_realloc_r+0xde>
  406f40:	f027 0707 	bic.w	r7, r7, #7
  406f44:	2f00      	cmp	r7, #0
  406f46:	463a      	mov	r2, r7
  406f48:	dabf      	bge.n	406eca <_realloc_r+0x2e>
  406f4a:	2600      	movs	r6, #0
  406f4c:	230c      	movs	r3, #12
  406f4e:	4630      	mov	r0, r6
  406f50:	f8c8 3000 	str.w	r3, [r8]
  406f54:	b003      	add	sp, #12
  406f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f5a:	462e      	mov	r6, r5
  406f5c:	1be3      	subs	r3, r4, r7
  406f5e:	2b0f      	cmp	r3, #15
  406f60:	d81e      	bhi.n	406fa0 <_realloc_r+0x104>
  406f62:	f8d9 3004 	ldr.w	r3, [r9, #4]
  406f66:	f003 0301 	and.w	r3, r3, #1
  406f6a:	4323      	orrs	r3, r4
  406f6c:	444c      	add	r4, r9
  406f6e:	f8c9 3004 	str.w	r3, [r9, #4]
  406f72:	6863      	ldr	r3, [r4, #4]
  406f74:	f043 0301 	orr.w	r3, r3, #1
  406f78:	6063      	str	r3, [r4, #4]
  406f7a:	4640      	mov	r0, r8
  406f7c:	f7ff f930 	bl	4061e0 <__malloc_unlock>
  406f80:	4630      	mov	r0, r6
  406f82:	b003      	add	sp, #12
  406f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406f88:	f023 0303 	bic.w	r3, r3, #3
  406f8c:	18e1      	adds	r1, r4, r3
  406f8e:	4291      	cmp	r1, r2
  406f90:	db1f      	blt.n	406fd2 <_realloc_r+0x136>
  406f92:	68c3      	ldr	r3, [r0, #12]
  406f94:	6882      	ldr	r2, [r0, #8]
  406f96:	462e      	mov	r6, r5
  406f98:	60d3      	str	r3, [r2, #12]
  406f9a:	460c      	mov	r4, r1
  406f9c:	609a      	str	r2, [r3, #8]
  406f9e:	e7dd      	b.n	406f5c <_realloc_r+0xc0>
  406fa0:	f8d9 2004 	ldr.w	r2, [r9, #4]
  406fa4:	eb09 0107 	add.w	r1, r9, r7
  406fa8:	f002 0201 	and.w	r2, r2, #1
  406fac:	444c      	add	r4, r9
  406fae:	f043 0301 	orr.w	r3, r3, #1
  406fb2:	4317      	orrs	r7, r2
  406fb4:	f8c9 7004 	str.w	r7, [r9, #4]
  406fb8:	604b      	str	r3, [r1, #4]
  406fba:	6863      	ldr	r3, [r4, #4]
  406fbc:	f043 0301 	orr.w	r3, r3, #1
  406fc0:	3108      	adds	r1, #8
  406fc2:	6063      	str	r3, [r4, #4]
  406fc4:	4640      	mov	r0, r8
  406fc6:	f7ff fe09 	bl	406bdc <_free_r>
  406fca:	e7d6      	b.n	406f7a <_realloc_r+0xde>
  406fcc:	4611      	mov	r1, r2
  406fce:	f7fe bd65 	b.w	405a9c <_malloc_r>
  406fd2:	f01e 0f01 	tst.w	lr, #1
  406fd6:	d18e      	bne.n	406ef6 <_realloc_r+0x5a>
  406fd8:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406fdc:	eba9 0a01 	sub.w	sl, r9, r1
  406fe0:	f8da 1004 	ldr.w	r1, [sl, #4]
  406fe4:	f021 0103 	bic.w	r1, r1, #3
  406fe8:	440b      	add	r3, r1
  406fea:	4423      	add	r3, r4
  406fec:	4293      	cmp	r3, r2
  406fee:	db25      	blt.n	40703c <_realloc_r+0x1a0>
  406ff0:	68c2      	ldr	r2, [r0, #12]
  406ff2:	6881      	ldr	r1, [r0, #8]
  406ff4:	4656      	mov	r6, sl
  406ff6:	60ca      	str	r2, [r1, #12]
  406ff8:	6091      	str	r1, [r2, #8]
  406ffa:	f8da 100c 	ldr.w	r1, [sl, #12]
  406ffe:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407002:	1f22      	subs	r2, r4, #4
  407004:	2a24      	cmp	r2, #36	; 0x24
  407006:	60c1      	str	r1, [r0, #12]
  407008:	6088      	str	r0, [r1, #8]
  40700a:	f200 8094 	bhi.w	407136 <_realloc_r+0x29a>
  40700e:	2a13      	cmp	r2, #19
  407010:	d96f      	bls.n	4070f2 <_realloc_r+0x256>
  407012:	6829      	ldr	r1, [r5, #0]
  407014:	f8ca 1008 	str.w	r1, [sl, #8]
  407018:	6869      	ldr	r1, [r5, #4]
  40701a:	f8ca 100c 	str.w	r1, [sl, #12]
  40701e:	2a1b      	cmp	r2, #27
  407020:	f200 80a2 	bhi.w	407168 <_realloc_r+0x2cc>
  407024:	3508      	adds	r5, #8
  407026:	f10a 0210 	add.w	r2, sl, #16
  40702a:	e063      	b.n	4070f4 <_realloc_r+0x258>
  40702c:	f855 3c08 	ldr.w	r3, [r5, #-8]
  407030:	eba9 0a03 	sub.w	sl, r9, r3
  407034:	f8da 1004 	ldr.w	r1, [sl, #4]
  407038:	f021 0103 	bic.w	r1, r1, #3
  40703c:	1863      	adds	r3, r4, r1
  40703e:	4293      	cmp	r3, r2
  407040:	f6ff af59 	blt.w	406ef6 <_realloc_r+0x5a>
  407044:	4656      	mov	r6, sl
  407046:	e7d8      	b.n	406ffa <_realloc_r+0x15e>
  407048:	6841      	ldr	r1, [r0, #4]
  40704a:	f021 0b03 	bic.w	fp, r1, #3
  40704e:	44a3      	add	fp, r4
  407050:	f107 0010 	add.w	r0, r7, #16
  407054:	4583      	cmp	fp, r0
  407056:	da56      	bge.n	407106 <_realloc_r+0x26a>
  407058:	f01e 0f01 	tst.w	lr, #1
  40705c:	f47f af4b 	bne.w	406ef6 <_realloc_r+0x5a>
  407060:	f855 1c08 	ldr.w	r1, [r5, #-8]
  407064:	eba9 0a01 	sub.w	sl, r9, r1
  407068:	f8da 1004 	ldr.w	r1, [sl, #4]
  40706c:	f021 0103 	bic.w	r1, r1, #3
  407070:	448b      	add	fp, r1
  407072:	4558      	cmp	r0, fp
  407074:	dce2      	bgt.n	40703c <_realloc_r+0x1a0>
  407076:	4656      	mov	r6, sl
  407078:	f8da 100c 	ldr.w	r1, [sl, #12]
  40707c:	f856 0f08 	ldr.w	r0, [r6, #8]!
  407080:	1f22      	subs	r2, r4, #4
  407082:	2a24      	cmp	r2, #36	; 0x24
  407084:	60c1      	str	r1, [r0, #12]
  407086:	6088      	str	r0, [r1, #8]
  407088:	f200 808f 	bhi.w	4071aa <_realloc_r+0x30e>
  40708c:	2a13      	cmp	r2, #19
  40708e:	f240 808a 	bls.w	4071a6 <_realloc_r+0x30a>
  407092:	6829      	ldr	r1, [r5, #0]
  407094:	f8ca 1008 	str.w	r1, [sl, #8]
  407098:	6869      	ldr	r1, [r5, #4]
  40709a:	f8ca 100c 	str.w	r1, [sl, #12]
  40709e:	2a1b      	cmp	r2, #27
  4070a0:	f200 808a 	bhi.w	4071b8 <_realloc_r+0x31c>
  4070a4:	3508      	adds	r5, #8
  4070a6:	f10a 0210 	add.w	r2, sl, #16
  4070aa:	6829      	ldr	r1, [r5, #0]
  4070ac:	6011      	str	r1, [r2, #0]
  4070ae:	6869      	ldr	r1, [r5, #4]
  4070b0:	6051      	str	r1, [r2, #4]
  4070b2:	68a9      	ldr	r1, [r5, #8]
  4070b4:	6091      	str	r1, [r2, #8]
  4070b6:	eb0a 0107 	add.w	r1, sl, r7
  4070ba:	ebab 0207 	sub.w	r2, fp, r7
  4070be:	f042 0201 	orr.w	r2, r2, #1
  4070c2:	6099      	str	r1, [r3, #8]
  4070c4:	604a      	str	r2, [r1, #4]
  4070c6:	f8da 3004 	ldr.w	r3, [sl, #4]
  4070ca:	f003 0301 	and.w	r3, r3, #1
  4070ce:	431f      	orrs	r7, r3
  4070d0:	4640      	mov	r0, r8
  4070d2:	f8ca 7004 	str.w	r7, [sl, #4]
  4070d6:	f7ff f883 	bl	4061e0 <__malloc_unlock>
  4070da:	e751      	b.n	406f80 <_realloc_r+0xe4>
  4070dc:	682b      	ldr	r3, [r5, #0]
  4070de:	6003      	str	r3, [r0, #0]
  4070e0:	686b      	ldr	r3, [r5, #4]
  4070e2:	6043      	str	r3, [r0, #4]
  4070e4:	2a1b      	cmp	r2, #27
  4070e6:	d82d      	bhi.n	407144 <_realloc_r+0x2a8>
  4070e8:	f100 0308 	add.w	r3, r0, #8
  4070ec:	f105 0208 	add.w	r2, r5, #8
  4070f0:	e71b      	b.n	406f2a <_realloc_r+0x8e>
  4070f2:	4632      	mov	r2, r6
  4070f4:	6829      	ldr	r1, [r5, #0]
  4070f6:	6011      	str	r1, [r2, #0]
  4070f8:	6869      	ldr	r1, [r5, #4]
  4070fa:	6051      	str	r1, [r2, #4]
  4070fc:	68a9      	ldr	r1, [r5, #8]
  4070fe:	6091      	str	r1, [r2, #8]
  407100:	461c      	mov	r4, r3
  407102:	46d1      	mov	r9, sl
  407104:	e72a      	b.n	406f5c <_realloc_r+0xc0>
  407106:	eb09 0107 	add.w	r1, r9, r7
  40710a:	ebab 0b07 	sub.w	fp, fp, r7
  40710e:	f04b 0201 	orr.w	r2, fp, #1
  407112:	6099      	str	r1, [r3, #8]
  407114:	604a      	str	r2, [r1, #4]
  407116:	f855 3c04 	ldr.w	r3, [r5, #-4]
  40711a:	f003 0301 	and.w	r3, r3, #1
  40711e:	431f      	orrs	r7, r3
  407120:	4640      	mov	r0, r8
  407122:	f845 7c04 	str.w	r7, [r5, #-4]
  407126:	f7ff f85b 	bl	4061e0 <__malloc_unlock>
  40712a:	462e      	mov	r6, r5
  40712c:	e728      	b.n	406f80 <_realloc_r+0xe4>
  40712e:	4629      	mov	r1, r5
  407130:	f7ff fe50 	bl	406dd4 <memmove>
  407134:	e6ff      	b.n	406f36 <_realloc_r+0x9a>
  407136:	4629      	mov	r1, r5
  407138:	4630      	mov	r0, r6
  40713a:	461c      	mov	r4, r3
  40713c:	46d1      	mov	r9, sl
  40713e:	f7ff fe49 	bl	406dd4 <memmove>
  407142:	e70b      	b.n	406f5c <_realloc_r+0xc0>
  407144:	68ab      	ldr	r3, [r5, #8]
  407146:	6083      	str	r3, [r0, #8]
  407148:	68eb      	ldr	r3, [r5, #12]
  40714a:	60c3      	str	r3, [r0, #12]
  40714c:	2a24      	cmp	r2, #36	; 0x24
  40714e:	d017      	beq.n	407180 <_realloc_r+0x2e4>
  407150:	f100 0310 	add.w	r3, r0, #16
  407154:	f105 0210 	add.w	r2, r5, #16
  407158:	e6e7      	b.n	406f2a <_realloc_r+0x8e>
  40715a:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40715e:	f023 0303 	bic.w	r3, r3, #3
  407162:	441c      	add	r4, r3
  407164:	462e      	mov	r6, r5
  407166:	e6f9      	b.n	406f5c <_realloc_r+0xc0>
  407168:	68a9      	ldr	r1, [r5, #8]
  40716a:	f8ca 1010 	str.w	r1, [sl, #16]
  40716e:	68e9      	ldr	r1, [r5, #12]
  407170:	f8ca 1014 	str.w	r1, [sl, #20]
  407174:	2a24      	cmp	r2, #36	; 0x24
  407176:	d00c      	beq.n	407192 <_realloc_r+0x2f6>
  407178:	3510      	adds	r5, #16
  40717a:	f10a 0218 	add.w	r2, sl, #24
  40717e:	e7b9      	b.n	4070f4 <_realloc_r+0x258>
  407180:	692b      	ldr	r3, [r5, #16]
  407182:	6103      	str	r3, [r0, #16]
  407184:	696b      	ldr	r3, [r5, #20]
  407186:	6143      	str	r3, [r0, #20]
  407188:	f105 0218 	add.w	r2, r5, #24
  40718c:	f100 0318 	add.w	r3, r0, #24
  407190:	e6cb      	b.n	406f2a <_realloc_r+0x8e>
  407192:	692a      	ldr	r2, [r5, #16]
  407194:	f8ca 2018 	str.w	r2, [sl, #24]
  407198:	696a      	ldr	r2, [r5, #20]
  40719a:	f8ca 201c 	str.w	r2, [sl, #28]
  40719e:	3518      	adds	r5, #24
  4071a0:	f10a 0220 	add.w	r2, sl, #32
  4071a4:	e7a6      	b.n	4070f4 <_realloc_r+0x258>
  4071a6:	4632      	mov	r2, r6
  4071a8:	e77f      	b.n	4070aa <_realloc_r+0x20e>
  4071aa:	4629      	mov	r1, r5
  4071ac:	4630      	mov	r0, r6
  4071ae:	9301      	str	r3, [sp, #4]
  4071b0:	f7ff fe10 	bl	406dd4 <memmove>
  4071b4:	9b01      	ldr	r3, [sp, #4]
  4071b6:	e77e      	b.n	4070b6 <_realloc_r+0x21a>
  4071b8:	68a9      	ldr	r1, [r5, #8]
  4071ba:	f8ca 1010 	str.w	r1, [sl, #16]
  4071be:	68e9      	ldr	r1, [r5, #12]
  4071c0:	f8ca 1014 	str.w	r1, [sl, #20]
  4071c4:	2a24      	cmp	r2, #36	; 0x24
  4071c6:	d003      	beq.n	4071d0 <_realloc_r+0x334>
  4071c8:	3510      	adds	r5, #16
  4071ca:	f10a 0218 	add.w	r2, sl, #24
  4071ce:	e76c      	b.n	4070aa <_realloc_r+0x20e>
  4071d0:	692a      	ldr	r2, [r5, #16]
  4071d2:	f8ca 2018 	str.w	r2, [sl, #24]
  4071d6:	696a      	ldr	r2, [r5, #20]
  4071d8:	f8ca 201c 	str.w	r2, [sl, #28]
  4071dc:	3518      	adds	r5, #24
  4071de:	f10a 0220 	add.w	r2, sl, #32
  4071e2:	e762      	b.n	4070aa <_realloc_r+0x20e>
  4071e4:	20400e2c 	.word	0x20400e2c

004071e8 <__ascii_wctomb>:
  4071e8:	b121      	cbz	r1, 4071f4 <__ascii_wctomb+0xc>
  4071ea:	2aff      	cmp	r2, #255	; 0xff
  4071ec:	d804      	bhi.n	4071f8 <__ascii_wctomb+0x10>
  4071ee:	700a      	strb	r2, [r1, #0]
  4071f0:	2001      	movs	r0, #1
  4071f2:	4770      	bx	lr
  4071f4:	4608      	mov	r0, r1
  4071f6:	4770      	bx	lr
  4071f8:	238a      	movs	r3, #138	; 0x8a
  4071fa:	6003      	str	r3, [r0, #0]
  4071fc:	f04f 30ff 	mov.w	r0, #4294967295
  407200:	4770      	bx	lr
  407202:	bf00      	nop

00407204 <__aeabi_drsub>:
  407204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  407208:	e002      	b.n	407210 <__adddf3>
  40720a:	bf00      	nop

0040720c <__aeabi_dsub>:
  40720c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00407210 <__adddf3>:
  407210:	b530      	push	{r4, r5, lr}
  407212:	ea4f 0441 	mov.w	r4, r1, lsl #1
  407216:	ea4f 0543 	mov.w	r5, r3, lsl #1
  40721a:	ea94 0f05 	teq	r4, r5
  40721e:	bf08      	it	eq
  407220:	ea90 0f02 	teqeq	r0, r2
  407224:	bf1f      	itttt	ne
  407226:	ea54 0c00 	orrsne.w	ip, r4, r0
  40722a:	ea55 0c02 	orrsne.w	ip, r5, r2
  40722e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  407232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407236:	f000 80e2 	beq.w	4073fe <__adddf3+0x1ee>
  40723a:	ea4f 5454 	mov.w	r4, r4, lsr #21
  40723e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  407242:	bfb8      	it	lt
  407244:	426d      	neglt	r5, r5
  407246:	dd0c      	ble.n	407262 <__adddf3+0x52>
  407248:	442c      	add	r4, r5
  40724a:	ea80 0202 	eor.w	r2, r0, r2
  40724e:	ea81 0303 	eor.w	r3, r1, r3
  407252:	ea82 0000 	eor.w	r0, r2, r0
  407256:	ea83 0101 	eor.w	r1, r3, r1
  40725a:	ea80 0202 	eor.w	r2, r0, r2
  40725e:	ea81 0303 	eor.w	r3, r1, r3
  407262:	2d36      	cmp	r5, #54	; 0x36
  407264:	bf88      	it	hi
  407266:	bd30      	pophi	{r4, r5, pc}
  407268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40726c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  407270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  407274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  407278:	d002      	beq.n	407280 <__adddf3+0x70>
  40727a:	4240      	negs	r0, r0
  40727c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  407280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  407284:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40728c:	d002      	beq.n	407294 <__adddf3+0x84>
  40728e:	4252      	negs	r2, r2
  407290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  407294:	ea94 0f05 	teq	r4, r5
  407298:	f000 80a7 	beq.w	4073ea <__adddf3+0x1da>
  40729c:	f1a4 0401 	sub.w	r4, r4, #1
  4072a0:	f1d5 0e20 	rsbs	lr, r5, #32
  4072a4:	db0d      	blt.n	4072c2 <__adddf3+0xb2>
  4072a6:	fa02 fc0e 	lsl.w	ip, r2, lr
  4072aa:	fa22 f205 	lsr.w	r2, r2, r5
  4072ae:	1880      	adds	r0, r0, r2
  4072b0:	f141 0100 	adc.w	r1, r1, #0
  4072b4:	fa03 f20e 	lsl.w	r2, r3, lr
  4072b8:	1880      	adds	r0, r0, r2
  4072ba:	fa43 f305 	asr.w	r3, r3, r5
  4072be:	4159      	adcs	r1, r3
  4072c0:	e00e      	b.n	4072e0 <__adddf3+0xd0>
  4072c2:	f1a5 0520 	sub.w	r5, r5, #32
  4072c6:	f10e 0e20 	add.w	lr, lr, #32
  4072ca:	2a01      	cmp	r2, #1
  4072cc:	fa03 fc0e 	lsl.w	ip, r3, lr
  4072d0:	bf28      	it	cs
  4072d2:	f04c 0c02 	orrcs.w	ip, ip, #2
  4072d6:	fa43 f305 	asr.w	r3, r3, r5
  4072da:	18c0      	adds	r0, r0, r3
  4072dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  4072e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4072e4:	d507      	bpl.n	4072f6 <__adddf3+0xe6>
  4072e6:	f04f 0e00 	mov.w	lr, #0
  4072ea:	f1dc 0c00 	rsbs	ip, ip, #0
  4072ee:	eb7e 0000 	sbcs.w	r0, lr, r0
  4072f2:	eb6e 0101 	sbc.w	r1, lr, r1
  4072f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4072fa:	d31b      	bcc.n	407334 <__adddf3+0x124>
  4072fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  407300:	d30c      	bcc.n	40731c <__adddf3+0x10c>
  407302:	0849      	lsrs	r1, r1, #1
  407304:	ea5f 0030 	movs.w	r0, r0, rrx
  407308:	ea4f 0c3c 	mov.w	ip, ip, rrx
  40730c:	f104 0401 	add.w	r4, r4, #1
  407310:	ea4f 5244 	mov.w	r2, r4, lsl #21
  407314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  407318:	f080 809a 	bcs.w	407450 <__adddf3+0x240>
  40731c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  407320:	bf08      	it	eq
  407322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407326:	f150 0000 	adcs.w	r0, r0, #0
  40732a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40732e:	ea41 0105 	orr.w	r1, r1, r5
  407332:	bd30      	pop	{r4, r5, pc}
  407334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  407338:	4140      	adcs	r0, r0
  40733a:	eb41 0101 	adc.w	r1, r1, r1
  40733e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407342:	f1a4 0401 	sub.w	r4, r4, #1
  407346:	d1e9      	bne.n	40731c <__adddf3+0x10c>
  407348:	f091 0f00 	teq	r1, #0
  40734c:	bf04      	itt	eq
  40734e:	4601      	moveq	r1, r0
  407350:	2000      	moveq	r0, #0
  407352:	fab1 f381 	clz	r3, r1
  407356:	bf08      	it	eq
  407358:	3320      	addeq	r3, #32
  40735a:	f1a3 030b 	sub.w	r3, r3, #11
  40735e:	f1b3 0220 	subs.w	r2, r3, #32
  407362:	da0c      	bge.n	40737e <__adddf3+0x16e>
  407364:	320c      	adds	r2, #12
  407366:	dd08      	ble.n	40737a <__adddf3+0x16a>
  407368:	f102 0c14 	add.w	ip, r2, #20
  40736c:	f1c2 020c 	rsb	r2, r2, #12
  407370:	fa01 f00c 	lsl.w	r0, r1, ip
  407374:	fa21 f102 	lsr.w	r1, r1, r2
  407378:	e00c      	b.n	407394 <__adddf3+0x184>
  40737a:	f102 0214 	add.w	r2, r2, #20
  40737e:	bfd8      	it	le
  407380:	f1c2 0c20 	rsble	ip, r2, #32
  407384:	fa01 f102 	lsl.w	r1, r1, r2
  407388:	fa20 fc0c 	lsr.w	ip, r0, ip
  40738c:	bfdc      	itt	le
  40738e:	ea41 010c 	orrle.w	r1, r1, ip
  407392:	4090      	lslle	r0, r2
  407394:	1ae4      	subs	r4, r4, r3
  407396:	bfa2      	ittt	ge
  407398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40739c:	4329      	orrge	r1, r5
  40739e:	bd30      	popge	{r4, r5, pc}
  4073a0:	ea6f 0404 	mvn.w	r4, r4
  4073a4:	3c1f      	subs	r4, #31
  4073a6:	da1c      	bge.n	4073e2 <__adddf3+0x1d2>
  4073a8:	340c      	adds	r4, #12
  4073aa:	dc0e      	bgt.n	4073ca <__adddf3+0x1ba>
  4073ac:	f104 0414 	add.w	r4, r4, #20
  4073b0:	f1c4 0220 	rsb	r2, r4, #32
  4073b4:	fa20 f004 	lsr.w	r0, r0, r4
  4073b8:	fa01 f302 	lsl.w	r3, r1, r2
  4073bc:	ea40 0003 	orr.w	r0, r0, r3
  4073c0:	fa21 f304 	lsr.w	r3, r1, r4
  4073c4:	ea45 0103 	orr.w	r1, r5, r3
  4073c8:	bd30      	pop	{r4, r5, pc}
  4073ca:	f1c4 040c 	rsb	r4, r4, #12
  4073ce:	f1c4 0220 	rsb	r2, r4, #32
  4073d2:	fa20 f002 	lsr.w	r0, r0, r2
  4073d6:	fa01 f304 	lsl.w	r3, r1, r4
  4073da:	ea40 0003 	orr.w	r0, r0, r3
  4073de:	4629      	mov	r1, r5
  4073e0:	bd30      	pop	{r4, r5, pc}
  4073e2:	fa21 f004 	lsr.w	r0, r1, r4
  4073e6:	4629      	mov	r1, r5
  4073e8:	bd30      	pop	{r4, r5, pc}
  4073ea:	f094 0f00 	teq	r4, #0
  4073ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4073f2:	bf06      	itte	eq
  4073f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4073f8:	3401      	addeq	r4, #1
  4073fa:	3d01      	subne	r5, #1
  4073fc:	e74e      	b.n	40729c <__adddf3+0x8c>
  4073fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407402:	bf18      	it	ne
  407404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  407408:	d029      	beq.n	40745e <__adddf3+0x24e>
  40740a:	ea94 0f05 	teq	r4, r5
  40740e:	bf08      	it	eq
  407410:	ea90 0f02 	teqeq	r0, r2
  407414:	d005      	beq.n	407422 <__adddf3+0x212>
  407416:	ea54 0c00 	orrs.w	ip, r4, r0
  40741a:	bf04      	itt	eq
  40741c:	4619      	moveq	r1, r3
  40741e:	4610      	moveq	r0, r2
  407420:	bd30      	pop	{r4, r5, pc}
  407422:	ea91 0f03 	teq	r1, r3
  407426:	bf1e      	ittt	ne
  407428:	2100      	movne	r1, #0
  40742a:	2000      	movne	r0, #0
  40742c:	bd30      	popne	{r4, r5, pc}
  40742e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  407432:	d105      	bne.n	407440 <__adddf3+0x230>
  407434:	0040      	lsls	r0, r0, #1
  407436:	4149      	adcs	r1, r1
  407438:	bf28      	it	cs
  40743a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  40743e:	bd30      	pop	{r4, r5, pc}
  407440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  407444:	bf3c      	itt	cc
  407446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  40744a:	bd30      	popcc	{r4, r5, pc}
  40744c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  407454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  407458:	f04f 0000 	mov.w	r0, #0
  40745c:	bd30      	pop	{r4, r5, pc}
  40745e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  407462:	bf1a      	itte	ne
  407464:	4619      	movne	r1, r3
  407466:	4610      	movne	r0, r2
  407468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40746c:	bf1c      	itt	ne
  40746e:	460b      	movne	r3, r1
  407470:	4602      	movne	r2, r0
  407472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407476:	bf06      	itte	eq
  407478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40747c:	ea91 0f03 	teqeq	r1, r3
  407480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  407484:	bd30      	pop	{r4, r5, pc}
  407486:	bf00      	nop

00407488 <__aeabi_ui2d>:
  407488:	f090 0f00 	teq	r0, #0
  40748c:	bf04      	itt	eq
  40748e:	2100      	moveq	r1, #0
  407490:	4770      	bxeq	lr
  407492:	b530      	push	{r4, r5, lr}
  407494:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407498:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40749c:	f04f 0500 	mov.w	r5, #0
  4074a0:	f04f 0100 	mov.w	r1, #0
  4074a4:	e750      	b.n	407348 <__adddf3+0x138>
  4074a6:	bf00      	nop

004074a8 <__aeabi_i2d>:
  4074a8:	f090 0f00 	teq	r0, #0
  4074ac:	bf04      	itt	eq
  4074ae:	2100      	moveq	r1, #0
  4074b0:	4770      	bxeq	lr
  4074b2:	b530      	push	{r4, r5, lr}
  4074b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4074b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4074bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  4074c0:	bf48      	it	mi
  4074c2:	4240      	negmi	r0, r0
  4074c4:	f04f 0100 	mov.w	r1, #0
  4074c8:	e73e      	b.n	407348 <__adddf3+0x138>
  4074ca:	bf00      	nop

004074cc <__aeabi_f2d>:
  4074cc:	0042      	lsls	r2, r0, #1
  4074ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
  4074d2:	ea4f 0131 	mov.w	r1, r1, rrx
  4074d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
  4074da:	bf1f      	itttt	ne
  4074dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  4074e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4074e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  4074e8:	4770      	bxne	lr
  4074ea:	f092 0f00 	teq	r2, #0
  4074ee:	bf14      	ite	ne
  4074f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4074f4:	4770      	bxeq	lr
  4074f6:	b530      	push	{r4, r5, lr}
  4074f8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4074fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  407500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407504:	e720      	b.n	407348 <__adddf3+0x138>
  407506:	bf00      	nop

00407508 <__aeabi_ul2d>:
  407508:	ea50 0201 	orrs.w	r2, r0, r1
  40750c:	bf08      	it	eq
  40750e:	4770      	bxeq	lr
  407510:	b530      	push	{r4, r5, lr}
  407512:	f04f 0500 	mov.w	r5, #0
  407516:	e00a      	b.n	40752e <__aeabi_l2d+0x16>

00407518 <__aeabi_l2d>:
  407518:	ea50 0201 	orrs.w	r2, r0, r1
  40751c:	bf08      	it	eq
  40751e:	4770      	bxeq	lr
  407520:	b530      	push	{r4, r5, lr}
  407522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  407526:	d502      	bpl.n	40752e <__aeabi_l2d+0x16>
  407528:	4240      	negs	r0, r0
  40752a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  40752e:	f44f 6480 	mov.w	r4, #1024	; 0x400
  407532:	f104 0432 	add.w	r4, r4, #50	; 0x32
  407536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  40753a:	f43f aedc 	beq.w	4072f6 <__adddf3+0xe6>
  40753e:	f04f 0203 	mov.w	r2, #3
  407542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  407546:	bf18      	it	ne
  407548:	3203      	addne	r2, #3
  40754a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  40754e:	bf18      	it	ne
  407550:	3203      	addne	r2, #3
  407552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  407556:	f1c2 0320 	rsb	r3, r2, #32
  40755a:	fa00 fc03 	lsl.w	ip, r0, r3
  40755e:	fa20 f002 	lsr.w	r0, r0, r2
  407562:	fa01 fe03 	lsl.w	lr, r1, r3
  407566:	ea40 000e 	orr.w	r0, r0, lr
  40756a:	fa21 f102 	lsr.w	r1, r1, r2
  40756e:	4414      	add	r4, r2
  407570:	e6c1      	b.n	4072f6 <__adddf3+0xe6>
  407572:	bf00      	nop

00407574 <__aeabi_dmul>:
  407574:	b570      	push	{r4, r5, r6, lr}
  407576:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40757a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40757e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  407582:	bf1d      	ittte	ne
  407584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  407588:	ea94 0f0c 	teqne	r4, ip
  40758c:	ea95 0f0c 	teqne	r5, ip
  407590:	f000 f8de 	bleq	407750 <__aeabi_dmul+0x1dc>
  407594:	442c      	add	r4, r5
  407596:	ea81 0603 	eor.w	r6, r1, r3
  40759a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40759e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  4075a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  4075a6:	bf18      	it	ne
  4075a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  4075ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4075b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  4075b4:	d038      	beq.n	407628 <__aeabi_dmul+0xb4>
  4075b6:	fba0 ce02 	umull	ip, lr, r0, r2
  4075ba:	f04f 0500 	mov.w	r5, #0
  4075be:	fbe1 e502 	umlal	lr, r5, r1, r2
  4075c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  4075c6:	fbe0 e503 	umlal	lr, r5, r0, r3
  4075ca:	f04f 0600 	mov.w	r6, #0
  4075ce:	fbe1 5603 	umlal	r5, r6, r1, r3
  4075d2:	f09c 0f00 	teq	ip, #0
  4075d6:	bf18      	it	ne
  4075d8:	f04e 0e01 	orrne.w	lr, lr, #1
  4075dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  4075e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  4075e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  4075e8:	d204      	bcs.n	4075f4 <__aeabi_dmul+0x80>
  4075ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  4075ee:	416d      	adcs	r5, r5
  4075f0:	eb46 0606 	adc.w	r6, r6, r6
  4075f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4075f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4075fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  407600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  407604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  407608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40760c:	bf88      	it	hi
  40760e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  407612:	d81e      	bhi.n	407652 <__aeabi_dmul+0xde>
  407614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  407618:	bf08      	it	eq
  40761a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  40761e:	f150 0000 	adcs.w	r0, r0, #0
  407622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  407626:	bd70      	pop	{r4, r5, r6, pc}
  407628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  40762c:	ea46 0101 	orr.w	r1, r6, r1
  407630:	ea40 0002 	orr.w	r0, r0, r2
  407634:	ea81 0103 	eor.w	r1, r1, r3
  407638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  40763c:	bfc2      	ittt	gt
  40763e:	ebd4 050c 	rsbsgt	r5, r4, ip
  407642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407646:	bd70      	popgt	{r4, r5, r6, pc}
  407648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  40764c:	f04f 0e00 	mov.w	lr, #0
  407650:	3c01      	subs	r4, #1
  407652:	f300 80ab 	bgt.w	4077ac <__aeabi_dmul+0x238>
  407656:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40765a:	bfde      	ittt	le
  40765c:	2000      	movle	r0, #0
  40765e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  407662:	bd70      	pople	{r4, r5, r6, pc}
  407664:	f1c4 0400 	rsb	r4, r4, #0
  407668:	3c20      	subs	r4, #32
  40766a:	da35      	bge.n	4076d8 <__aeabi_dmul+0x164>
  40766c:	340c      	adds	r4, #12
  40766e:	dc1b      	bgt.n	4076a8 <__aeabi_dmul+0x134>
  407670:	f104 0414 	add.w	r4, r4, #20
  407674:	f1c4 0520 	rsb	r5, r4, #32
  407678:	fa00 f305 	lsl.w	r3, r0, r5
  40767c:	fa20 f004 	lsr.w	r0, r0, r4
  407680:	fa01 f205 	lsl.w	r2, r1, r5
  407684:	ea40 0002 	orr.w	r0, r0, r2
  407688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40768c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  407690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  407694:	fa21 f604 	lsr.w	r6, r1, r4
  407698:	eb42 0106 	adc.w	r1, r2, r6
  40769c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4076a0:	bf08      	it	eq
  4076a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4076a6:	bd70      	pop	{r4, r5, r6, pc}
  4076a8:	f1c4 040c 	rsb	r4, r4, #12
  4076ac:	f1c4 0520 	rsb	r5, r4, #32
  4076b0:	fa00 f304 	lsl.w	r3, r0, r4
  4076b4:	fa20 f005 	lsr.w	r0, r0, r5
  4076b8:	fa01 f204 	lsl.w	r2, r1, r4
  4076bc:	ea40 0002 	orr.w	r0, r0, r2
  4076c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  4076c8:	f141 0100 	adc.w	r1, r1, #0
  4076cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4076d0:	bf08      	it	eq
  4076d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4076d6:	bd70      	pop	{r4, r5, r6, pc}
  4076d8:	f1c4 0520 	rsb	r5, r4, #32
  4076dc:	fa00 f205 	lsl.w	r2, r0, r5
  4076e0:	ea4e 0e02 	orr.w	lr, lr, r2
  4076e4:	fa20 f304 	lsr.w	r3, r0, r4
  4076e8:	fa01 f205 	lsl.w	r2, r1, r5
  4076ec:	ea43 0302 	orr.w	r3, r3, r2
  4076f0:	fa21 f004 	lsr.w	r0, r1, r4
  4076f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4076f8:	fa21 f204 	lsr.w	r2, r1, r4
  4076fc:	ea20 0002 	bic.w	r0, r0, r2
  407700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  407704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  407708:	bf08      	it	eq
  40770a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  40770e:	bd70      	pop	{r4, r5, r6, pc}
  407710:	f094 0f00 	teq	r4, #0
  407714:	d10f      	bne.n	407736 <__aeabi_dmul+0x1c2>
  407716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  40771a:	0040      	lsls	r0, r0, #1
  40771c:	eb41 0101 	adc.w	r1, r1, r1
  407720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  407724:	bf08      	it	eq
  407726:	3c01      	subeq	r4, #1
  407728:	d0f7      	beq.n	40771a <__aeabi_dmul+0x1a6>
  40772a:	ea41 0106 	orr.w	r1, r1, r6
  40772e:	f095 0f00 	teq	r5, #0
  407732:	bf18      	it	ne
  407734:	4770      	bxne	lr
  407736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  40773a:	0052      	lsls	r2, r2, #1
  40773c:	eb43 0303 	adc.w	r3, r3, r3
  407740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  407744:	bf08      	it	eq
  407746:	3d01      	subeq	r5, #1
  407748:	d0f7      	beq.n	40773a <__aeabi_dmul+0x1c6>
  40774a:	ea43 0306 	orr.w	r3, r3, r6
  40774e:	4770      	bx	lr
  407750:	ea94 0f0c 	teq	r4, ip
  407754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  407758:	bf18      	it	ne
  40775a:	ea95 0f0c 	teqne	r5, ip
  40775e:	d00c      	beq.n	40777a <__aeabi_dmul+0x206>
  407760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  407764:	bf18      	it	ne
  407766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40776a:	d1d1      	bne.n	407710 <__aeabi_dmul+0x19c>
  40776c:	ea81 0103 	eor.w	r1, r1, r3
  407770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  407774:	f04f 0000 	mov.w	r0, #0
  407778:	bd70      	pop	{r4, r5, r6, pc}
  40777a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40777e:	bf06      	itte	eq
  407780:	4610      	moveq	r0, r2
  407782:	4619      	moveq	r1, r3
  407784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407788:	d019      	beq.n	4077be <__aeabi_dmul+0x24a>
  40778a:	ea94 0f0c 	teq	r4, ip
  40778e:	d102      	bne.n	407796 <__aeabi_dmul+0x222>
  407790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  407794:	d113      	bne.n	4077be <__aeabi_dmul+0x24a>
  407796:	ea95 0f0c 	teq	r5, ip
  40779a:	d105      	bne.n	4077a8 <__aeabi_dmul+0x234>
  40779c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  4077a0:	bf1c      	itt	ne
  4077a2:	4610      	movne	r0, r2
  4077a4:	4619      	movne	r1, r3
  4077a6:	d10a      	bne.n	4077be <__aeabi_dmul+0x24a>
  4077a8:	ea81 0103 	eor.w	r1, r1, r3
  4077ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4077b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4077b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  4077b8:	f04f 0000 	mov.w	r0, #0
  4077bc:	bd70      	pop	{r4, r5, r6, pc}
  4077be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  4077c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  4077c6:	bd70      	pop	{r4, r5, r6, pc}

004077c8 <__aeabi_ddiv>:
  4077c8:	b570      	push	{r4, r5, r6, lr}
  4077ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
  4077ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  4077d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  4077d6:	bf1d      	ittte	ne
  4077d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  4077dc:	ea94 0f0c 	teqne	r4, ip
  4077e0:	ea95 0f0c 	teqne	r5, ip
  4077e4:	f000 f8a7 	bleq	407936 <__aeabi_ddiv+0x16e>
  4077e8:	eba4 0405 	sub.w	r4, r4, r5
  4077ec:	ea81 0e03 	eor.w	lr, r1, r3
  4077f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4077f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4077f8:	f000 8088 	beq.w	40790c <__aeabi_ddiv+0x144>
  4077fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
  407800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  407804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  407808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  40780c:	ea4f 2202 	mov.w	r2, r2, lsl #8
  407810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  407814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  407818:	ea4f 2600 	mov.w	r6, r0, lsl #8
  40781c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  407820:	429d      	cmp	r5, r3
  407822:	bf08      	it	eq
  407824:	4296      	cmpeq	r6, r2
  407826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  40782a:	f504 7440 	add.w	r4, r4, #768	; 0x300
  40782e:	d202      	bcs.n	407836 <__aeabi_ddiv+0x6e>
  407830:	085b      	lsrs	r3, r3, #1
  407832:	ea4f 0232 	mov.w	r2, r2, rrx
  407836:	1ab6      	subs	r6, r6, r2
  407838:	eb65 0503 	sbc.w	r5, r5, r3
  40783c:	085b      	lsrs	r3, r3, #1
  40783e:	ea4f 0232 	mov.w	r2, r2, rrx
  407842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  407846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  40784a:	ebb6 0e02 	subs.w	lr, r6, r2
  40784e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407852:	bf22      	ittt	cs
  407854:	1ab6      	subcs	r6, r6, r2
  407856:	4675      	movcs	r5, lr
  407858:	ea40 000c 	orrcs.w	r0, r0, ip
  40785c:	085b      	lsrs	r3, r3, #1
  40785e:	ea4f 0232 	mov.w	r2, r2, rrx
  407862:	ebb6 0e02 	subs.w	lr, r6, r2
  407866:	eb75 0e03 	sbcs.w	lr, r5, r3
  40786a:	bf22      	ittt	cs
  40786c:	1ab6      	subcs	r6, r6, r2
  40786e:	4675      	movcs	r5, lr
  407870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  407874:	085b      	lsrs	r3, r3, #1
  407876:	ea4f 0232 	mov.w	r2, r2, rrx
  40787a:	ebb6 0e02 	subs.w	lr, r6, r2
  40787e:	eb75 0e03 	sbcs.w	lr, r5, r3
  407882:	bf22      	ittt	cs
  407884:	1ab6      	subcs	r6, r6, r2
  407886:	4675      	movcs	r5, lr
  407888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40788c:	085b      	lsrs	r3, r3, #1
  40788e:	ea4f 0232 	mov.w	r2, r2, rrx
  407892:	ebb6 0e02 	subs.w	lr, r6, r2
  407896:	eb75 0e03 	sbcs.w	lr, r5, r3
  40789a:	bf22      	ittt	cs
  40789c:	1ab6      	subcs	r6, r6, r2
  40789e:	4675      	movcs	r5, lr
  4078a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  4078a4:	ea55 0e06 	orrs.w	lr, r5, r6
  4078a8:	d018      	beq.n	4078dc <__aeabi_ddiv+0x114>
  4078aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
  4078ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  4078b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
  4078b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  4078ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  4078be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  4078c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  4078c6:	d1c0      	bne.n	40784a <__aeabi_ddiv+0x82>
  4078c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4078cc:	d10b      	bne.n	4078e6 <__aeabi_ddiv+0x11e>
  4078ce:	ea41 0100 	orr.w	r1, r1, r0
  4078d2:	f04f 0000 	mov.w	r0, #0
  4078d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  4078da:	e7b6      	b.n	40784a <__aeabi_ddiv+0x82>
  4078dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4078e0:	bf04      	itt	eq
  4078e2:	4301      	orreq	r1, r0
  4078e4:	2000      	moveq	r0, #0
  4078e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4078ea:	bf88      	it	hi
  4078ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4078f0:	f63f aeaf 	bhi.w	407652 <__aeabi_dmul+0xde>
  4078f4:	ebb5 0c03 	subs.w	ip, r5, r3
  4078f8:	bf04      	itt	eq
  4078fa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4078fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  407902:	f150 0000 	adcs.w	r0, r0, #0
  407906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  40790a:	bd70      	pop	{r4, r5, r6, pc}
  40790c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  407910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  407914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  407918:	bfc2      	ittt	gt
  40791a:	ebd4 050c 	rsbsgt	r5, r4, ip
  40791e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  407922:	bd70      	popgt	{r4, r5, r6, pc}
  407924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  407928:	f04f 0e00 	mov.w	lr, #0
  40792c:	3c01      	subs	r4, #1
  40792e:	e690      	b.n	407652 <__aeabi_dmul+0xde>
  407930:	ea45 0e06 	orr.w	lr, r5, r6
  407934:	e68d      	b.n	407652 <__aeabi_dmul+0xde>
  407936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  40793a:	ea94 0f0c 	teq	r4, ip
  40793e:	bf08      	it	eq
  407940:	ea95 0f0c 	teqeq	r5, ip
  407944:	f43f af3b 	beq.w	4077be <__aeabi_dmul+0x24a>
  407948:	ea94 0f0c 	teq	r4, ip
  40794c:	d10a      	bne.n	407964 <__aeabi_ddiv+0x19c>
  40794e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  407952:	f47f af34 	bne.w	4077be <__aeabi_dmul+0x24a>
  407956:	ea95 0f0c 	teq	r5, ip
  40795a:	f47f af25 	bne.w	4077a8 <__aeabi_dmul+0x234>
  40795e:	4610      	mov	r0, r2
  407960:	4619      	mov	r1, r3
  407962:	e72c      	b.n	4077be <__aeabi_dmul+0x24a>
  407964:	ea95 0f0c 	teq	r5, ip
  407968:	d106      	bne.n	407978 <__aeabi_ddiv+0x1b0>
  40796a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40796e:	f43f aefd 	beq.w	40776c <__aeabi_dmul+0x1f8>
  407972:	4610      	mov	r0, r2
  407974:	4619      	mov	r1, r3
  407976:	e722      	b.n	4077be <__aeabi_dmul+0x24a>
  407978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40797c:	bf18      	it	ne
  40797e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  407982:	f47f aec5 	bne.w	407710 <__aeabi_dmul+0x19c>
  407986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40798a:	f47f af0d 	bne.w	4077a8 <__aeabi_dmul+0x234>
  40798e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  407992:	f47f aeeb 	bne.w	40776c <__aeabi_dmul+0x1f8>
  407996:	e712      	b.n	4077be <__aeabi_dmul+0x24a>

00407998 <__gedf2>:
  407998:	f04f 3cff 	mov.w	ip, #4294967295
  40799c:	e006      	b.n	4079ac <__cmpdf2+0x4>
  40799e:	bf00      	nop

004079a0 <__ledf2>:
  4079a0:	f04f 0c01 	mov.w	ip, #1
  4079a4:	e002      	b.n	4079ac <__cmpdf2+0x4>
  4079a6:	bf00      	nop

004079a8 <__cmpdf2>:
  4079a8:	f04f 0c01 	mov.w	ip, #1
  4079ac:	f84d cd04 	str.w	ip, [sp, #-4]!
  4079b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  4079b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  4079b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  4079bc:	bf18      	it	ne
  4079be:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
  4079c2:	d01b      	beq.n	4079fc <__cmpdf2+0x54>
  4079c4:	b001      	add	sp, #4
  4079c6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
  4079ca:	bf0c      	ite	eq
  4079cc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
  4079d0:	ea91 0f03 	teqne	r1, r3
  4079d4:	bf02      	ittt	eq
  4079d6:	ea90 0f02 	teqeq	r0, r2
  4079da:	2000      	moveq	r0, #0
  4079dc:	4770      	bxeq	lr
  4079de:	f110 0f00 	cmn.w	r0, #0
  4079e2:	ea91 0f03 	teq	r1, r3
  4079e6:	bf58      	it	pl
  4079e8:	4299      	cmppl	r1, r3
  4079ea:	bf08      	it	eq
  4079ec:	4290      	cmpeq	r0, r2
  4079ee:	bf2c      	ite	cs
  4079f0:	17d8      	asrcs	r0, r3, #31
  4079f2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
  4079f6:	f040 0001 	orr.w	r0, r0, #1
  4079fa:	4770      	bx	lr
  4079fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a04:	d102      	bne.n	407a0c <__cmpdf2+0x64>
  407a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407a0a:	d107      	bne.n	407a1c <__cmpdf2+0x74>
  407a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407a14:	d1d6      	bne.n	4079c4 <__cmpdf2+0x1c>
  407a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407a1a:	d0d3      	beq.n	4079c4 <__cmpdf2+0x1c>
  407a1c:	f85d 0b04 	ldr.w	r0, [sp], #4
  407a20:	4770      	bx	lr
  407a22:	bf00      	nop

00407a24 <__aeabi_cdrcmple>:
  407a24:	4684      	mov	ip, r0
  407a26:	4610      	mov	r0, r2
  407a28:	4662      	mov	r2, ip
  407a2a:	468c      	mov	ip, r1
  407a2c:	4619      	mov	r1, r3
  407a2e:	4663      	mov	r3, ip
  407a30:	e000      	b.n	407a34 <__aeabi_cdcmpeq>
  407a32:	bf00      	nop

00407a34 <__aeabi_cdcmpeq>:
  407a34:	b501      	push	{r0, lr}
  407a36:	f7ff ffb7 	bl	4079a8 <__cmpdf2>
  407a3a:	2800      	cmp	r0, #0
  407a3c:	bf48      	it	mi
  407a3e:	f110 0f00 	cmnmi.w	r0, #0
  407a42:	bd01      	pop	{r0, pc}

00407a44 <__aeabi_dcmpeq>:
  407a44:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a48:	f7ff fff4 	bl	407a34 <__aeabi_cdcmpeq>
  407a4c:	bf0c      	ite	eq
  407a4e:	2001      	moveq	r0, #1
  407a50:	2000      	movne	r0, #0
  407a52:	f85d fb08 	ldr.w	pc, [sp], #8
  407a56:	bf00      	nop

00407a58 <__aeabi_dcmplt>:
  407a58:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a5c:	f7ff ffea 	bl	407a34 <__aeabi_cdcmpeq>
  407a60:	bf34      	ite	cc
  407a62:	2001      	movcc	r0, #1
  407a64:	2000      	movcs	r0, #0
  407a66:	f85d fb08 	ldr.w	pc, [sp], #8
  407a6a:	bf00      	nop

00407a6c <__aeabi_dcmple>:
  407a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a70:	f7ff ffe0 	bl	407a34 <__aeabi_cdcmpeq>
  407a74:	bf94      	ite	ls
  407a76:	2001      	movls	r0, #1
  407a78:	2000      	movhi	r0, #0
  407a7a:	f85d fb08 	ldr.w	pc, [sp], #8
  407a7e:	bf00      	nop

00407a80 <__aeabi_dcmpge>:
  407a80:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a84:	f7ff ffce 	bl	407a24 <__aeabi_cdrcmple>
  407a88:	bf94      	ite	ls
  407a8a:	2001      	movls	r0, #1
  407a8c:	2000      	movhi	r0, #0
  407a8e:	f85d fb08 	ldr.w	pc, [sp], #8
  407a92:	bf00      	nop

00407a94 <__aeabi_dcmpgt>:
  407a94:	f84d ed08 	str.w	lr, [sp, #-8]!
  407a98:	f7ff ffc4 	bl	407a24 <__aeabi_cdrcmple>
  407a9c:	bf34      	ite	cc
  407a9e:	2001      	movcc	r0, #1
  407aa0:	2000      	movcs	r0, #0
  407aa2:	f85d fb08 	ldr.w	pc, [sp], #8
  407aa6:	bf00      	nop

00407aa8 <__aeabi_dcmpun>:
  407aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
  407aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407ab0:	d102      	bne.n	407ab8 <__aeabi_dcmpun+0x10>
  407ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
  407ab6:	d10a      	bne.n	407ace <__aeabi_dcmpun+0x26>
  407ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
  407abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
  407ac0:	d102      	bne.n	407ac8 <__aeabi_dcmpun+0x20>
  407ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
  407ac6:	d102      	bne.n	407ace <__aeabi_dcmpun+0x26>
  407ac8:	f04f 0000 	mov.w	r0, #0
  407acc:	4770      	bx	lr
  407ace:	f04f 0001 	mov.w	r0, #1
  407ad2:	4770      	bx	lr

00407ad4 <__aeabi_d2iz>:
  407ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
  407ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  407adc:	d215      	bcs.n	407b0a <__aeabi_d2iz+0x36>
  407ade:	d511      	bpl.n	407b04 <__aeabi_d2iz+0x30>
  407ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  407ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  407ae8:	d912      	bls.n	407b10 <__aeabi_d2iz+0x3c>
  407aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  407aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  407af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  407af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  407afa:	fa23 f002 	lsr.w	r0, r3, r2
  407afe:	bf18      	it	ne
  407b00:	4240      	negne	r0, r0
  407b02:	4770      	bx	lr
  407b04:	f04f 0000 	mov.w	r0, #0
  407b08:	4770      	bx	lr
  407b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  407b0e:	d105      	bne.n	407b1c <__aeabi_d2iz+0x48>
  407b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  407b14:	bf08      	it	eq
  407b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  407b1a:	4770      	bx	lr
  407b1c:	f04f 0000 	mov.w	r0, #0
  407b20:	4770      	bx	lr
  407b22:	bf00      	nop

00407b24 <sysfont_glyphs>:
	...
  407b44:	0030 0030 0030 0030 0030 0030 0000 0030     0.0.0.0.0.0...0.
  407b54:	0030 0000 0000 0000 0000 0000 006c 006c     0...........l.l.
  407b64:	006c 006c 0000 0000 0000 0000 0000 0000     l.l.............
	...
  407b7c:	0000 0028 0028 007c 0028 0028 007c 0028     ..(.(.|.(.(.|.(.
  407b8c:	0028 0000 0000 0000 0000 0000 0010 003c     (.............<.
  407b9c:	0040 0020 0010 0008 0004 0078 0010 0000     @. .......x.....
	...
  407bb4:	0000 007c 00a4 00a8 0050 0028 0054 0094     ..|.....P.(.T...
  407bc4:	0088 0000 0000 0000 0000 0000 0060 0090     ............`...
  407bd4:	0090 0090 0060 0094 0088 0088 0070 0000     ....`.......p...
	...
  407bec:	0010 0010 0010 0000 0000 0000 0000 0000     ................
	...
  407c08:	0008 0010 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407c18:	0010 0008 0000 0000 0000 0000 0020 0010     ............ ...
  407c28:	0008 0008 0008 0008 0008 0008 0010 0020     .............. .
  407c38:	0000 0000 0000 0028 0010 007c 0010 0028     ......(...|...(.
	...
  407c60:	0010 0010 0010 00fe 0010 0010 0010 0000     ................
	...
  407c88:	0010 0030 0020 0000 0000 0000 0000 0000     ..0. ...........
  407c98:	0000 0000 0000 007c 0000 0000 0000 0000     ......|.........
	...
  407cbc:	0000 0030 0030 0000 0000 0000 0000 0000     ..0.0...........
  407ccc:	0000 0008 0008 0010 0010 0020 0020 0040     .......... . .@.
  407cdc:	0040 0000 0000 0000 0000 0000 0000 0078     @.............x.
  407cec:	0084 008c 0094 00a4 00c4 0084 0078 0000     ............x...
	...
  407d04:	0000 0010 0030 0050 0010 0010 0010 0010     ....0.P.........
  407d14:	007c 0000 0000 0000 0000 0000 0000 0070     |.............p.
  407d24:	0088 0008 0010 0020 0040 0080 00f8 0000     ...... .@.......
	...
  407d3c:	0000 0070 0088 0008 0030 0008 0008 0088     ..p.....0.......
  407d4c:	0070 0000 0000 0000 0000 0000 0000 0008     p...............
  407d5c:	0018 0028 0048 0088 00fc 0008 0008 0000     ..(.H...........
	...
  407d74:	0000 0078 0080 0080 00f0 0008 0008 0008     ..x.............
  407d84:	00f0 0000 0000 0000 0000 0000 0000 0030     ..............0.
  407d94:	0040 0080 00f0 0088 0088 0088 0070 0000     @...........p...
	...
  407dac:	0000 00f8 0008 0010 0010 0020 0020 0040     .......... . .@.
  407dbc:	0040 0000 0000 0000 0000 0000 0000 0070     @.............p.
  407dcc:	0088 0088 0070 0088 0088 0088 0070 0000     ....p.......p...
	...
  407de4:	0000 0070 0088 0088 0088 0078 0008 0010     ..p.......x.....
  407df4:	0060 0000 0000 0000 0000 0000 0000 0000     `...............
  407e04:	0000 0030 0030 0000 0000 0030 0030 0000     ..0.0.....0.0...
	...
  407e20:	0000 0030 0030 0000 0000 0030 0030 0060     ..0.0.....0.0.`.
  407e30:	0040 0000 0000 0000 0000 0000 0008 0010     @...............
  407e40:	0020 0040 0020 0010 0008 0000 0000 0000      .@. ...........
	...
  407e5c:	007c 0000 007c 0000 0000 0000 0000 0000     |...|...........
	...
  407e74:	0040 0020 0010 0008 0010 0020 0040 0000     @. ....... .@...
	...
  407e8c:	0000 0030 0048 0008 0010 0020 0000 0000     ..0.H..... .....
  407e9c:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
  407eac:	003c 0042 009a 00aa 00aa 00be 0080 0078     <.B...........x.
	...
  407ec4:	0000 0010 0028 0028 0044 007c 0044 0044     ....(.(.D.|.D.D.
  407ed4:	0044 0000 0000 0000 0000 0000 0000 00f8     D...............
  407ee4:	0084 0084 00f8 0084 0084 0084 00f8 0000     ................
	...
  407efc:	0000 003c 0040 0080 0080 0080 0080 0040     ..<.@.........@.
  407f0c:	003c 0000 0000 0000 0000 0000 0000 00f0     <...............
  407f1c:	0088 0084 0084 0084 0084 0088 00f0 0000     ................
	...
  407f34:	0000 00f8 0080 0080 00f0 0080 0080 0080     ................
  407f44:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407f54:	0080 0080 00f8 0080 0080 0080 0080 0000     ................
	...
  407f6c:	0000 003c 0040 0080 0080 009c 0084 0044     ..<.@.........D.
  407f7c:	0038 0000 0000 0000 0000 0000 0000 0088     8...............
  407f8c:	0088 0088 00f8 0088 0088 0088 0088 0000     ................
	...
  407fa4:	0000 00f8 0020 0020 0020 0020 0020 0020     .... . . . . . .
  407fb4:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  407fc4:	0008 0008 0008 0008 0008 0008 00f0 0000     ................
	...
  407fdc:	0000 0084 0088 0090 00a0 00d0 0088 0084     ................
  407fec:	0084 0000 0000 0000 0000 0000 0000 0080     ................
  407ffc:	0080 0080 0080 0080 0080 0080 00fc 0000     ................
	...
  408014:	0000 0084 00cc 00cc 00b4 00b4 0084 0084     ................
  408024:	0084 0000 0000 0000 0000 0000 0000 0084     ................
  408034:	00c4 00c4 00a4 00a4 0094 0094 008c 0000     ................
	...
  40804c:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  40805c:	0078 0000 0000 0000 0000 0000 0000 00f8     x...............
  40806c:	0084 0084 0084 00f8 0080 0080 0080 0000     ................
	...
  408084:	0000 0078 0084 0084 0084 0084 0084 0084     ..x.............
  408094:	0078 0020 0018 0000 0000 0000 0000 00f8     x. .............
  4080a4:	0084 0084 0084 00f8 0088 0084 0084 0000     ................
	...
  4080bc:	0000 007c 0080 0080 0060 0018 0004 0004     ..|.....`.......
  4080cc:	00f8 0000 0000 0000 0000 0000 0000 00f8     ................
  4080dc:	0020 0020 0020 0020 0020 0020 0020 0000      . . . . . . ...
	...
  4080f4:	0000 0084 0084 0084 0084 0084 0084 0084     ................
  408104:	0078 0000 0000 0000 0000 0000 0000 0084     x...............
  408114:	0084 0084 0048 0048 0048 0030 0030 0000     ....H.H.H.0.0...
	...
  40812c:	0000 0088 00a8 00a8 00a8 00a8 00a8 0050     ..............P.
  40813c:	0050 0000 0000 0000 0000 0000 0000 0088     P...............
  40814c:	0088 0050 0020 0020 0050 0088 0088 0000     ..P. . .P.......
	...
  408164:	0000 0088 0088 0088 0050 0050 0020 0020     ........P.P. . .
  408174:	0020 0000 0000 0000 0000 0000 0000 00fc      ...............
  408184:	0004 0008 0010 0020 0040 0080 00fc 0000     ...... .@.......
	...
  40819c:	0070 0040 0040 0040 0040 0040 0040 0040     p.@.@.@.@.@.@.@.
  4081ac:	0040 0040 0070 0000 0000 0000 0040 0040     @.@.p.......@.@.
  4081bc:	0020 0020 0020 0010 0010 0010 0008 0008      . . ...........
	...
  4081d4:	0038 0008 0008 0008 0008 0008 0008 0008     8...............
  4081e4:	0008 0008 0038 0000 0000 0000 0010 0028     ....8.........(.
  4081f4:	0044 0000 0000 0000 0000 0000 0000 0000     D...............
	...
  40821c:	0038 0000 0000 0000 0000 0000 0000 0020     8............. .
  40822c:	0010 0000 0000 0000 0000 0000 0000 0000     ................
	...
  408248:	0000 0070 0008 0008 0078 0088 007c 0000     ..p.....x...|...
	...
  408260:	0080 0080 0080 00f8 0084 0084 0084 0084     ................
  408270:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  408280:	0000 0078 0080 0080 0080 0080 0078 0000     ..x.........x...
	...
  408298:	0004 0004 0004 007c 0084 0084 0084 008c     ......|.........
  4082a8:	0074 0000 0000 0000 0000 0000 0000 0000     t...............
  4082b8:	0000 0078 0084 00fc 0080 0080 007c 0000     ..x.........|...
	...
  4082d0:	001c 0020 0020 00fc 0020 0020 0020 0020     .. . ... . . . .
  4082e0:	00fc 0000 0000 0000 0000 0000 0000 0000     ................
  4082f0:	0000 007c 0084 0084 0084 0084 007c 0004     ..|.........|...
  408300:	0078 0000 0000 0000 0080 0080 0080 00b8     x...............
  408310:	00c4 0084 0084 0084 0084 0000 0000 0000     ................
  408320:	0000 0000 0000 0010 0000 0070 0010 0010     ..........p.....
  408330:	0010 0010 007c 0000 0000 0000 0000 0000     ....|...........
  408340:	0000 0008 0000 0078 0008 0008 0008 0008     ......x.........
  408350:	0008 0008 0008 0070 0000 0000 0080 0080     ......p.........
  408360:	0080 0088 0090 00a0 00d0 0088 0088 0000     ................
	...
  408378:	00e0 0020 0020 0020 0020 0020 0020 0020     .. . . . . . . .
  408388:	00f8 0000 0000 0000 0000 0000 0000 0000     ................
  408398:	0000 00a4 00fc 00a4 00a4 00a4 00a4 0000     ................
	...
  4083b4:	0000 00b8 00c4 0084 0084 0084 0084 0000     ................
	...
  4083d0:	0000 0078 0084 0084 0084 0084 0078 0000     ..x.........x...
	...
  4083ec:	0000 00b8 00c4 0084 0084 0084 00f8 0080     ................
  4083fc:	0080 0000 0000 0000 0000 0000 0000 007c     ..............|.
  40840c:	0084 0084 0084 0084 007c 0004 0004 0000     ........|.......
	...
  408424:	0000 00d8 0060 0040 0040 0040 00f0 0000     ....`.@.@.@.....
	...
  408440:	0000 0078 0080 0040 0030 0008 00f0 0000     ..x...@.0.......
	...
  40845c:	0020 00fc 0020 0020 0020 0020 001c 0000      ... . . . .....
	...
  408478:	0000 0088 0088 0088 0088 0088 007c 0000     ............|...
	...
  408494:	0000 0084 0084 0084 0048 0048 0030 0000     ........H.H.0...
	...
  4084b0:	0000 0088 00a8 00a8 00a8 00a8 0050 0000     ............P...
	...
  4084cc:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
  4084e8:	0000 0084 0084 0048 0048 0030 0010 0020     ......H.H.0... .
  4084f8:	0040 0000 0000 0000 0000 0000 0000 00f8     @...............
  408508:	0008 0010 0020 0040 00f8 0000 0000 0000     .... .@.........
  408518:	0000 0000 0010 0020 0020 0010 0020 0020     ...... . ... . .
  408528:	0010 0020 0020 0010 0000 0000 0000 0000     .. . ...........
  408538:	0010 0010 0010 0010 0000 0000 0010 0010     ................
  408548:	0010 0010 0000 0000 0000 0000 0020 0010     ............ ...
  408558:	0010 0020 0010 0010 0020 0010 0010 0020     .. ..... ..... .
  408568:	0000 0000 754d 6973 6163 203a 6425 0000     ....Musica: %d..
  408578:	6150 7375 2065 2020 2020 0000 29e1 0040     Pause     ...)@.
  408588:	2a91 0040 2b51 0040 000a 0000 000b 0000     .*@.Q+@.........
  408598:	000c 0000 0010 0000 0020 2040 034c 2040     ........ .@ L.@ 
  4085a8:	0000 3fc0 00cb 0000 0678 2040 06c8 2040     ...?....x.@ ..@ 
  4085b8:	0000 3f80 0014 0000 0718 2040 0850 2040     ...?......@ P.@ 
  4085c8:	0000 4248 004e 0000                         ..HBN...

004085d0 <_global_impure_ptr>:
  4085d0:	0a00 2040 4e49 0046 6e69 0066 414e 004e     ..@ INF.inf.NAN.
  4085e0:	616e 006e 3130 3332 3534 3736 3938 4241     nan.0123456789AB
  4085f0:	4443 4645 0000 0000 3130 3332 3534 3736     CDEF....01234567
  408600:	3938 6261 6463 6665 0000 0000 6e28 6c75     89abcdef....(nul
  408610:	296c 0000 0030 0000                         l)..0...

00408618 <blanks.7223>:
  408618:	2020 2020 2020 2020 2020 2020 2020 2020                     

00408628 <zeroes.7224>:
  408628:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
  408638:	6e49 6966 696e 7974 0000 0000 614e 004e     Infinity....NaN.

00408648 <__mprec_bigtens>:
  408648:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
  408658:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
  408668:	bf3c 7f73 4fdd 7515                         <.s..O.u

00408670 <__mprec_tens>:
  408670:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
  408680:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
  408690:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
  4086a0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
  4086b0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
  4086c0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
  4086d0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
  4086e0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
  4086f0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
  408700:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
  408710:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
  408720:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
  408730:	9db4 79d9 7843 44ea                         ...yCx.D

00408738 <p05.6055>:
  408738:	0005 0000 0019 0000 007d 0000 0043 0000     ........}...C...
  408748:	4f50 4953 0058 0000 002e 0000               POSIX.......

00408754 <_ctype_>:
  408754:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
  408764:	2020 2020 2020 2020 2020 2020 2020 2020                     
  408774:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
  408784:	0410 0404 0404 0404 0404 1004 1010 1010     ................
  408794:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
  4087a4:	0101 0101 0101 0101 0101 0101 1010 1010     ................
  4087b4:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
  4087c4:	0202 0202 0202 0202 0202 0202 1010 1010     ................
  4087d4:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

00408858 <_init>:
  408858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40885a:	bf00      	nop
  40885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  40885e:	bc08      	pop	{r3}
  408860:	469e      	mov	lr, r3
  408862:	4770      	bx	lr

00408864 <__init_array_start>:
  408864:	00404aa5 	.word	0x00404aa5

00408868 <__frame_dummy_init_array_entry>:
  408868:	00400165                                e.@.

0040886c <_fini>:
  40886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40886e:	bf00      	nop
  408870:	bcf8      	pop	{r3, r4, r5, r6, r7}
  408872:	bc08      	pop	{r3}
  408874:	469e      	mov	lr, r3
  408876:	4770      	bx	lr

00408878 <__fini_array_start>:
  408878:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 7b24 0040 0e0a 7d20               ....${@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <melody1>:
20400020:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
20400030:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
20400040:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
20400050:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
20400060:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400070:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
20400080:	01b8 0000 01ee 0000 020b 0000 020b 0000     ................
20400090:	0000 0000 020b 0000 024b 0000 01ee 0000     ........K.......
204000a0:	01ee 0000 0000 0000 01b8 0000 0188 0000     ................
204000b0:	01b8 0000 0000 0000 014a 0000 0188 0000     ........J.......
204000c0:	01b8 0000 01b8 0000 0000 0000 01b8 0000     ................
204000d0:	020b 0000 024b 0000 024b 0000 0000 0000     ....K...K.......
204000e0:	024b 0000 0293 0000 02ba 0000 02ba 0000     K...............
204000f0:	0000 0000 0293 0000 024b 0000 0293 0000     ........K.......
20400100:	01b8 0000 0000 0000 01b8 0000 01ee 0000     ................
20400110:	020b 0000 020b 0000 0000 0000 024b 0000     ............K...
20400120:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
20400130:	020b 0000 01ee 0000 01ee 0000 0000 0000     ................
20400140:	020b 0000 01b8 0000 01ee 0000 0000 0000     ................
20400150:	01b8 0000 01b8 0000 01b8 0000 01ee 0000     ................
20400160:	020b 0000 020b 0000 0000 0000 020b 0000     ................
20400170:	024b 0000 01ee 0000 01ee 0000 0000 0000     K...............
20400180:	01b8 0000 0188 0000 01b8 0000 0000 0000     ................
20400190:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
204001a0:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
204001b0:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
204001c0:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
204001d0:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
204001e0:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
204001f0:	01b8 0000 020b 0000 024b 0000 024b 0000     ........K...K...
20400200:	0000 0000 024b 0000 0293 0000 02ba 0000     ....K...........
20400210:	02ba 0000 0000 0000 0293 0000 024b 0000     ............K...
20400220:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
20400230:	01ee 0000 020b 0000 020b 0000 0000 0000     ................
20400240:	024b 0000 0293 0000 01b8 0000 0000 0000     K...............
20400250:	01b8 0000 020b 0000 01ee 0000 01ee 0000     ................
20400260:	0000 0000 020b 0000 01b8 0000 01ee 0000     ................
20400270:	0000 0000 0293 0000 0000 0000 0000 0000     ................
20400280:	02ba 0000 0000 0000 0000 0000 0293 0000     ................
20400290:	0293 0000 0000 0000 0310 0000 0000 0000     ................
204002a0:	0293 0000 024b 0000 0000 0000 0000 0000     ....K...........
204002b0:	024b 0000 0000 0000 0000 0000 020b 0000     K...............
	...
204002c8:	01ee 0000 020b 0000 0000 0000 01ee 0000     ................
204002d8:	0000 0000 01b8 0000 0293 0000 0000 0000     ................
204002e8:	0000 0000 02ba 0000 0000 0000 0000 0000     ................
204002f8:	0293 0000 0293 0000 0000 0000 0310 0000     ................
20400308:	0000 0000 0293 0000 024b 0000 0000 0000     ........K.......
20400318:	0000 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400328:	020b 0000 0000 0000 0000 0000 01ee 0000     ................
20400338:	020b 0000 0000 0000 01ee 0000 0000 0000     ................
20400348:	01b8 0000                                   ....

2040034c <duration1>:
2040034c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040035c:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
2040036c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040037c:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
2040038c:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
2040039c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204003ac:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204003bc:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204003cc:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204003dc:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
204003ec:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204003fc:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040040c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040041c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040042c:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
2040043c:	00fa 0000 007d 0000 007d 0000 00fa 0000     ....}...}.......
2040044c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040045c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040046c:	007d 0000 007d 0000 0177 0000 0177 0000     }...}...w...w...
2040047c:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
2040048c:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
2040049c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204004ac:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
204004bc:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204004cc:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204004dc:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204004ec:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204004fc:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
2040050c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040051c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040052c:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
2040053c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040054c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040055c:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
2040056c:	00fa 0000 007d 0000 00fa 0000 007d 0000     ....}.......}...
2040057c:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
2040058c:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
2040059c:	0177 0000 00fa 0000 007d 0000 0177 0000     w.......}...w...
204005ac:	00fa 0000 007d 0000 0177 0000 007d 0000     ....}...w...}...
204005bc:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204005cc:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
204005dc:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
204005ec:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204005fc:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
2040060c:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
2040061c:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
2040062c:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
2040063c:	007d 0000 007d 0000 0177 0000 00fa 0000     }...}...w.......
2040064c:	007d 0000 0177 0000 00fa 0000 007d 0000     }...w.......}...
2040065c:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
2040066c:	007d 0000 007d 0000 01f4 0000               }...}.......

20400678 <melody2>:
20400678:	01b8 0000 01b8 0000 01b8 0000 015d 0000     ............]...
20400688:	020b 0000 01b8 0000 015d 0000 020b 0000     ........].......
20400698:	01b8 0000 0000 0000 0293 0000 0293 0000     ................
204006a8:	0293 0000 02ba 0000 020b 0000 019f 0000     ................
204006b8:	015d 0000 020b 0000 01b8 0000 0000 0000     ]...............

204006c8 <duration2>:
204006c8:	01f4 0000 01f4 0000 01f4 0000 015e 0000     ............^...
204006d8:	0096 0000 01f4 0000 015e 0000 0096 0000     ........^.......
204006e8:	028a 0000 01f4 0000 01f4 0000 01f4 0000     ................
204006f8:	01f4 0000 015e 0000 0096 0000 01f4 0000     ....^...........
20400708:	015e 0000 0096 0000 028a 0000 01f4 0000     ^...............

20400718 <melody3>:
20400718:	0a4d 0000 0a4d 0000 0000 0000 0a4d 0000     M...M.......M...
20400728:	0000 0000 082d 0000 0a4d 0000 0000 0000     ....-...M.......
20400738:	0c40 0000 0000 0000 0000 0000 0000 0000     @...............
20400748:	0620 0000 0000 0000 0000 0000 0000 0000      ...............
20400758:	082d 0000 0000 0000 0000 0000 0620 0000     -........... ...
	...
20400770:	0527 0000 0000 0000 0000 0000 06e0 0000     '...............
20400780:	0000 0000 07b8 0000 0000 0000 0749 0000     ............I...
20400790:	06e0 0000 0000 0000 0620 0000 0a4d 0000     ........ ...M...
204007a0:	0c40 0000 0dc0 0000 0000 0000 0aea 0000     @...............
204007b0:	0c40 0000 0000 0000 0a4d 0000 0000 0000     @.......M.......
204007c0:	082d 0000 092d 0000 07b8 0000 0000 0000     -...-...........
204007d0:	0000 0000 082d 0000 0000 0000 0000 0000     ....-...........
204007e0:	0620 0000 0000 0000 0000 0000 0527 0000      ...........'...
	...
204007f8:	06e0 0000 0000 0000 07b8 0000 0000 0000     ................
20400808:	0749 0000 06e0 0000 0000 0000 0620 0000     I........... ...
20400818:	0a4d 0000 0c40 0000 0dc0 0000 0000 0000     M...@...........
20400828:	0aea 0000 0c40 0000 0000 0000 0a4d 0000     ....@.......M...
20400838:	0000 0000 082d 0000 092d 0000 07b8 0000     ....-...-.......
	...

20400850 <duration3>:
20400850:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400860:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400870:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400880:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400890:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204008a0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204008b0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204008c0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204008d0:	0009 0000 0009 0000 0009 0000 000c 0000     ................
204008e0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204008f0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400900:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400910:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400920:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400930:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400940:	000c 0000 000c 0000 000c 0000 0009 0000     ................
20400950:	0009 0000 0009 0000 000c 0000 000c 0000     ................
20400960:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400970:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400980:	000c 0000 000c 0000                         ........

20400988 <led1>:
20400988:	0e00 400e 000a 0000 0000 0000 0001 0000     ...@............

20400998 <led2>:
20400998:	1200 400e 000c 0000 001e 0000 0000 4000     ...@...........@

204009a8 <led3>:
204009a8:	1000 400e 000b 0000 0002 0000 0004 0000     ...@............

204009b8 <prevButton>:
204009b8:	1400 400e 0010 0000 001c 0000 0000 1000     ...@............

204009c8 <playButton>:
204009c8:	1200 400e 000c 0000 001f 0000 0000 8000     ...@............

204009d8 <nextButton>:
204009d8:	0e00 400e 000a 0000 0013 0000 0000 0008     ...@............

204009e8 <buzzer>:
204009e8:	1200 400e 000c 0000 000d 0000 2000 0000     ...@......... ..

204009f8 <_impure_ptr>:
204009f8:	0a00 2040 0000 0000                         ..@ ....

20400a00 <impure_data>:
20400a00:	0000 0000 0cec 2040 0d54 2040 0dbc 2040     ......@ T.@ ..@ 
	...
20400aa8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400ab8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400e28 <__atexit_recursive_mutex>:
20400e28:	1680 2040                                   ..@ 

20400e2c <__malloc_av_>:
	...
20400e34:	0e2c 2040 0e2c 2040 0e34 2040 0e34 2040     ,.@ ,.@ 4.@ 4.@ 
20400e44:	0e3c 2040 0e3c 2040 0e44 2040 0e44 2040     <.@ <.@ D.@ D.@ 
20400e54:	0e4c 2040 0e4c 2040 0e54 2040 0e54 2040     L.@ L.@ T.@ T.@ 
20400e64:	0e5c 2040 0e5c 2040 0e64 2040 0e64 2040     \.@ \.@ d.@ d.@ 
20400e74:	0e6c 2040 0e6c 2040 0e74 2040 0e74 2040     l.@ l.@ t.@ t.@ 
20400e84:	0e7c 2040 0e7c 2040 0e84 2040 0e84 2040     |.@ |.@ ..@ ..@ 
20400e94:	0e8c 2040 0e8c 2040 0e94 2040 0e94 2040     ..@ ..@ ..@ ..@ 
20400ea4:	0e9c 2040 0e9c 2040 0ea4 2040 0ea4 2040     ..@ ..@ ..@ ..@ 
20400eb4:	0eac 2040 0eac 2040 0eb4 2040 0eb4 2040     ..@ ..@ ..@ ..@ 
20400ec4:	0ebc 2040 0ebc 2040 0ec4 2040 0ec4 2040     ..@ ..@ ..@ ..@ 
20400ed4:	0ecc 2040 0ecc 2040 0ed4 2040 0ed4 2040     ..@ ..@ ..@ ..@ 
20400ee4:	0edc 2040 0edc 2040 0ee4 2040 0ee4 2040     ..@ ..@ ..@ ..@ 
20400ef4:	0eec 2040 0eec 2040 0ef4 2040 0ef4 2040     ..@ ..@ ..@ ..@ 
20400f04:	0efc 2040 0efc 2040 0f04 2040 0f04 2040     ..@ ..@ ..@ ..@ 
20400f14:	0f0c 2040 0f0c 2040 0f14 2040 0f14 2040     ..@ ..@ ..@ ..@ 
20400f24:	0f1c 2040 0f1c 2040 0f24 2040 0f24 2040     ..@ ..@ $.@ $.@ 
20400f34:	0f2c 2040 0f2c 2040 0f34 2040 0f34 2040     ,.@ ,.@ 4.@ 4.@ 
20400f44:	0f3c 2040 0f3c 2040 0f44 2040 0f44 2040     <.@ <.@ D.@ D.@ 
20400f54:	0f4c 2040 0f4c 2040 0f54 2040 0f54 2040     L.@ L.@ T.@ T.@ 
20400f64:	0f5c 2040 0f5c 2040 0f64 2040 0f64 2040     \.@ \.@ d.@ d.@ 
20400f74:	0f6c 2040 0f6c 2040 0f74 2040 0f74 2040     l.@ l.@ t.@ t.@ 
20400f84:	0f7c 2040 0f7c 2040 0f84 2040 0f84 2040     |.@ |.@ ..@ ..@ 
20400f94:	0f8c 2040 0f8c 2040 0f94 2040 0f94 2040     ..@ ..@ ..@ ..@ 
20400fa4:	0f9c 2040 0f9c 2040 0fa4 2040 0fa4 2040     ..@ ..@ ..@ ..@ 
20400fb4:	0fac 2040 0fac 2040 0fb4 2040 0fb4 2040     ..@ ..@ ..@ ..@ 
20400fc4:	0fbc 2040 0fbc 2040 0fc4 2040 0fc4 2040     ..@ ..@ ..@ ..@ 
20400fd4:	0fcc 2040 0fcc 2040 0fd4 2040 0fd4 2040     ..@ ..@ ..@ ..@ 
20400fe4:	0fdc 2040 0fdc 2040 0fe4 2040 0fe4 2040     ..@ ..@ ..@ ..@ 
20400ff4:	0fec 2040 0fec 2040 0ff4 2040 0ff4 2040     ..@ ..@ ..@ ..@ 
20401004:	0ffc 2040 0ffc 2040 1004 2040 1004 2040     ..@ ..@ ..@ ..@ 
20401014:	100c 2040 100c 2040 1014 2040 1014 2040     ..@ ..@ ..@ ..@ 
20401024:	101c 2040 101c 2040 1024 2040 1024 2040     ..@ ..@ $.@ $.@ 
20401034:	102c 2040 102c 2040 1034 2040 1034 2040     ,.@ ,.@ 4.@ 4.@ 
20401044:	103c 2040 103c 2040 1044 2040 1044 2040     <.@ <.@ D.@ D.@ 
20401054:	104c 2040 104c 2040 1054 2040 1054 2040     L.@ L.@ T.@ T.@ 
20401064:	105c 2040 105c 2040 1064 2040 1064 2040     \.@ \.@ d.@ d.@ 
20401074:	106c 2040 106c 2040 1074 2040 1074 2040     l.@ l.@ t.@ t.@ 
20401084:	107c 2040 107c 2040 1084 2040 1084 2040     |.@ |.@ ..@ ..@ 
20401094:	108c 2040 108c 2040 1094 2040 1094 2040     ..@ ..@ ..@ ..@ 
204010a4:	109c 2040 109c 2040 10a4 2040 10a4 2040     ..@ ..@ ..@ ..@ 
204010b4:	10ac 2040 10ac 2040 10b4 2040 10b4 2040     ..@ ..@ ..@ ..@ 
204010c4:	10bc 2040 10bc 2040 10c4 2040 10c4 2040     ..@ ..@ ..@ ..@ 
204010d4:	10cc 2040 10cc 2040 10d4 2040 10d4 2040     ..@ ..@ ..@ ..@ 
204010e4:	10dc 2040 10dc 2040 10e4 2040 10e4 2040     ..@ ..@ ..@ ..@ 
204010f4:	10ec 2040 10ec 2040 10f4 2040 10f4 2040     ..@ ..@ ..@ ..@ 
20401104:	10fc 2040 10fc 2040 1104 2040 1104 2040     ..@ ..@ ..@ ..@ 
20401114:	110c 2040 110c 2040 1114 2040 1114 2040     ..@ ..@ ..@ ..@ 
20401124:	111c 2040 111c 2040 1124 2040 1124 2040     ..@ ..@ $.@ $.@ 
20401134:	112c 2040 112c 2040 1134 2040 1134 2040     ,.@ ,.@ 4.@ 4.@ 
20401144:	113c 2040 113c 2040 1144 2040 1144 2040     <.@ <.@ D.@ D.@ 
20401154:	114c 2040 114c 2040 1154 2040 1154 2040     L.@ L.@ T.@ T.@ 
20401164:	115c 2040 115c 2040 1164 2040 1164 2040     \.@ \.@ d.@ d.@ 
20401174:	116c 2040 116c 2040 1174 2040 1174 2040     l.@ l.@ t.@ t.@ 
20401184:	117c 2040 117c 2040 1184 2040 1184 2040     |.@ |.@ ..@ ..@ 
20401194:	118c 2040 118c 2040 1194 2040 1194 2040     ..@ ..@ ..@ ..@ 
204011a4:	119c 2040 119c 2040 11a4 2040 11a4 2040     ..@ ..@ ..@ ..@ 
204011b4:	11ac 2040 11ac 2040 11b4 2040 11b4 2040     ..@ ..@ ..@ ..@ 
204011c4:	11bc 2040 11bc 2040 11c4 2040 11c4 2040     ..@ ..@ ..@ ..@ 
204011d4:	11cc 2040 11cc 2040 11d4 2040 11d4 2040     ..@ ..@ ..@ ..@ 
204011e4:	11dc 2040 11dc 2040 11e4 2040 11e4 2040     ..@ ..@ ..@ ..@ 
204011f4:	11ec 2040 11ec 2040 11f4 2040 11f4 2040     ..@ ..@ ..@ ..@ 
20401204:	11fc 2040 11fc 2040 1204 2040 1204 2040     ..@ ..@ ..@ ..@ 
20401214:	120c 2040 120c 2040 1214 2040 1214 2040     ..@ ..@ ..@ ..@ 
20401224:	121c 2040 121c 2040 1224 2040 1224 2040     ..@ ..@ $.@ $.@ 

20401234 <__malloc_sbrk_base>:
20401234:	ffff ffff                                   ....

20401238 <__malloc_trim_threshold>:
20401238:	0000 0002                                   ....

2040123c <__global_locale>:
2040123c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040125c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040127c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040129c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204012bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204012dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204012fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040131c:	71e9 0040 6da9 0040 0000 0000 8754 0040     .q@..m@.....T.@.
2040132c:	8750 0040 85f4 0040 85f4 0040 85f4 0040     P.@...@...@...@.
2040133c:	85f4 0040 85f4 0040 85f4 0040 85f4 0040     ..@...@...@...@.
2040134c:	85f4 0040 85f4 0040 ffff ffff ffff ffff     ..@...@.........
2040135c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
20401384:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
